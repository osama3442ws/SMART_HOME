
SMARTHOME.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000058b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000024c  00800060  000058b0  00005944  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003a  008002ac  008002ac  00005b90  2**0
                  ALLOC
  3 .stab         000072a8  00000000  00000000  00005b90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002c91  00000000  00000000  0000ce38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000fac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000fc09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000fd79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000119c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000128ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0001365c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000137bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00013a49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014217  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 36 12 	jmp	0x246c	; 0x246c <__vector_1>
       8:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__vector_2>
       c:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 fe 08 	jmp	0x11fc	; 0x11fc <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__vector_10>
      2c:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__vector_11>
      30:	0c 94 ed 0c 	jmp	0x19da	; 0x19da <__vector_12>
      34:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__vector_13>
      38:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__vector_14>
      3c:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__vector_15>
      40:	0c 94 6a 19 	jmp	0x32d4	; 0x32d4 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	f8 e5       	ldi	r31, 0x58	; 88
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3a       	cpi	r26, 0xAC	; 172
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac ea       	ldi	r26, 0xAC	; 172
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3e       	cpi	r26, 0xE6	; 230
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 68 22 	call	0x44d0	; 0x44d0 <main>
      8a:	0c 94 56 2c 	jmp	0x58ac	; 0x58ac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1f 2c 	jmp	0x583e	; 0x583e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e8       	ldi	r26, 0x81	; 129
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3b 2c 	jmp	0x5876	; 0x5876 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2b 2c 	jmp	0x5856	; 0x5856 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 47 2c 	jmp	0x588e	; 0x588e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2b 2c 	jmp	0x5856	; 0x5856 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 47 2c 	jmp	0x588e	; 0x588e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1f 2c 	jmp	0x583e	; 0x583e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e8       	ldi	r24, 0x81	; 129
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3b 2c 	jmp	0x5876	; 0x5876 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2b 2c 	jmp	0x5856	; 0x5856 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 47 2c 	jmp	0x588e	; 0x588e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 2b 2c 	jmp	0x5856	; 0x5856 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 47 2c 	jmp	0x588e	; 0x588e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 2b 2c 	jmp	0x5856	; 0x5856 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 47 2c 	jmp	0x588e	; 0x588e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2f 2c 	jmp	0x585e	; 0x585e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 4b 2c 	jmp	0x5896	; 0x5896 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <USART_voidInit>:
/* Function Name : USART_voidInit                                                               */
/* Description : Initilization of UART Mode                                                     */                                         
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void USART_voidInit (void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <USART_voidInit+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
/*======================================*/
/*          BAUD RATE Selection         */
/*--------------------------------------*/
    CLEAR_BIT(UBRRH_REG,UBRRH_URSEL);                    // access UBRRH to Configer the BAUD Rate
     b50:	a0 e4       	ldi	r26, 0x40	; 64
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	e0 e4       	ldi	r30, 0x40	; 64
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	8f 77       	andi	r24, 0x7F	; 127
     b5c:	8c 93       	st	X, r24
    u16 UBRR = 0 ;
     b5e:	1a 82       	std	Y+2, r1	; 0x02
     b60:	19 82       	std	Y+1, r1	; 0x01
    #if( SPEED == NORMAL_SPEED )                         // U2X = 1  Normal Speed Transsmition
        UBRR = ( CPU_CLK / ( BAUD_RATE * 8UL ) ) - 1 ;
    #elif( SPEED == DOUBBLE_SPEED )                      // U2X = 0  Double Speed Transsmition
        UBRR = ( CPU_CLK / ( BAUD_RATE * 16UL ) ) - 1 ;
     b62:	83 e3       	ldi	r24, 0x33	; 51
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	9a 83       	std	Y+2, r25	; 0x02
     b68:	89 83       	std	Y+1, r24	; 0x01
    #endif
    UBRRL_REG = (u8)(UBRR);                     // first 8 Bit
     b6a:	e9 e2       	ldi	r30, 0x29	; 41
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	80 83       	st	Z, r24
    UBRRH_REG = (u8)(UBRR >> 8);                // second 8 Bit
     b72:	e0 e4       	ldi	r30, 0x40	; 64
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	9a 81       	ldd	r25, Y+2	; 0x02
     b7a:	89 2f       	mov	r24, r25
     b7c:	99 27       	eor	r25, r25
     b7e:	80 83       	st	Z, r24
/*======================================*/
/*        USART Initilization           */
/*--------------------------------------*/
    SET_BIT(UCSRC_REG,UCSRC_URSEL);             // Select UCSRC_REG
     b80:	a0 e4       	ldi	r26, 0x40	; 64
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	e0 e4       	ldi	r30, 0x40	; 64
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	80 68       	ori	r24, 0x80	; 128
     b8c:	8c 93       	st	X, r24
    CLEAR_BIT(UCSRC_REG,UCSRC_UMSE1);           // select Async Mode
     b8e:	a0 e4       	ldi	r26, 0x40	; 64
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e0 e4       	ldi	r30, 0x40	; 64
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	8f 7b       	andi	r24, 0xBF	; 191
     b9a:	8c 93       	st	X, r24
/*======================================*/
/*         Select Parity Mode           */
/*--------------------------------------*/    
    #if ( Parity_Mode == DISABLE )              // Select Parity (Disable)
        CLEAR_BIT(UCSRC_REG,UCSRC_UPM0);
     b9c:	a0 e4       	ldi	r26, 0x40	; 64
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	e0 e4       	ldi	r30, 0x40	; 64
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	8f 7e       	andi	r24, 0xEF	; 239
     ba8:	8c 93       	st	X, r24
        CLEAR_BIT(UCSRC_REG,UCSRC_UPM1);
     baa:	a0 e4       	ldi	r26, 0x40	; 64
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	e0 e4       	ldi	r30, 0x40	; 64
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	8f 7d       	andi	r24, 0xDF	; 223
     bb6:	8c 93       	st	X, r24
    #endif
/*======================================*/
/*          Select STOP BIT             */
/*--------------------------------------*/
    #if ( STOP_BIT == ONE )
    CLEAR_BIT(UCSRC_REG,UCSRC_USBS);             // select 1 Stop Bit
     bb8:	a0 e4       	ldi	r26, 0x40	; 64
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	e0 e4       	ldi	r30, 0x40	; 64
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	87 7f       	andi	r24, 0xF7	; 247
     bc4:	8c 93       	st	X, r24
    #endif
/*======================================*/
/*       Select Character Size          */
/*--------------------------------------*/
    // Character size [8] Bit
      SET_BIT(UCSRC_REG,UCSRC_UCSZ0);
     bc6:	a0 e4       	ldi	r26, 0x40	; 64
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e0 e4       	ldi	r30, 0x40	; 64
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	82 60       	ori	r24, 0x02	; 2
     bd2:	8c 93       	st	X, r24
      SET_BIT(UCSRC_REG,UCSRC_UCSZ1);
     bd4:	a0 e4       	ldi	r26, 0x40	; 64
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	e0 e4       	ldi	r30, 0x40	; 64
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	84 60       	ori	r24, 0x04	; 4
     be0:	8c 93       	st	X, r24
    CLEAR_BIT(UCSRB_REG,UCSRB_UCSZ2);
     be2:	aa e2       	ldi	r26, 0x2A	; 42
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	ea e2       	ldi	r30, 0x2A	; 42
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	8b 7f       	andi	r24, 0xFB	; 251
     bee:	8c 93       	st	X, r24
/*======================================*/
/*          Enable RX & TX              */
/*--------------------------------------*/     
    SET_BIT(UCSRB_REG,UCSRB_TXEN);               // Enable TX 
     bf0:	aa e2       	ldi	r26, 0x2A	; 42
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	ea e2       	ldi	r30, 0x2A	; 42
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	88 60       	ori	r24, 0x08	; 8
     bfc:	8c 93       	st	X, r24
    SET_BIT(UCSRB_REG,UCSRB_RXEN);               // Enable RX 
     bfe:	aa e2       	ldi	r26, 0x2A	; 42
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	ea e2       	ldi	r30, 0x2A	; 42
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	80 61       	ori	r24, 0x10	; 16
     c0a:	8c 93       	st	X, r24
/*======================================*/
}
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	cf 91       	pop	r28
     c12:	df 91       	pop	r29
     c14:	08 95       	ret

00000c16 <USART_voidSendData>:
/* Description : Function can Transmit Char                                                     */                                         
/* Fun. Argument1: Copy_u8Data { Transsmited Data }                                             */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void USART_voidSendData (u8 Copy_u8Data)
{
     c16:	df 93       	push	r29
     c18:	cf 93       	push	r28
     c1a:	0f 92       	push	r0
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	89 83       	std	Y+1, r24	; 0x01
    // Polling flag Data Register is Empty.
    while ( (GET_BIT(UCSRA_REG,UCSRA_UDRE)) == 0 );
     c22:	eb e2       	ldi	r30, 0x2B	; 43
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	88 2f       	mov	r24, r24
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	80 72       	andi	r24, 0x20	; 32
     c2e:	90 70       	andi	r25, 0x00	; 0
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	b9 f3       	breq	.-18     	; 0xc22 <USART_voidSendData+0xc>
    // Transsmit Data.
    UDR_REG = Copy_u8Data ;
     c34:	ec e2       	ldi	r30, 0x2C	; 44
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	80 83       	st	Z, r24
    /* Data Transsmition is Complete So The Flag of [UCSRA_TXC] is Raised */
    /* Then we Need Clear This Flag by SET ONE , To Next Transsmition     */
    SET_BIT(UCSRA_REG,UCSRA_TXC);
     c3c:	ab e2       	ldi	r26, 0x2B	; 43
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	eb e2       	ldi	r30, 0x2B	; 43
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	80 64       	ori	r24, 0x40	; 64
     c48:	8c 93       	st	X, r24
}
     c4a:	0f 90       	pop	r0
     c4c:	cf 91       	pop	r28
     c4e:	df 91       	pop	r29
     c50:	08 95       	ret

00000c52 <USART_voidRecieveData>:
/* Description : Function can Recieve Data                                                      */ 
/* Fun. Argument1: *Copy_Pu8Data Pointer to { Recived Data }                                    */                                        
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void USART_voidRecieveData (u8 *Copy_Pu8Data)
{
     c52:	df 93       	push	r29
     c54:	cf 93       	push	r28
     c56:	00 d0       	rcall	.+0      	; 0xc58 <USART_voidRecieveData+0x6>
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	9a 83       	std	Y+2, r25	; 0x02
     c5e:	89 83       	std	Y+1, r24	; 0x01
    // Polling flag Data Recieve is Complete.
    while ( (GET_BIT(UCSRA_REG,UCSRA_RXC)) == 0 );
     c60:	eb e2       	ldi	r30, 0x2B	; 43
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	88 23       	and	r24, r24
     c68:	dc f7       	brge	.-10     	; 0xc60 <USART_voidRecieveData+0xe>
    // Recieve Data in Passing Pointer.
    *Copy_Pu8Data = UDR_REG ;
     c6a:	ec e2       	ldi	r30, 0x2C	; 44
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	e9 81       	ldd	r30, Y+1	; 0x01
     c72:	fa 81       	ldd	r31, Y+2	; 0x02
     c74:	80 83       	st	Z, r24
}
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	cf 91       	pop	r28
     c7c:	df 91       	pop	r29
     c7e:	08 95       	ret

00000c80 <USART_voidAsyncSendData>:
/* Fun. Argument1: Copy_u8Data { Transsmited Data }                                               */
/* Fun. Argument2: *Copy_Pu8CallBackFunIndication_TXC {address of Call Back Application Function} */
/* Fun. Return : void                                                                             */
/**************************************************************************************************/
void USART_voidAsyncSendData ( u8 Copy_u8Data , void *Copy_Pu8CallBackFunIndication_TXC (void) )
{
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	00 d0       	rcall	.+0      	; 0xc86 <USART_voidAsyncSendData+0x6>
     c86:	0f 92       	push	r0
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	89 83       	std	Y+1, r24	; 0x01
     c8e:	7b 83       	std	Y+3, r23	; 0x03
     c90:	6a 83       	std	Y+2, r22	; 0x02
    SET_BIT(UCSRB_REG,UCSRB_UDRIE);                             // Enable UDRIE Data Register Empty Interrupt Enable.
     c92:	aa e2       	ldi	r26, 0x2A	; 42
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	ea e2       	ldi	r30, 0x2A	; 42
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	80 62       	ori	r24, 0x20	; 32
     c9e:	8c 93       	st	X, r24
    SET_BIT(UCSRB_REG,UCSRB_TXCIE);                             // Enable TXCIE Transmitt Complete Interrupt Enable.( For Indication )
     ca0:	aa e2       	ldi	r26, 0x2A	; 42
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	ea e2       	ldi	r30, 0x2A	; 42
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	80 64       	ori	r24, 0x40	; 64
     cac:	8c 93       	st	X, r24
    Global_u8TXData = Copy_u8Data ;                             // Assign Data to Global Variable to use it in ISR Fun.
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	80 93 ae 02 	sts	0x02AE, r24
    Global_PF_Vector_15 = Copy_Pu8CallBackFunIndication_TXC ;    // Assign The pointer that contain adderss of App CallBack Fun to Global pointer to Call it in ISR Fun.
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02
     cb6:	9b 81       	ldd	r25, Y+3	; 0x03
     cb8:	90 93 ad 02 	sts	0x02AD, r25
     cbc:	80 93 ac 02 	sts	0x02AC, r24
}
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	cf 91       	pop	r28
     cc8:	df 91       	pop	r29
     cca:	08 95       	ret

00000ccc <USART_voidAsyncRecieveData>:
/* Description : Function can Transmit Data by Asyncrouns Function (ISR)                          */                                         
/* Fun. Argument1: *Copy_Pu8Data Pointer to { Recived Data }                                      */ 
/* Fun. Return : void                                                                             */
/**************************************************************************************************/
void USART_voidAsyncRecieveData (u8 *Copy_Pu8Data)
{
     ccc:	df 93       	push	r29
     cce:	cf 93       	push	r28
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <USART_voidAsyncRecieveData+0x6>
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	9a 83       	std	Y+2, r25	; 0x02
     cd8:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(UCSRB_REG,UCSRB_RXCIE);            // Enable RXCIE Recieve Complete Interrupt Enable.
     cda:	aa e2       	ldi	r26, 0x2A	; 42
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	ea e2       	ldi	r30, 0x2A	; 42
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	80 68       	ori	r24, 0x80	; 128
     ce6:	8c 93       	st	X, r24
    Global_u8RXData = Copy_Pu8Data ;           // assign Passing Pointer to Global Pointer to Read Revived Data on This Passing Pointer in ISR (RXCIE)
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	9a 81       	ldd	r25, Y+2	; 0x02
     cec:	90 93 b0 02 	sts	0x02B0, r25
     cf0:	80 93 af 02 	sts	0x02AF, r24
}
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	08 95       	ret

00000cfe <__vector_13>:
/*          This function for Recieve Data when INT Recieve Complete         */ 
/* Fun. Return : void                                                        */
/*****************************************************************************/
void __vector_13 (void)    __attribute__((signal));
void __vector_13 (void)
{
     cfe:	1f 92       	push	r1
     d00:	0f 92       	push	r0
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	0f 92       	push	r0
     d06:	11 24       	eor	r1, r1
     d08:	8f 93       	push	r24
     d0a:	af 93       	push	r26
     d0c:	bf 93       	push	r27
     d0e:	ef 93       	push	r30
     d10:	ff 93       	push	r31
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
    *Global_u8RXData = UDR_REG ;        // Recieve Data in Passing Pointer.
     d1a:	e0 91 af 02 	lds	r30, 0x02AF
     d1e:	f0 91 b0 02 	lds	r31, 0x02B0
     d22:	ac e2       	ldi	r26, 0x2C	; 44
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	8c 91       	ld	r24, X
     d28:	80 83       	st	Z, r24
}
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	ff 91       	pop	r31
     d30:	ef 91       	pop	r30
     d32:	bf 91       	pop	r27
     d34:	af 91       	pop	r26
     d36:	8f 91       	pop	r24
     d38:	0f 90       	pop	r0
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	0f 90       	pop	r0
     d3e:	1f 90       	pop	r1
     d40:	18 95       	reti

00000d42 <__vector_14>:
/*          This function for Transmitt Data when INT Data Register is Empty */
/* Fun. Return : void                                                        */
/*****************************************************************************/
void __vector_14 (void)    __attribute__((signal));
void __vector_14 (void)
{ 
     d42:	1f 92       	push	r1
     d44:	0f 92       	push	r0
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	0f 92       	push	r0
     d4a:	11 24       	eor	r1, r1
     d4c:	8f 93       	push	r24
     d4e:	ef 93       	push	r30
     d50:	ff 93       	push	r31
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
    UDR_REG = Global_u8TXData ;         // Transsmit Data.
     d5a:	ec e2       	ldi	r30, 0x2C	; 44
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 91 ae 02 	lds	r24, 0x02AE
     d62:	80 83       	st	Z, r24
}
     d64:	cf 91       	pop	r28
     d66:	df 91       	pop	r29
     d68:	ff 91       	pop	r31
     d6a:	ef 91       	pop	r30
     d6c:	8f 91       	pop	r24
     d6e:	0f 90       	pop	r0
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	0f 90       	pop	r0
     d74:	1f 90       	pop	r1
     d76:	18 95       	reti

00000d78 <__vector_15>:
/*              This function for Indication to Tramsmittion Complete        */ 
/* Fun. Return : void                                                        */
/*****************************************************************************/
void __vector_15 (void)    __attribute__((signal));
void __vector_15 (void)
{
     d78:	1f 92       	push	r1
     d7a:	0f 92       	push	r0
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	0f 92       	push	r0
     d80:	11 24       	eor	r1, r1
     d82:	2f 93       	push	r18
     d84:	3f 93       	push	r19
     d86:	4f 93       	push	r20
     d88:	5f 93       	push	r21
     d8a:	6f 93       	push	r22
     d8c:	7f 93       	push	r23
     d8e:	8f 93       	push	r24
     d90:	9f 93       	push	r25
     d92:	af 93       	push	r26
     d94:	bf 93       	push	r27
     d96:	ef 93       	push	r30
     d98:	ff 93       	push	r31
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
   Global_PF_Vector_15 () ; // Call App Function That Indicator to Transmittion Complete.
     da2:	e0 91 ac 02 	lds	r30, 0x02AC
     da6:	f0 91 ad 02 	lds	r31, 0x02AD
     daa:	09 95       	icall
}
     dac:	cf 91       	pop	r28
     dae:	df 91       	pop	r29
     db0:	ff 91       	pop	r31
     db2:	ef 91       	pop	r30
     db4:	bf 91       	pop	r27
     db6:	af 91       	pop	r26
     db8:	9f 91       	pop	r25
     dba:	8f 91       	pop	r24
     dbc:	7f 91       	pop	r23
     dbe:	6f 91       	pop	r22
     dc0:	5f 91       	pop	r21
     dc2:	4f 91       	pop	r20
     dc4:	3f 91       	pop	r19
     dc6:	2f 91       	pop	r18
     dc8:	0f 90       	pop	r0
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	0f 90       	pop	r0
     dce:	1f 90       	pop	r1
     dd0:	18 95       	reti

00000dd2 <TIMER1_voidInit>:
/* Function Name : TIMER1_voidInit                                                              */
/* Description : Initilization of TIMER1 with Specific Specks accordig to Gonfigration File.h   */                                          
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void TIMER1_voidInit (void)
{
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
          SET_BIT(TCCR1A_REG,TCCR1A_WGM10);
        CLEAR_BIT(TCCR1A_REG,TCCR1A_WGM11);
		  SET_BIT(TCCR1B_REG,TCCR1B_WGM12);                 
          SET_BIT(TCCR1B_REG,TCCR1B_WGM13);
    #elif (MODE == FAST_PWM_ICR1)
        CLEAR_BIT(TCCR1A_REG,TCCR1A_WGM10);
     dda:	af e4       	ldi	r26, 0x4F	; 79
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	ef e4       	ldi	r30, 0x4F	; 79
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	8e 7f       	andi	r24, 0xFE	; 254
     de6:	8c 93       	st	X, r24
          SET_BIT(TCCR1A_REG,TCCR1A_WGM11);
     de8:	af e4       	ldi	r26, 0x4F	; 79
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	ef e4       	ldi	r30, 0x4F	; 79
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	82 60       	ori	r24, 0x02	; 2
     df4:	8c 93       	st	X, r24
		  SET_BIT(TCCR1B_REG,TCCR1B_WGM12);                 
     df6:	ae e4       	ldi	r26, 0x4E	; 78
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	ee e4       	ldi	r30, 0x4E	; 78
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	88 60       	ori	r24, 0x08	; 8
     e02:	8c 93       	st	X, r24
          SET_BIT(TCCR1B_REG,TCCR1B_WGM13);
     e04:	ae e4       	ldi	r26, 0x4E	; 78
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	ee e4       	ldi	r30, 0x4E	; 78
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	80 61       	ori	r24, 0x10	; 16
     e10:	8c 93       	st	X, r24
/*----------------------------------------------*/
    #if (OC1A_MODE == DISCONNECTED)
        CLEAR_BIT(TCCR1A_REG,TCCR1A_COM1A0);
        CLEAR_BIT(TCCR1A_REG,TCCR1A_COM1A1);
    #elif ((OC1A_MODE == SETonTOP_CLEARonCOMPARE) || (OC1A_MODE == SETonCOMPdownCounting_CLEARonCOMPupCounting))
        CLEAR_BIT(TCCR1A_REG,TCCR1A_COM1A0);
     e12:	af e4       	ldi	r26, 0x4F	; 79
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	ef e4       	ldi	r30, 0x4F	; 79
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	8f 7b       	andi	r24, 0xBF	; 191
     e1e:	8c 93       	st	X, r24
          SET_BIT(TCCR1A_REG,TCCR1A_COM1A1);
     e20:	af e4       	ldi	r26, 0x4F	; 79
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	ef e4       	ldi	r30, 0x4F	; 79
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	80 68       	ori	r24, 0x80	; 128
     e2c:	8c 93       	st	X, r24
    #endif
/*==============================================*/
/*          OC1B Mode Selection                 */
/*----------------------------------------------*/
    #if (OC1B_MODE == DISCONNECTED)
        CLEAR_BIT(TCCR1A_REG,TCCR1A_COM1B0);
     e2e:	af e4       	ldi	r26, 0x4F	; 79
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	ef e4       	ldi	r30, 0x4F	; 79
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	8f 7e       	andi	r24, 0xEF	; 239
     e3a:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR1A_REG,TCCR1A_COM1B1);
     e3c:	af e4       	ldi	r26, 0x4F	; 79
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	ef e4       	ldi	r30, 0x4F	; 79
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	8f 7d       	andi	r24, 0xDF	; 223
     e48:	8c 93       	st	X, r24

    #endif
/*======================================*/
/*     TIMER1 Prescaller Selection      */
/*--------------------------------------*/
    TCCR1B_REG = ( TCCR1B_REG & 0b11111000 );              // Clear Prescaller 
     e4a:	ae e4       	ldi	r26, 0x4E	; 78
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	ee e4       	ldi	r30, 0x4E	; 78
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	88 7f       	andi	r24, 0xF8	; 248
     e56:	8c 93       	st	X, r24
    #elif ( PRESCALER == NOT_USE_PRESCALER )
          SET_BIT(TCCR1B_REG,TCCR1B_CS10);
        CLEAR_BIT(TCCR1B_REG,TCCR1B_CS11);
        CLEAR_BIT(TCCR1B_REG,TCCR1B_CS12);
    #elif ( PRESCALER == PRESCALER_DIVISION_BY_8 )
        CLEAR_BIT(TCCR1B_REG,TCCR1B_CS10);
     e58:	ae e4       	ldi	r26, 0x4E	; 78
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	ee e4       	ldi	r30, 0x4E	; 78
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8e 7f       	andi	r24, 0xFE	; 254
     e64:	8c 93       	st	X, r24
          SET_BIT(TCCR1B_REG,TCCR1B_CS11);
     e66:	ae e4       	ldi	r26, 0x4E	; 78
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	ee e4       	ldi	r30, 0x4E	; 78
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	82 60       	ori	r24, 0x02	; 2
     e72:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR1B_REG,TCCR1B_CS12);
     e74:	ae e4       	ldi	r26, 0x4E	; 78
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	ee e4       	ldi	r30, 0x4E	; 78
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	8b 7f       	andi	r24, 0xFB	; 251
     e80:	8c 93       	st	X, r24
        SET_BIT(TCCR1B_REG,TCCR1B_CS12);
    #else
        #error  Wrong selection of Prescaller mode
    #endif
/*======================================*/
}
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <TIMER1_ICU_voidInit>:

void TIMER1_ICU_voidInit (void)
{
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
/*=====================================================================*/
/*  TIMER1 Normal Mode Selection to use ICU to Calculate PWM Frequency */
/*---------------------------------------------------------------------*/
        /*       TIMER1 Normal Mode      */                             
        CLEAR_BIT(TCCR1A_REG,TCCR1A_WGM10);
     e90:	af e4       	ldi	r26, 0x4F	; 79
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	ef e4       	ldi	r30, 0x4F	; 79
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	8e 7f       	andi	r24, 0xFE	; 254
     e9c:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR1A_REG,TCCR1A_WGM11);
     e9e:	af e4       	ldi	r26, 0x4F	; 79
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	ef e4       	ldi	r30, 0x4F	; 79
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	8d 7f       	andi	r24, 0xFD	; 253
     eaa:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B_REG,TCCR1B_WGM12);                 
     eac:	ae e4       	ldi	r26, 0x4E	; 78
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	ee e4       	ldi	r30, 0x4E	; 78
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	87 7f       	andi	r24, 0xF7	; 247
     eb8:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR1B_REG,TCCR1B_WGM13);
     eba:	ae e4       	ldi	r26, 0x4E	; 78
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	ee e4       	ldi	r30, 0x4E	; 78
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	8f 7e       	andi	r24, 0xEF	; 239
     ec6:	8c 93       	st	X, r24
        //SET_BIT(TIMSK_REG,TIMER_TIMSK_TOIE1);         // Enable T1 OVF Interrupt [PIE].
/*=====================================================================*/
/*                     TIMER1 Prescaller Selection                     */
/*---------------------------------------------------------------------*/
    TCCR1B_REG = ( TCCR1B_REG & 0b11111000 );              // Clear Prescaller 
     ec8:	ae e4       	ldi	r26, 0x4E	; 78
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	ee e4       	ldi	r30, 0x4E	; 78
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	88 7f       	andi	r24, 0xF8	; 248
     ed4:	8c 93       	st	X, r24
    #elif ( PRESCALER == NOT_USE_PRESCALER )
          SET_BIT(TCCR1B_REG,TCCR1B_CS10);
        CLEAR_BIT(TCCR1B_REG,TCCR1B_CS11);
        CLEAR_BIT(TCCR1B_REG,TCCR1B_CS12);
    #elif ( PRESCALER == PRESCALER_DIVISION_BY_8 )
        CLEAR_BIT(TCCR1B_REG,TCCR1B_CS10);
     ed6:	ae e4       	ldi	r26, 0x4E	; 78
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	ee e4       	ldi	r30, 0x4E	; 78
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	8e 7f       	andi	r24, 0xFE	; 254
     ee2:	8c 93       	st	X, r24
          SET_BIT(TCCR1B_REG,TCCR1B_CS11);
     ee4:	ae e4       	ldi	r26, 0x4E	; 78
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	ee e4       	ldi	r30, 0x4E	; 78
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	82 60       	ori	r24, 0x02	; 2
     ef0:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR1B_REG,TCCR1B_CS12);
     ef2:	ae e4       	ldi	r26, 0x4E	; 78
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	ee e4       	ldi	r30, 0x4E	; 78
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	8b 7f       	andi	r24, 0xFB	; 251
     efe:	8c 93       	st	X, r24
        #error  Wrong selection of Prescaller mode
    #endif
/*=====================================================================*/
/*  (ICES1) Input Capture Edge Select { Falling Edge , Raising Edge }  */
/*---------------------------------------------------------------------*/
    TIMER1_ICU_voidEdgeSelect ( RAISING_EDGE );        // Sense Raising Edge to start calculate time of Period Time from First Raising Ege to Second Raising Edge.
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	0e 94 23 08 	call	0x1046	; 0x1046 <TIMER1_ICU_voidEdgeSelect>
/*=====================================================*/
/*     (TICIE) Enable Input Capture Unit Interrupt     */
/*-----------------------------------------------------*/
    SET_BIT(TIMSK_REG,TIMER_TIMSK_TICIE);              // Enable PIE of ICU    
     f06:	a9 e5       	ldi	r26, 0x59	; 89
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e9 e5       	ldi	r30, 0x59	; 89
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	80 62       	ori	r24, 0x20	; 32
     f12:	8c 93       	st	X, r24
}
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <TIMER1_voidSetCallBack_OVF>:
/* Description : Call Back Function To Assign the address of OVF APP. Fun. at Global Pointer    */                                          
/* Fun. Argument1: (*Local_PointerToFunction_OVF) { Address of OVF Application Function }       */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void TIMER1_voidSetCallBack_OVF (void (*Local_PointerToFunction_OVF) (void))
{
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <TIMER1_voidSetCallBack_OVF+0x6>
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	9a 83       	std	Y+2, r25	; 0x02
     f26:	89 83       	std	Y+1, r24	; 0x01
    Global_PointerToFunction_OVF_T1 = Local_PointerToFunction_OVF ;
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	9a 81       	ldd	r25, Y+2	; 0x02
     f2c:	90 93 b2 02 	sts	0x02B2, r25
     f30:	80 93 b1 02 	sts	0x02B1, r24
}
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	08 95       	ret

00000f3e <TIMER1_voidSetCallBack_CTC>:
/* Description : Call Back Function To Assign the address of CTC APP. Fun. at Global Pointer    */                                          
/* Fun. Argument1: (*Local_PointerToFunction_CTC) { Address of CTC Application Function }       */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void TIMER1_voidSetCallBack_CTC (void (*Local_PointerToFunction_CTC) (void))
{
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	00 d0       	rcall	.+0      	; 0xf44 <TIMER1_voidSetCallBack_CTC+0x6>
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	9a 83       	std	Y+2, r25	; 0x02
     f4a:	89 83       	std	Y+1, r24	; 0x01
    Global_PointerToFunction_CTC_T1 = Local_PointerToFunction_CTC ;
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	9a 81       	ldd	r25, Y+2	; 0x02
     f50:	90 93 b4 02 	sts	0x02B4, r25
     f54:	80 93 b3 02 	sts	0x02B3, r24
}
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <TIMER1_voidSetPreloadValue>:
/* Description : Set Preload Value in a Timer Register to Start Count From this Preload Value   */                                          
/* Fun. Argument1: Copy_u8PreloadValue  { from  0  To  255 }                                    */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void TIMER1_voidSetPreloadValue ( u16 Local_u16PreloadValue )
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	00 d0       	rcall	.+0      	; 0xf68 <TIMER1_voidSetPreloadValue+0x6>
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	9a 83       	std	Y+2, r25	; 0x02
     f6e:	89 83       	std	Y+1, r24	; 0x01
        TCNT1_REG = Local_u16PreloadValue ;
        Global_u16PreloadValue = Local_u16PreloadValue ;
    #else
        // No Action
    #endif
}
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <TIMER1_voidSetCompareMatchValue_T1A>:
/* Description : Set Compare Match Value in OCR1A Register To make Timer Over Flow at This Value */                                          
/* Fun. Argument1: Copy_u8CompareMatchValue  { from  0  To  65,535 }  [16 BIT]                   */
/* Fun. Return : void                                                                            */
/*************************************************************************************************/
void TIMER1_voidSetCompareMatchValue_T1A ( u16 Local_u16CompareMatchValue )
{
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <TIMER1_voidSetCompareMatchValue_T1A+0x6>
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	9a 83       	std	Y+2, r25	; 0x02
     f86:	89 83       	std	Y+1, r24	; 0x01
    #if (MODE != NORMAL_OVF)
        OCR1A_REG = Local_u16CompareMatchValue ;
     f88:	ea e4       	ldi	r30, 0x4A	; 74
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	91 83       	std	Z+1, r25	; 0x01
     f92:	80 83       	st	Z, r24
        Global_u16CompareMatchValue_1A = Local_u16CompareMatchValue ;
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	9a 81       	ldd	r25, Y+2	; 0x02
     f98:	90 93 b8 02 	sts	0x02B8, r25
     f9c:	80 93 b7 02 	sts	0x02B7, r24
    #endif
}
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <TIMER1_voidSetCompareMatchValue_T1B>:
/* Description : Set Compare Match Value in OCR1B Register To make Timer Over Flow at This Value */                                          
/* Fun. Argument1: Copy_u8CompareMatchValue  { from  0  To  65,535 }  [16 BIT]                   */
/* Fun. Return : void                                                                            */
/*************************************************************************************************/
void TIMER1_voidSetCompareMatchValue_T1B ( u16 Local_u16CompareMatchValue )
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <TIMER1_voidSetCompareMatchValue_T1B+0x6>
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	9a 83       	std	Y+2, r25	; 0x02
     fb6:	89 83       	std	Y+1, r24	; 0x01
    #if (MODE != NORMAL_OVF)
        OCR1B_REG = Local_u16CompareMatchValue ;
     fb8:	e8 e4       	ldi	r30, 0x48	; 72
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
     fc0:	91 83       	std	Z+1, r25	; 0x01
     fc2:	80 83       	st	Z, r24
        Global_u16CompareMatchValue_1B = Local_u16CompareMatchValue ;
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	9a 81       	ldd	r25, Y+2	; 0x02
     fc8:	90 93 ba 02 	sts	0x02BA, r25
     fcc:	80 93 b9 02 	sts	0x02B9, r24
    #endif
}
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <TIMER1_voidBahaa_u16PWM_T1A>:
/* Fun. Argument1: Local_u8CompareMatchValue  { from  0  To  65,535 }  [16 BIT]                 */
/* Fun. Argument2: Copy_u16TopValue           { from  0  To  65,535 }  [16 BIT]                 */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void TIMER1_voidBahaa_u16PWM_T1A ( u16 Copy_u16CompareMatchValue , u16 Copy_u16TopValue )
{
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <TIMER1_voidBahaa_u16PWM_T1A+0x6>
     fe0:	00 d0       	rcall	.+0      	; 0xfe2 <TIMER1_voidBahaa_u16PWM_T1A+0x8>
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	9a 83       	std	Y+2, r25	; 0x02
     fe8:	89 83       	std	Y+1, r24	; 0x01
     fea:	7c 83       	std	Y+4, r23	; 0x04
     fec:	6b 83       	std	Y+3, r22	; 0x03
    TIMER1_voidSetCompareMatchValue_T1A ( Copy_u16CompareMatchValue );
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	9a 81       	ldd	r25, Y+2	; 0x02
     ff2:	0e 94 bd 07 	call	0xf7a	; 0xf7a <TIMER1_voidSetCompareMatchValue_T1A>
    ICR1_REG = Copy_u16TopValue ;
     ff6:	e6 e4       	ldi	r30, 0x46	; 70
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	9c 81       	ldd	r25, Y+4	; 0x04
     ffe:	91 83       	std	Z+1, r25	; 0x01
    1000:	80 83       	st	Z, r24
}
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <TIMER1_voidBahaa_u16PWM_T1B>:
/* Fun. Argument1: Local_u8CompareMatchValue  { from  0  To  65,535 }  [16 BIT]                 */
/* Fun. Argument2: Copy_u16TopValue           { from  0  To  65,535 }  [16 BIT]                 */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void TIMER1_voidBahaa_u16PWM_T1B ( u16 Copy_u16CompareMatchValue , u16 Copy_u16TopValue )
{
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	00 d0       	rcall	.+0      	; 0x1016 <TIMER1_voidBahaa_u16PWM_T1B+0x6>
    1016:	00 d0       	rcall	.+0      	; 0x1018 <TIMER1_voidBahaa_u16PWM_T1B+0x8>
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	9a 83       	std	Y+2, r25	; 0x02
    101e:	89 83       	std	Y+1, r24	; 0x01
    1020:	7c 83       	std	Y+4, r23	; 0x04
    1022:	6b 83       	std	Y+3, r22	; 0x03
    TIMER1_voidSetCompareMatchValue_T1B ( Copy_u16CompareMatchValue );
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	9a 81       	ldd	r25, Y+2	; 0x02
    1028:	0e 94 d5 07 	call	0xfaa	; 0xfaa <TIMER1_voidSetCompareMatchValue_T1B>
    ICR1_REG = Copy_u16TopValue ;
    102c:	e6 e4       	ldi	r30, 0x46	; 70
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	9c 81       	ldd	r25, Y+4	; 0x04
    1034:	91 83       	std	Z+1, r25	; 0x01
    1036:	80 83       	st	Z, r24
}
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <TIMER1_ICU_voidEdgeSelect>:


void TIMER1_ICU_voidEdgeSelect ( u8 Copy_u8EdgeSelect )
{
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	00 d0       	rcall	.+0      	; 0x104c <TIMER1_ICU_voidEdgeSelect+0x6>
    104c:	0f 92       	push	r0
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	89 83       	std	Y+1, r24	; 0x01
    switch ( Copy_u8EdgeSelect )
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	3b 83       	std	Y+3, r19	; 0x03
    105c:	2a 83       	std	Y+2, r18	; 0x02
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	9b 81       	ldd	r25, Y+3	; 0x03
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	31 f0       	breq	.+12     	; 0x1072 <TIMER1_ICU_voidEdgeSelect+0x2c>
    1066:	2a 81       	ldd	r18, Y+2	; 0x02
    1068:	3b 81       	ldd	r19, Y+3	; 0x03
    106a:	21 30       	cpi	r18, 0x01	; 1
    106c:	31 05       	cpc	r19, r1
    106e:	49 f0       	breq	.+18     	; 0x1082 <TIMER1_ICU_voidEdgeSelect+0x3c>
    1070:	0f c0       	rjmp	.+30     	; 0x1090 <TIMER1_ICU_voidEdgeSelect+0x4a>
    {
        case FALLING_EDGE :  CLEAR_BIT(TCCR1B_REG,TCCR1B_ICES1);       break;
    1072:	ae e4       	ldi	r26, 0x4E	; 78
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	ee e4       	ldi	r30, 0x4E	; 78
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	8f 7b       	andi	r24, 0xBF	; 191
    107e:	8c 93       	st	X, r24
    1080:	07 c0       	rjmp	.+14     	; 0x1090 <TIMER1_ICU_voidEdgeSelect+0x4a>
        case RAISING_EDGE :    SET_BIT(TCCR1B_REG,TCCR1B_ICES1);       break;
    1082:	ae e4       	ldi	r26, 0x4E	; 78
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	ee e4       	ldi	r30, 0x4E	; 78
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	80 64       	ori	r24, 0x40	; 64
    108e:	8c 93       	st	X, r24
        default           :         break;
    }
}
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <TIMER1_ICU_ReadPWM>:


void TIMER1_ICU_ReadPWM ( u8 *Local_Pu8DutyCycle , u16 *Local_Pu8PeriodTime )
{
    109c:	ef 92       	push	r14
    109e:	ff 92       	push	r15
    10a0:	0f 93       	push	r16
    10a2:	1f 93       	push	r17
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <TIMER1_ICU_ReadPWM+0xe>
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <TIMER1_ICU_ReadPWM+0x10>
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	9a 83       	std	Y+2, r25	; 0x02
    10b2:	89 83       	std	Y+1, r24	; 0x01
    10b4:	7c 83       	std	Y+4, r23	; 0x04
    10b6:	6b 83       	std	Y+3, r22	; 0x03

    while ( ( GET_BIT(TIFR_REG,TIMER_TIFR_ICF1)) == 0 );
    10b8:	e8 e5       	ldi	r30, 0x58	; 88
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	88 2f       	mov	r24, r24
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	80 72       	andi	r24, 0x20	; 32
    10c4:	90 70       	andi	r25, 0x00	; 0
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	b9 f3       	breq	.-18     	; 0x10b8 <TIMER1_ICU_ReadPWM+0x1c>
        SET_BIT(TIFR_REG,TIMER_TIFR_ICF1);   // clear flag
    10ca:	a8 e5       	ldi	r26, 0x58	; 88
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e8 e5       	ldi	r30, 0x58	; 88
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	80 62       	ori	r24, 0x20	; 32
    10d6:	8c 93       	st	X, r24
        Global_ICU_Read1 = ICR1_REG ;       // First Raising Edege
    10d8:	e6 e4       	ldi	r30, 0x46	; 70
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	91 81       	ldd	r25, Z+1	; 0x01
    10e0:	90 93 bc 02 	sts	0x02BC, r25
    10e4:	80 93 bb 02 	sts	0x02BB, r24
        
    while ( ( GET_BIT(TIFR_REG,TIMER_TIFR_ICF1)) == 0 );
    10e8:	e8 e5       	ldi	r30, 0x58	; 88
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	88 2f       	mov	r24, r24
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	80 72       	andi	r24, 0x20	; 32
    10f4:	90 70       	andi	r25, 0x00	; 0
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	b9 f3       	breq	.-18     	; 0x10e8 <TIMER1_ICU_ReadPWM+0x4c>
        SET_BIT(TIFR_REG,TIMER_TIFR_ICF1);   // clear flag
    10fa:	a8 e5       	ldi	r26, 0x58	; 88
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e8 e5       	ldi	r30, 0x58	; 88
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	80 62       	ori	r24, 0x20	; 32
    1106:	8c 93       	st	X, r24
        Global_ICU_Read2 = ICR1_REG ;                     // Second Raising Edege 
    1108:	e6 e4       	ldi	r30, 0x46	; 70
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	91 81       	ldd	r25, Z+1	; 0x01
    1110:	90 93 be 02 	sts	0x02BE, r25
    1114:	80 93 bd 02 	sts	0x02BD, r24
        Global_ICU_PeriodTime = Global_ICU_Read2 - Global_ICU_Read1 ;
    1118:	20 91 bd 02 	lds	r18, 0x02BD
    111c:	30 91 be 02 	lds	r19, 0x02BE
    1120:	80 91 bb 02 	lds	r24, 0x02BB
    1124:	90 91 bc 02 	lds	r25, 0x02BC
    1128:	a9 01       	movw	r20, r18
    112a:	48 1b       	sub	r20, r24
    112c:	59 0b       	sbc	r21, r25
    112e:	ca 01       	movw	r24, r20
    1130:	90 93 c2 02 	sts	0x02C2, r25
    1134:	80 93 c1 02 	sts	0x02C1, r24
        TIMER1_ICU_voidEdgeSelect ( FALLING_EDGE );       // Sense Falling Edge to calculate time of ON Time from Second Raising Ege to First Falling Edge.
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	0e 94 23 08 	call	0x1046	; 0x1046 <TIMER1_ICU_voidEdgeSelect>
       
    while ( ( GET_BIT(TIFR_REG,TIMER_TIFR_ICF1)) == 0 );
    113e:	e8 e5       	ldi	r30, 0x58	; 88
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	88 2f       	mov	r24, r24
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	80 72       	andi	r24, 0x20	; 32
    114a:	90 70       	andi	r25, 0x00	; 0
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	b9 f3       	breq	.-18     	; 0x113e <TIMER1_ICU_ReadPWM+0xa2>
        SET_BIT(TIFR_REG,TIMER_TIFR_ICF1);   // clear flag
    1150:	a8 e5       	ldi	r26, 0x58	; 88
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e8 e5       	ldi	r30, 0x58	; 88
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	80 62       	ori	r24, 0x20	; 32
    115c:	8c 93       	st	X, r24
        Global_ICU_Read3 = ICR1_REG ;
    115e:	e6 e4       	ldi	r30, 0x46	; 70
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	91 81       	ldd	r25, Z+1	; 0x01
    1166:	90 93 c0 02 	sts	0x02C0, r25
    116a:	80 93 bf 02 	sts	0x02BF, r24
        Global_ICU_ONTime = Global_ICU_Read3 - Global_ICU_Read2 ;
    116e:	20 91 bf 02 	lds	r18, 0x02BF
    1172:	30 91 c0 02 	lds	r19, 0x02C0
    1176:	80 91 bd 02 	lds	r24, 0x02BD
    117a:	90 91 be 02 	lds	r25, 0x02BE
    117e:	a9 01       	movw	r20, r18
    1180:	48 1b       	sub	r20, r24
    1182:	59 0b       	sbc	r21, r25
    1184:	ca 01       	movw	r24, r20
    1186:	90 93 c4 02 	sts	0x02C4, r25
    118a:	80 93 c3 02 	sts	0x02C3, r24
        TIMER1_ICU_voidEdgeSelect ( RAISING_EDGE );        // Sense Raising Edge to start calculate time of Period Time from First Raising Ege to Second Raising Edge.
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	0e 94 23 08 	call	0x1046	; 0x1046 <TIMER1_ICU_voidEdgeSelect>
    
    *Local_Pu8PeriodTime = Global_ICU_PeriodTime ;
    1194:	80 91 c1 02 	lds	r24, 0x02C1
    1198:	90 91 c2 02 	lds	r25, 0x02C2
    119c:	eb 81       	ldd	r30, Y+3	; 0x03
    119e:	fc 81       	ldd	r31, Y+4	; 0x04
    11a0:	91 83       	std	Z+1, r25	; 0x01
    11a2:	80 83       	st	Z, r24
    *Local_Pu8DutyCycle = ( ( Global_ICU_ONTime * 100UL ) / Global_ICU_PeriodTime )  ;
    11a4:	80 91 c3 02 	lds	r24, 0x02C3
    11a8:	90 91 c4 02 	lds	r25, 0x02C4
    11ac:	cc 01       	movw	r24, r24
    11ae:	a0 e0       	ldi	r26, 0x00	; 0
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	24 e6       	ldi	r18, 0x64	; 100
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	40 e0       	ldi	r20, 0x00	; 0
    11b8:	50 e0       	ldi	r21, 0x00	; 0
    11ba:	bc 01       	movw	r22, r24
    11bc:	cd 01       	movw	r24, r26
    11be:	0e 94 de 2b 	call	0x57bc	; 0x57bc <__mulsi3>
    11c2:	7b 01       	movw	r14, r22
    11c4:	8c 01       	movw	r16, r24
    11c6:	80 91 c1 02 	lds	r24, 0x02C1
    11ca:	90 91 c2 02 	lds	r25, 0x02C2
    11ce:	9c 01       	movw	r18, r24
    11d0:	40 e0       	ldi	r20, 0x00	; 0
    11d2:	50 e0       	ldi	r21, 0x00	; 0
    11d4:	c8 01       	movw	r24, r16
    11d6:	b7 01       	movw	r22, r14
    11d8:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__udivmodsi4>
    11dc:	da 01       	movw	r26, r20
    11de:	c9 01       	movw	r24, r18
    11e0:	e9 81       	ldd	r30, Y+1	; 0x01
    11e2:	fa 81       	ldd	r31, Y+2	; 0x02
    11e4:	80 83       	st	Z, r24
}
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	1f 91       	pop	r17
    11f4:	0f 91       	pop	r16
    11f6:	ff 90       	pop	r15
    11f8:	ef 90       	pop	r14
    11fa:	08 95       	ret

000011fc <__vector_6>:

/*  ISR (ICU)  */
void __vector_6 (void)    __attribute__((signal));
void __vector_6 (void)
{
    11fc:	1f 92       	push	r1
    11fe:	0f 92       	push	r0
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	0f 92       	push	r0
    1204:	11 24       	eor	r1, r1
    1206:	2f 93       	push	r18
    1208:	3f 93       	push	r19
    120a:	4f 93       	push	r20
    120c:	5f 93       	push	r21
    120e:	6f 93       	push	r22
    1210:	7f 93       	push	r23
    1212:	8f 93       	push	r24
    1214:	9f 93       	push	r25
    1216:	af 93       	push	r26
    1218:	bf 93       	push	r27
    121a:	ef 93       	push	r30
    121c:	ff 93       	push	r31
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    static u8 Counter = 0 ;
    Counter++ ;
    1226:	80 91 c5 02 	lds	r24, 0x02C5
    122a:	8f 5f       	subi	r24, 0xFF	; 255
    122c:	80 93 c5 02 	sts	0x02C5, r24
    if ( Counter == 1 )
    1230:	80 91 c5 02 	lds	r24, 0x02C5
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	49 f4       	brne	.+18     	; 0x124a <__vector_6+0x4e>
    {
        Global_ICU_Read1 = ICR1_REG ;       // First Raising Edege 
    1238:	e6 e4       	ldi	r30, 0x46	; 70
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	91 81       	ldd	r25, Z+1	; 0x01
    1240:	90 93 bc 02 	sts	0x02BC, r25
    1244:	80 93 bb 02 	sts	0x02BB, r24
    1248:	41 c0       	rjmp	.+130    	; 0x12cc <__vector_6+0xd0>
    }
    else if ( Counter == 2 )
    124a:	80 91 c5 02 	lds	r24, 0x02C5
    124e:	82 30       	cpi	r24, 0x02	; 2
    1250:	e1 f4       	brne	.+56     	; 0x128a <__vector_6+0x8e>
    {
        Global_ICU_Read2 = ICR1_REG ;                     // Second Raising Edege 
    1252:	e6 e4       	ldi	r30, 0x46	; 70
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	91 81       	ldd	r25, Z+1	; 0x01
    125a:	90 93 be 02 	sts	0x02BE, r25
    125e:	80 93 bd 02 	sts	0x02BD, r24
        Global_ICU_PeriodTime = Global_ICU_Read2 - Global_ICU_Read1 ;
    1262:	20 91 bd 02 	lds	r18, 0x02BD
    1266:	30 91 be 02 	lds	r19, 0x02BE
    126a:	80 91 bb 02 	lds	r24, 0x02BB
    126e:	90 91 bc 02 	lds	r25, 0x02BC
    1272:	a9 01       	movw	r20, r18
    1274:	48 1b       	sub	r20, r24
    1276:	59 0b       	sbc	r21, r25
    1278:	ca 01       	movw	r24, r20
    127a:	90 93 c2 02 	sts	0x02C2, r25
    127e:	80 93 c1 02 	sts	0x02C1, r24
        TIMER1_ICU_voidEdgeSelect ( FALLING_EDGE );       // Sense Falling Edge to calculate time of ON Time from Second Raising Ege to First Falling Edge.
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	0e 94 23 08 	call	0x1046	; 0x1046 <TIMER1_ICU_voidEdgeSelect>
    1288:	21 c0       	rjmp	.+66     	; 0x12cc <__vector_6+0xd0>
    }
    else if ( Counter == 3 )
    128a:	80 91 c5 02 	lds	r24, 0x02C5
    128e:	83 30       	cpi	r24, 0x03	; 3
    1290:	e9 f4       	brne	.+58     	; 0x12cc <__vector_6+0xd0>
    {
        Global_ICU_Read3 = ICR1_REG ;
    1292:	e6 e4       	ldi	r30, 0x46	; 70
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	91 81       	ldd	r25, Z+1	; 0x01
    129a:	90 93 c0 02 	sts	0x02C0, r25
    129e:	80 93 bf 02 	sts	0x02BF, r24
        Global_ICU_ONTime = Global_ICU_Read3 - Global_ICU_Read2 ;
    12a2:	20 91 bf 02 	lds	r18, 0x02BF
    12a6:	30 91 c0 02 	lds	r19, 0x02C0
    12aa:	80 91 bd 02 	lds	r24, 0x02BD
    12ae:	90 91 be 02 	lds	r25, 0x02BE
    12b2:	a9 01       	movw	r20, r18
    12b4:	48 1b       	sub	r20, r24
    12b6:	59 0b       	sbc	r21, r25
    12b8:	ca 01       	movw	r24, r20
    12ba:	90 93 c4 02 	sts	0x02C4, r25
    12be:	80 93 c3 02 	sts	0x02C3, r24
        Counter = 0 ;
    12c2:	10 92 c5 02 	sts	0x02C5, r1
        TIMER1_ICU_voidEdgeSelect ( RAISING_EDGE );        // Sense Raising Edge to start calculate time of Period Time from First Raising Ege to Second Raising Edge.
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	0e 94 23 08 	call	0x1046	; 0x1046 <TIMER1_ICU_voidEdgeSelect>
    }
    else
    {
        // Nothing Action
    }
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	ff 91       	pop	r31
    12d2:	ef 91       	pop	r30
    12d4:	bf 91       	pop	r27
    12d6:	af 91       	pop	r26
    12d8:	9f 91       	pop	r25
    12da:	8f 91       	pop	r24
    12dc:	7f 91       	pop	r23
    12de:	6f 91       	pop	r22
    12e0:	5f 91       	pop	r21
    12e2:	4f 91       	pop	r20
    12e4:	3f 91       	pop	r19
    12e6:	2f 91       	pop	r18
    12e8:	0f 90       	pop	r0
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	0f 90       	pop	r0
    12ee:	1f 90       	pop	r1
    12f0:	18 95       	reti

000012f2 <TIMER0_voidInit>:
/* Function Name : TIMER0_voidInit                                                              */
/* Description : Initilization of TIMER0 with Specific Specks accordig to Gonfigration File.h   */                                          
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void TIMER0_voidInit (void)
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
        #else 
            #error  Wrong selection of OC0 mode
        #endif

    #elif (MODE == CTC)                                  // CTC Mode of Timer/Counter0
        CLEAR_BIT(TCCR0_REG,TIMER0_TCCR0_WGM00);
    12fa:	a3 e5       	ldi	r26, 0x53	; 83
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e3 e5       	ldi	r30, 0x53	; 83
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	8f 7b       	andi	r24, 0xBF	; 191
    1306:	8c 93       	st	X, r24
        SET_BIT(TCCR0_REG,TIMER0_TCCR0_WGM01);
    1308:	a3 e5       	ldi	r26, 0x53	; 83
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e3 e5       	ldi	r30, 0x53	; 83
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	88 60       	ori	r24, 0x08	; 8
    1314:	8c 93       	st	X, r24
		SET_BIT(TIMSK_REG,TIMER0_TIMSK_OCIE0);          // Enable T0 CTC Interrupt [PIE]. 
    1316:	a9 e5       	ldi	r26, 0x59	; 89
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e9 e5       	ldi	r30, 0x59	; 89
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	82 60       	ori	r24, 0x02	; 2
    1322:	8c 93       	st	X, r24
    #endif 
/*======================================*/
/*======================================*/
/*     TIMER0 Prescaller Selection      */
/*--------------------------------------*/
    TCCR0_REG = ( TCCR0_REG & 0b11111000 );              // Clear Prescaller 
    1324:	a3 e5       	ldi	r26, 0x53	; 83
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e3 e5       	ldi	r30, 0x53	; 83
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	88 7f       	andi	r24, 0xF8	; 248
    1330:	8c 93       	st	X, r24
    #elif ( PRESCALER == NOT_USE_PRESCALER )
        SET_BIT(TCCR0_REG,TIMER0_TCCR0_CS00);
        CLEAR_BIT(TCCR0_REG,TIMER0_TCCR0_CS01);
        CLEAR_BIT(TCCR0_REG,TIMER0_TCCR0_CS02);
    #elif ( PRESCALER == PRESCALER_DIVISION_BY_8 )
        CLEAR_BIT(TCCR0_REG,TIMER0_TCCR0_CS00);
    1332:	a3 e5       	ldi	r26, 0x53	; 83
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e3 e5       	ldi	r30, 0x53	; 83
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	8e 7f       	andi	r24, 0xFE	; 254
    133e:	8c 93       	st	X, r24
        SET_BIT(TCCR0_REG,TIMER0_TCCR0_CS01);
    1340:	a3 e5       	ldi	r26, 0x53	; 83
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e3 e5       	ldi	r30, 0x53	; 83
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	82 60       	ori	r24, 0x02	; 2
    134c:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR0_REG,TIMER0_TCCR0_CS02);
    134e:	a3 e5       	ldi	r26, 0x53	; 83
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e3 e5       	ldi	r30, 0x53	; 83
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	8b 7f       	andi	r24, 0xFB	; 251
    135a:	8c 93       	st	X, r24
        SET_BIT(TCCR0_REG,TIMER0_TCCR0_CS02);
    #else
        #error  Wrong selection of Prescaller mode
    #endif
/*======================================*/
}
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <TIMER0_voidSetCallBack_OVF>:
/* Description : Call Back Function To Assign the address of OVF APP. Fun. at Global Pointer    */                                          
/* Fun. Argument1: (*Local_PointerToFunction_OVF) { Address of OVF Application Function }       */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void TIMER0_voidSetCallBack_OVF (void (*Local_PointerToFunction_OVF) (void))
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	00 d0       	rcall	.+0      	; 0x1368 <TIMER0_voidSetCallBack_OVF+0x6>
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	9a 83       	std	Y+2, r25	; 0x02
    136e:	89 83       	std	Y+1, r24	; 0x01
    Global_PointerToFunction_OVF_T0 = Local_PointerToFunction_OVF ;
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	9a 81       	ldd	r25, Y+2	; 0x02
    1374:	90 93 c7 02 	sts	0x02C7, r25
    1378:	80 93 c6 02 	sts	0x02C6, r24
}
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <TIMER0_voidSetCallBack_CTC>:
/* Description : Call Back Function To Assign the address of CTC APP. Fun. at Global Pointer    */                                          
/* Fun. Argument1: (*Local_PointerToFunction_CTC) { Address of CTC Application Function }       */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void TIMER0_voidSetCallBack_CTC (void (*Local_PointerToFunction_CTC) (void))
{
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	00 d0       	rcall	.+0      	; 0x138c <TIMER0_voidSetCallBack_CTC+0x6>
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	9a 83       	std	Y+2, r25	; 0x02
    1392:	89 83       	std	Y+1, r24	; 0x01
    Global_PointerToFunction_CTC_T0 = Local_PointerToFunction_CTC ;
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	9a 81       	ldd	r25, Y+2	; 0x02
    1398:	90 93 c9 02 	sts	0x02C9, r25
    139c:	80 93 c8 02 	sts	0x02C8, r24
}
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	08 95       	ret

000013aa <TIMER0_voidSetPreloadValue>:
/* Description : Set Preload Value in a Timer Register to Start Count From this Preload Value   */                                          
/* Fun. Argument1: Copy_u8PreloadValue  { from  0  To  255 }                                    */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void TIMER0_voidSetPreloadValue ( u8 Local_u8PreloadValue )
{
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	0f 92       	push	r0
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	89 83       	std	Y+1, r24	; 0x01
        TCNT0_REG = Local_u8PreloadValue ;
        Global_u8PreloadValue = Local_u8PreloadValue ;
    #else
        // No Action
    #endif
}
    13b6:	0f 90       	pop	r0
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <TIMER0_voidSetCompareMatchValue>:
/* Description : Set Compare Match Value in OCR0 Register To make Timer Over Flow at This Value */                                          
/* Fun. Argument1: Copy_u8CompareMatchValue  { from  0  To  255 }                               */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void TIMER0_voidSetCompareMatchValue ( u8 Local_u8CompareMatchValue )
{
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	0f 92       	push	r0
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	89 83       	std	Y+1, r24	; 0x01
    #if (MODE == CTC)
        OCR0_REG = Local_u8CompareMatchValue ;
    13ca:	ec e5       	ldi	r30, 0x5C	; 92
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	80 83       	st	Z, r24
        Global_u8CompareMatchValue = Local_u8CompareMatchValue ;
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	88 2f       	mov	r24, r24
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	90 93 cd 02 	sts	0x02CD, r25
    13dc:	80 93 cc 02 	sts	0x02CC, r24
    #elif ( MODE == FAST_PWM )
        OCR0_REG = Local_u8CompareMatchValue ;
    #elif (MODE == PWM_PHASECORRECT)
        OCR0_REG = Local_u8CompareMatchValue ;
    #endif
}
    13e0:	0f 90       	pop	r0
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <TIMER0_voidSetCallBack_CTC_andRequiredTime_ms>:
/* Fun. Argument1: (*Local_PointerToFunction_CTC) { Address of CTC Application Function }       */
/* Fun. Argument2: Copy_u32Time_ms { Required Time }                                            */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void TIMER0_voidSetCallBack_CTC_andRequiredTime_ms (void (*Local_PointerToFunction_CTC) (void),u32 Copy_u32Time_ms)
{
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <TIMER0_voidSetCallBack_CTC_andRequiredTime_ms+0x6>
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <TIMER0_voidSetCallBack_CTC_andRequiredTime_ms+0x8>
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <TIMER0_voidSetCallBack_CTC_andRequiredTime_ms+0xa>
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	9a 83       	std	Y+2, r25	; 0x02
    13f8:	89 83       	std	Y+1, r24	; 0x01
    13fa:	4b 83       	std	Y+3, r20	; 0x03
    13fc:	5c 83       	std	Y+4, r21	; 0x04
    13fe:	6d 83       	std	Y+5, r22	; 0x05
    1400:	7e 83       	std	Y+6, r23	; 0x06
    TIMER0_voidSetCompareMatchValue (200);
    1402:	88 ec       	ldi	r24, 0xC8	; 200
    1404:	0e 94 df 09 	call	0x13be	; 0x13be <TIMER0_voidSetCompareMatchValue>
    TIMER0_voidSetCallBack_CTC (Local_PointerToFunction_CTC);
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	9a 81       	ldd	r25, Y+2	; 0x02
    140c:	0e 94 c3 09 	call	0x1386	; 0x1386 <TIMER0_voidSetCallBack_CTC>
    Global_u32Time_ms = Copy_u32Time_ms ;
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	ad 81       	ldd	r26, Y+5	; 0x05
    1416:	be 81       	ldd	r27, Y+6	; 0x06
    1418:	80 93 ce 02 	sts	0x02CE, r24
    141c:	90 93 cf 02 	sts	0x02CF, r25
    1420:	a0 93 d0 02 	sts	0x02D0, r26
    1424:	b0 93 d1 02 	sts	0x02D1, r27
}
    1428:	26 96       	adiw	r28, 0x06	; 6
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <TIMER0_voidSetBusyWait_ms>:
/* Description : Set Busy Wait Function work as Delay by make Processor Stuck in Fun. during Time */                                          
/* Fun. Argument1: Copy_u32Time_ms  { any Time in Milliseconds }                                  */
/* Fun. Return : void                                                                             */
/**************************************************************************************************/
void TIMER0_voidSetBusyWait_ms ( u32 Copy_u32Time_ms )
{
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	2d 97       	sbiw	r28, 0x0d	; 13
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	6a 87       	std	Y+10, r22	; 0x0a
    1450:	7b 87       	std	Y+11, r23	; 0x0b
    1452:	8c 87       	std	Y+12, r24	; 0x0c
    1454:	9d 87       	std	Y+13, r25	; 0x0d
    CLEAR_BIT(TIMSK_REG,TIMER0_TIMSK_OCIE0);              // Disable T0 CTC Interrupt [PIE].
    1456:	a9 e5       	ldi	r26, 0x59	; 89
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e9 e5       	ldi	r30, 0x59	; 89
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	8d 7f       	andi	r24, 0xFD	; 253
    1462:	8c 93       	st	X, r24
    u32 Counter_CTC = 0 ;
    1464:	1e 82       	std	Y+6, r1	; 0x06
    1466:	1f 82       	std	Y+7, r1	; 0x07
    1468:	18 86       	std	Y+8, r1	; 0x08
    146a:	19 86       	std	Y+9, r1	; 0x09
    TIMER0_voidSetCompareMatchValue (200);
    146c:	88 ec       	ldi	r24, 0xC8	; 200
    146e:	0e 94 df 09 	call	0x13be	; 0x13be <TIMER0_voidSetCompareMatchValue>
    Counter_CTC = ( Copy_u32Time_ms * 1000UL ) /200 ;     // Counter_CTC = (Required Time(ms) * 1000) / (Compare Match Value)
    1472:	8a 85       	ldd	r24, Y+10	; 0x0a
    1474:	9b 85       	ldd	r25, Y+11	; 0x0b
    1476:	ac 85       	ldd	r26, Y+12	; 0x0c
    1478:	bd 85       	ldd	r27, Y+13	; 0x0d
    147a:	28 ee       	ldi	r18, 0xE8	; 232
    147c:	33 e0       	ldi	r19, 0x03	; 3
    147e:	40 e0       	ldi	r20, 0x00	; 0
    1480:	50 e0       	ldi	r21, 0x00	; 0
    1482:	bc 01       	movw	r22, r24
    1484:	cd 01       	movw	r24, r26
    1486:	0e 94 de 2b 	call	0x57bc	; 0x57bc <__mulsi3>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	28 ec       	ldi	r18, 0xC8	; 200
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	40 e0       	ldi	r20, 0x00	; 0
    1494:	50 e0       	ldi	r21, 0x00	; 0
    1496:	bc 01       	movw	r22, r24
    1498:	cd 01       	movw	r24, r26
    149a:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__udivmodsi4>
    149e:	da 01       	movw	r26, r20
    14a0:	c9 01       	movw	r24, r18
    14a2:	8e 83       	std	Y+6, r24	; 0x06
    14a4:	9f 83       	std	Y+7, r25	; 0x07
    14a6:	a8 87       	std	Y+8, r26	; 0x08
    14a8:	b9 87       	std	Y+9, r27	; 0x09
    u32 iter = 0 ;
    14aa:	1a 82       	std	Y+2, r1	; 0x02
    14ac:	1b 82       	std	Y+3, r1	; 0x03
    14ae:	1c 82       	std	Y+4, r1	; 0x04
    14b0:	1d 82       	std	Y+5, r1	; 0x05
    for ( iter =0 ; iter < Counter_CTC ; iter++)
    14b2:	1a 82       	std	Y+2, r1	; 0x02
    14b4:	1b 82       	std	Y+3, r1	; 0x03
    14b6:	1c 82       	std	Y+4, r1	; 0x04
    14b8:	1d 82       	std	Y+5, r1	; 0x05
    14ba:	20 c0       	rjmp	.+64     	; 0x14fc <TIMER0_voidSetBusyWait_ms+0xc2>
    {
    	u8 Local_u8Flag ;
    	Local_u8Flag = GET_BIT(TIFR_REG,TIMER0_TIFR_OCF0);
    14bc:	e8 e5       	ldi	r30, 0x58	; 88
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	82 70       	andi	r24, 0x02	; 2
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	05 c0       	rjmp	.+10     	; 0x14d2 <TIMER0_voidSetBusyWait_ms+0x98>
    	while ( Local_u8Flag == 0 )
    	{
    		Local_u8Flag = GET_BIT(TIFR_REG,TIMER0_TIFR_OCF0);      // Polling in the CTC Flag
    14c8:	e8 e5       	ldi	r30, 0x58	; 88
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	82 70       	andi	r24, 0x02	; 2
    14d0:	89 83       	std	Y+1, r24	; 0x01
    u32 iter = 0 ;
    for ( iter =0 ; iter < Counter_CTC ; iter++)
    {
    	u8 Local_u8Flag ;
    	Local_u8Flag = GET_BIT(TIFR_REG,TIMER0_TIFR_OCF0);
    	while ( Local_u8Flag == 0 )
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	88 23       	and	r24, r24
    14d6:	c1 f3       	breq	.-16     	; 0x14c8 <TIMER0_voidSetBusyWait_ms+0x8e>
    	{
    		Local_u8Flag = GET_BIT(TIFR_REG,TIMER0_TIFR_OCF0);      // Polling in the CTC Flag
    	}
		SET_BIT(TIFR_REG,TIMER0_TIFR_OCF0);						    // Clear Flag
    14d8:	a8 e5       	ldi	r26, 0x58	; 88
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e8 e5       	ldi	r30, 0x58	; 88
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	82 60       	ori	r24, 0x02	; 2
    14e4:	8c 93       	st	X, r24
    CLEAR_BIT(TIMSK_REG,TIMER0_TIMSK_OCIE0);              // Disable T0 CTC Interrupt [PIE].
    u32 Counter_CTC = 0 ;
    TIMER0_voidSetCompareMatchValue (200);
    Counter_CTC = ( Copy_u32Time_ms * 1000UL ) /200 ;     // Counter_CTC = (Required Time(ms) * 1000) / (Compare Match Value)
    u32 iter = 0 ;
    for ( iter =0 ; iter < Counter_CTC ; iter++)
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	9b 81       	ldd	r25, Y+3	; 0x03
    14ea:	ac 81       	ldd	r26, Y+4	; 0x04
    14ec:	bd 81       	ldd	r27, Y+5	; 0x05
    14ee:	01 96       	adiw	r24, 0x01	; 1
    14f0:	a1 1d       	adc	r26, r1
    14f2:	b1 1d       	adc	r27, r1
    14f4:	8a 83       	std	Y+2, r24	; 0x02
    14f6:	9b 83       	std	Y+3, r25	; 0x03
    14f8:	ac 83       	std	Y+4, r26	; 0x04
    14fa:	bd 83       	std	Y+5, r27	; 0x05
    14fc:	2a 81       	ldd	r18, Y+2	; 0x02
    14fe:	3b 81       	ldd	r19, Y+3	; 0x03
    1500:	4c 81       	ldd	r20, Y+4	; 0x04
    1502:	5d 81       	ldd	r21, Y+5	; 0x05
    1504:	8e 81       	ldd	r24, Y+6	; 0x06
    1506:	9f 81       	ldd	r25, Y+7	; 0x07
    1508:	a8 85       	ldd	r26, Y+8	; 0x08
    150a:	b9 85       	ldd	r27, Y+9	; 0x09
    150c:	28 17       	cp	r18, r24
    150e:	39 07       	cpc	r19, r25
    1510:	4a 07       	cpc	r20, r26
    1512:	5b 07       	cpc	r21, r27
    1514:	98 f2       	brcs	.-90     	; 0x14bc <TIMER0_voidSetBusyWait_ms+0x82>
    	{
    		Local_u8Flag = GET_BIT(TIFR_REG,TIMER0_TIFR_OCF0);      // Polling in the CTC Flag
    	}
		SET_BIT(TIFR_REG,TIMER0_TIFR_OCF0);						    // Clear Flag
    }
    SET_BIT(TIMSK_REG,TIMER0_TIMSK_OCIE0);          // Enable T0 CTC Interrupt [PIE]. 
    1516:	a9 e5       	ldi	r26, 0x59	; 89
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e9 e5       	ldi	r30, 0x59	; 89
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	82 60       	ori	r24, 0x02	; 2
    1522:	8c 93       	st	X, r24
}
    1524:	2d 96       	adiw	r28, 0x0d	; 13
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <TIMER0_voidBahaaPWM>:
/* Description : Set Compare Match Value in OCR0 Register To make PWM at PIN OC0                */                                          
/* Fun. Argument1: Local_u8CompareMatchValue  { from  0  To  255 }                              */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void TIMER0_voidBahaaPWM ( u8 Local_u8CompareMatchValue )
{
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	0f 92       	push	r0
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	89 83       	std	Y+1, r24	; 0x01
    TIMER0_voidSetCompareMatchValue ( Local_u8CompareMatchValue );
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	0e 94 df 09 	call	0x13be	; 0x13be <TIMER0_voidSetCompareMatchValue>
}
    1548:	0f 90       	pop	r0
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <__vector_11>:
/* Fun. Return : void                                                        */
/*****************************************************************************/
/**************     [ISR] to OVF     *************/
void __vector_11 (void)   __attribute__((signal));
void __vector_11 (void)
{
    1550:	1f 92       	push	r1
    1552:	0f 92       	push	r0
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	0f 92       	push	r0
    1558:	11 24       	eor	r1, r1
    155a:	2f 93       	push	r18
    155c:	3f 93       	push	r19
    155e:	4f 93       	push	r20
    1560:	5f 93       	push	r21
    1562:	6f 93       	push	r22
    1564:	7f 93       	push	r23
    1566:	8f 93       	push	r24
    1568:	9f 93       	push	r25
    156a:	af 93       	push	r26
    156c:	bf 93       	push	r27
    156e:	ef 93       	push	r30
    1570:	ff 93       	push	r31
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    static u16 counter = 0 ;
    counter ++ ;
    157a:	80 91 d2 02 	lds	r24, 0x02D2
    157e:	90 91 d3 02 	lds	r25, 0x02D3
    1582:	01 96       	adiw	r24, 0x01	; 1
    1584:	90 93 d3 02 	sts	0x02D3, r25
    1588:	80 93 d2 02 	sts	0x02D2, r24
    if ( counter == 3907 )
    158c:	80 91 d2 02 	lds	r24, 0x02D2
    1590:	90 91 d3 02 	lds	r25, 0x02D3
    1594:	2f e0       	ldi	r18, 0x0F	; 15
    1596:	83 34       	cpi	r24, 0x43	; 67
    1598:	92 07       	cpc	r25, r18
    159a:	b1 f4       	brne	.+44     	; 0x15c8 <__vector_11+0x78>
    {
        if(Global_PointerToFunction_OVF_T0 != NULL)
    159c:	80 91 c6 02 	lds	r24, 0x02C6
    15a0:	90 91 c7 02 	lds	r25, 0x02C7
    15a4:	00 97       	sbiw	r24, 0x00	; 0
    15a6:	29 f0       	breq	.+10     	; 0x15b2 <__vector_11+0x62>
		{
    		Global_PointerToFunction_OVF_T0();                 // Action of OVF Application Function
    15a8:	e0 91 c6 02 	lds	r30, 0x02C6
    15ac:	f0 91 c7 02 	lds	r31, 0x02C7
    15b0:	09 95       	icall
		}
        counter = 0 ;                                       // For Next Period.
    15b2:	10 92 d3 02 	sts	0x02D3, r1
    15b6:	10 92 d2 02 	sts	0x02D2, r1
        TCNT0_REG = Global_u8PreloadValue ;                 // For Next Period Preload Value.
    15ba:	e2 e5       	ldi	r30, 0x52	; 82
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 91 ca 02 	lds	r24, 0x02CA
    15c2:	90 91 cb 02 	lds	r25, 0x02CB
    15c6:	80 83       	st	Z, r24
    }
}
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	ff 91       	pop	r31
    15ce:	ef 91       	pop	r30
    15d0:	bf 91       	pop	r27
    15d2:	af 91       	pop	r26
    15d4:	9f 91       	pop	r25
    15d6:	8f 91       	pop	r24
    15d8:	7f 91       	pop	r23
    15da:	6f 91       	pop	r22
    15dc:	5f 91       	pop	r21
    15de:	4f 91       	pop	r20
    15e0:	3f 91       	pop	r19
    15e2:	2f 91       	pop	r18
    15e4:	0f 90       	pop	r0
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	0f 90       	pop	r0
    15ea:	1f 90       	pop	r1
    15ec:	18 95       	reti

000015ee <__vector_10>:
/* Fun. Return : void                                                        */
/*****************************************************************************/
/**************     [ISR] to CTC     *************/
void __vector_10 (void)   __attribute__((signal));
void __vector_10 (void)
{
    15ee:	1f 92       	push	r1
    15f0:	0f 92       	push	r0
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	0f 92       	push	r0
    15f6:	11 24       	eor	r1, r1
    15f8:	2f 93       	push	r18
    15fa:	3f 93       	push	r19
    15fc:	4f 93       	push	r20
    15fe:	5f 93       	push	r21
    1600:	6f 93       	push	r22
    1602:	7f 93       	push	r23
    1604:	8f 93       	push	r24
    1606:	9f 93       	push	r25
    1608:	af 93       	push	r26
    160a:	bf 93       	push	r27
    160c:	ef 93       	push	r30
    160e:	ff 93       	push	r31
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	00 d0       	rcall	.+0      	; 0x1616 <__vector_10+0x28>
    1616:	00 d0       	rcall	.+0      	; 0x1618 <__vector_10+0x2a>
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
    u32 Counter_CTC = 0 ;
    161c:	19 82       	std	Y+1, r1	; 0x01
    161e:	1a 82       	std	Y+2, r1	; 0x02
    1620:	1b 82       	std	Y+3, r1	; 0x03
    1622:	1c 82       	std	Y+4, r1	; 0x04
    Counter_CTC = ( Global_u32Time_ms * 1000UL ) / (200) ;        // Counter_CTC = (Required Time(ms) * 1000) / (Compare Match Value)
    1624:	80 91 ce 02 	lds	r24, 0x02CE
    1628:	90 91 cf 02 	lds	r25, 0x02CF
    162c:	a0 91 d0 02 	lds	r26, 0x02D0
    1630:	b0 91 d1 02 	lds	r27, 0x02D1
    1634:	28 ee       	ldi	r18, 0xE8	; 232
    1636:	33 e0       	ldi	r19, 0x03	; 3
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	bc 01       	movw	r22, r24
    163e:	cd 01       	movw	r24, r26
    1640:	0e 94 de 2b 	call	0x57bc	; 0x57bc <__mulsi3>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	28 ec       	ldi	r18, 0xC8	; 200
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e0       	ldi	r20, 0x00	; 0
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	bc 01       	movw	r22, r24
    1652:	cd 01       	movw	r24, r26
    1654:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__udivmodsi4>
    1658:	da 01       	movw	r26, r20
    165a:	c9 01       	movw	r24, r18
    165c:	89 83       	std	Y+1, r24	; 0x01
    165e:	9a 83       	std	Y+2, r25	; 0x02
    1660:	ab 83       	std	Y+3, r26	; 0x03
    1662:	bc 83       	std	Y+4, r27	; 0x04
    static u16 counter = 0 ;
    counter ++ ;
    1664:	80 91 d4 02 	lds	r24, 0x02D4
    1668:	90 91 d5 02 	lds	r25, 0x02D5
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	90 93 d5 02 	sts	0x02D5, r25
    1672:	80 93 d4 02 	sts	0x02D4, r24
    if(Global_u32Time_ms == 0)
    1676:	80 91 ce 02 	lds	r24, 0x02CE
    167a:	90 91 cf 02 	lds	r25, 0x02CF
    167e:	a0 91 d0 02 	lds	r26, 0x02D0
    1682:	b0 91 d1 02 	lds	r27, 0x02D1
    1686:	00 97       	sbiw	r24, 0x00	; 0
    1688:	a1 05       	cpc	r26, r1
    168a:	b1 05       	cpc	r27, r1
    168c:	f9 f4       	brne	.+62     	; 0x16cc <__vector_10+0xde>
    {
        if ( counter == 5000 )
    168e:	80 91 d4 02 	lds	r24, 0x02D4
    1692:	90 91 d5 02 	lds	r25, 0x02D5
    1696:	23 e1       	ldi	r18, 0x13	; 19
    1698:	88 38       	cpi	r24, 0x88	; 136
    169a:	92 07       	cpc	r25, r18
    169c:	e9 f5       	brne	.+122    	; 0x1718 <__vector_10+0x12a>
        {
            if(Global_PointerToFunction_CTC_T0 != NULL)
    169e:	80 91 c8 02 	lds	r24, 0x02C8
    16a2:	90 91 c9 02 	lds	r25, 0x02C9
    16a6:	00 97       	sbiw	r24, 0x00	; 0
    16a8:	29 f0       	breq	.+10     	; 0x16b4 <__vector_10+0xc6>
		    {
                Global_PointerToFunction_CTC_T0();                  // Action of CTC Application Function 
    16aa:	e0 91 c8 02 	lds	r30, 0x02C8
    16ae:	f0 91 c9 02 	lds	r31, 0x02C9
    16b2:	09 95       	icall
		    }                
            counter = 0 ;                                        // For Next Period.
    16b4:	10 92 d5 02 	sts	0x02D5, r1
    16b8:	10 92 d4 02 	sts	0x02D4, r1
            OCR0_REG = Global_u8CompareMatchValue ;              // For Next Period Compare Match Value.
    16bc:	ec e5       	ldi	r30, 0x5C	; 92
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 91 cc 02 	lds	r24, 0x02CC
    16c4:	90 91 cd 02 	lds	r25, 0x02CD
    16c8:	80 83       	st	Z, r24
    16ca:	26 c0       	rjmp	.+76     	; 0x1718 <__vector_10+0x12a>
        }
    }
    else
    {
        if ( counter == Counter_CTC )
    16cc:	80 91 d4 02 	lds	r24, 0x02D4
    16d0:	90 91 d5 02 	lds	r25, 0x02D5
    16d4:	9c 01       	movw	r18, r24
    16d6:	40 e0       	ldi	r20, 0x00	; 0
    16d8:	50 e0       	ldi	r21, 0x00	; 0
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	9a 81       	ldd	r25, Y+2	; 0x02
    16de:	ab 81       	ldd	r26, Y+3	; 0x03
    16e0:	bc 81       	ldd	r27, Y+4	; 0x04
    16e2:	28 17       	cp	r18, r24
    16e4:	39 07       	cpc	r19, r25
    16e6:	4a 07       	cpc	r20, r26
    16e8:	5b 07       	cpc	r21, r27
    16ea:	b1 f4       	brne	.+44     	; 0x1718 <__vector_10+0x12a>
        {
            if(Global_PointerToFunction_CTC_T0 != NULL)
    16ec:	80 91 c8 02 	lds	r24, 0x02C8
    16f0:	90 91 c9 02 	lds	r25, 0x02C9
    16f4:	00 97       	sbiw	r24, 0x00	; 0
    16f6:	29 f0       	breq	.+10     	; 0x1702 <__vector_10+0x114>
		    {
                Global_PointerToFunction_CTC_T0();                  // Action of CTC Application Function 
    16f8:	e0 91 c8 02 	lds	r30, 0x02C8
    16fc:	f0 91 c9 02 	lds	r31, 0x02C9
    1700:	09 95       	icall
		    }                
            counter = 0 ;                                        // For Next Period.
    1702:	10 92 d5 02 	sts	0x02D5, r1
    1706:	10 92 d4 02 	sts	0x02D4, r1
            OCR0_REG = Global_u8CompareMatchValue ;              // For Next Period Compare Match Value.
    170a:	ec e5       	ldi	r30, 0x5C	; 92
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 91 cc 02 	lds	r24, 0x02CC
    1712:	90 91 cd 02 	lds	r25, 0x02CD
    1716:	80 83       	st	Z, r24
        }
    }
    
}
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	ff 91       	pop	r31
    1726:	ef 91       	pop	r30
    1728:	bf 91       	pop	r27
    172a:	af 91       	pop	r26
    172c:	9f 91       	pop	r25
    172e:	8f 91       	pop	r24
    1730:	7f 91       	pop	r23
    1732:	6f 91       	pop	r22
    1734:	5f 91       	pop	r21
    1736:	4f 91       	pop	r20
    1738:	3f 91       	pop	r19
    173a:	2f 91       	pop	r18
    173c:	0f 90       	pop	r0
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	0f 90       	pop	r0
    1742:	1f 90       	pop	r1
    1744:	18 95       	reti

00001746 <SPI_voidMasterInit>:
/* Function Name : SPI_voidMasterInit                                                           */
/* Description : Initilization of Master Mode                                                   */                                         
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void SPI_voidMasterInit (void)
{
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
/*======================================*/
/*        Master I/O PIN Mode           */
/*--------------------------------------*/
    DIO_voidSetPinDirection(PORTB,PIN5,OUTPUT);         // MOSI OUTPUT in Master Mode
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	65 e0       	ldi	r22, 0x05	; 5
    1752:	41 e0       	ldi	r20, 0x01	; 1
    1754:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORTB,PIN6,INPUT);          // MISO INPUT  in Master Mode
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	66 e0       	ldi	r22, 0x06	; 6
    175c:	40 e0       	ldi	r20, 0x00	; 0
    175e:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORTB,PIN7,OUTPUT);         // CLOK OUTPUT in Master Mode
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	67 e0       	ldi	r22, 0x07	; 7
    1766:	41 e0       	ldi	r20, 0x01	; 1
    1768:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORTB,PIN4,INPUT);          // SS Slave Select INPUT in Master Mode if we have one Slave only
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	64 e0       	ldi	r22, 0x04	; 4
    1770:	40 e0       	ldi	r20, 0x00	; 0
    1772:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_voidSetPinDirection>
    DIO_voidConfig_Pull_Up_Pin(PORTB,PIN4,ON);          // For Protection From Noise and Set 0 at SS in Slave to Activate this one Slave
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	64 e0       	ldi	r22, 0x04	; 4
    177a:	41 e0       	ldi	r20, 0x01	; 1
    177c:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <DIO_voidConfig_Pull_Up_Pin>
/*======================================*/
/*          Select Master  Mode         */
/*--------------------------------------*/    
        SET_BIT(SPCR_REG,SPCR_MSTR);
    1780:	ad e2       	ldi	r26, 0x2D	; 45
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	ed e2       	ldi	r30, 0x2D	; 45
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	80 61       	ori	r24, 0x10	; 16
    178c:	8c 93       	st	X, r24
/*======================================*/
/*    Select MSB or LSB Send at First   */
/*--------------------------------------*/   
    #if ( DATA_ORDER == MSB_FIRST )
        CLEAR_BIT(SPCR_REG,SPCR_DORD);                  // select MSB to be send first
    178e:	ad e2       	ldi	r26, 0x2D	; 45
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	ed e2       	ldi	r30, 0x2D	; 45
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	8f 7d       	andi	r24, 0xDF	; 223
    179a:	8c 93       	st	X, r24
    #endif
/*===========================================*/
/*  Select Clock Polarity Raisinr or Falling */
/*-------------------------------------------*/     
    #if ( CLK_POLARITY == RAISING_Leading_Edge )    
        CLEAR_BIT(SPCR_REG,SPCR_CPOL);                  // Select Raising at Leading edge & Falling at Tralling Edge
    179c:	ad e2       	ldi	r26, 0x2D	; 45
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	ed e2       	ldi	r30, 0x2D	; 45
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	87 7f       	andi	r24, 0xF7	; 247
    17a8:	8c 93       	st	X, r24
    #endif
/*================================================*/
/*  Select Clock Phase Sample or setup on Leading */
/*------------------------------------------------*/  
    #if ( CLK_PHASE == SAMPLE_Leading_Edge )     
        CLEAR_BIT(SPCR_REG,SPCR_CPHA);                  // Select Sampling at leadding edge & Setup at Trailling Edge
    17aa:	ad e2       	ldi	r26, 0x2D	; 45
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	ed e2       	ldi	r30, 0x2D	; 45
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	8b 7f       	andi	r24, 0xFB	; 251
    17b6:	8c 93       	st	X, r24
    #if(PRESCALER == PRESCALER_DIVISION_BY_4)
        CLEAR_BIT(SPCR_REG,SPCR_SPR0);
        CLEAR_BIT(SPCR_REG,SPCR_SPR1);
        CLEAR_BIT(SPSR_REG,SPSR_SPI2X);
    #elif(PRESCALER == PRESCALER_DIVISION_BY_16)
          SET_BIT(SPCR_REG,SPCR_SPR0);
    17b8:	ad e2       	ldi	r26, 0x2D	; 45
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	ed e2       	ldi	r30, 0x2D	; 45
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	81 60       	ori	r24, 0x01	; 1
    17c4:	8c 93       	st	X, r24
        CLEAR_BIT(SPCR_REG,SPCR_SPR1);
    17c6:	ad e2       	ldi	r26, 0x2D	; 45
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	ed e2       	ldi	r30, 0x2D	; 45
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	8d 7f       	andi	r24, 0xFD	; 253
    17d2:	8c 93       	st	X, r24
        CLEAR_BIT(SPSR_REG,SPSR_SPI2X);
    17d4:	ae e2       	ldi	r26, 0x2E	; 46
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	ee e2       	ldi	r30, 0x2E	; 46
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	8e 7f       	andi	r24, 0xFE	; 254
    17e0:	8c 93       	st	X, r24
          SET_BIT(SPSR_REG,SPSR_SPI2X);
    #endif
/*======================================*/
/*              Enable SPI              */
/*--------------------------------------*/        
    SET_BIT(SPCR_REG,SPCR_SPE);                     // Enable SPI
    17e2:	ad e2       	ldi	r26, 0x2D	; 45
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	ed e2       	ldi	r30, 0x2D	; 45
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	80 64       	ori	r24, 0x40	; 64
    17ee:	8c 93       	st	X, r24

}
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	08 95       	ret

000017f6 <SPI_voidSlaveInit>:
/* Function Name : SPI_voidSlaveInit                                                            */
/* Description : Initilization of Slave Mode                                                    */                                         
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void SPI_voidSlaveInit (void)
{
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
/*======================================*/
/*          Slave I/O PIN Mode          */
/*--------------------------------------*/
    DIO_voidSetPinDirection (PORTB,PIN5,INPUT);         // MOSI  INPUT in Slave Mode
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	65 e0       	ldi	r22, 0x05	; 5
    1802:	40 e0       	ldi	r20, 0x00	; 0
    1804:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORTB,PIN6,OUTPUT);         // MISO OUTPUT in Slave Mode
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	66 e0       	ldi	r22, 0x06	; 6
    180c:	41 e0       	ldi	r20, 0x01	; 1
    180e:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (PORTB,PIN7,INPUT);         // CLOK  INPUT in Slave Mode
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	67 e0       	ldi	r22, 0x07	; 7
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (PORTB,PIN4,INPUT);         // SS Slave Select INPUT in Slave Mode 
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	64 e0       	ldi	r22, 0x04	; 4
    1820:	40 e0       	ldi	r20, 0x00	; 0
    1822:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_voidSetPinDirection>
    DIO_voidSetPinValue (PORTB,PIN4,LOW);               // Set LOW on SS Always if we have one Slave
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	64 e0       	ldi	r22, 0x04	; 4
    182a:	40 e0       	ldi	r20, 0x00	; 0
    182c:	0e 94 68 14 	call	0x28d0	; 0x28d0 <DIO_voidSetPinValue>
/*======================================*/
/*          Select Slave  Mode          */
/*--------------------------------------*/    
    CLEAR_BIT(SPCR_REG,SPCR_MSTR);
    1830:	ad e2       	ldi	r26, 0x2D	; 45
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	ed e2       	ldi	r30, 0x2D	; 45
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	8f 7e       	andi	r24, 0xEF	; 239
    183c:	8c 93       	st	X, r24
/*======================================*/
/*    Select MSB or LSB Send at First   */              // Same With Master Configration.
/*--------------------------------------*/   
    #if ( DATA_ORDER == MSB_FIRST )
        CLEAR_BIT(SPCR_REG,SPCR_DORD);                  // select MSB to be send first
    183e:	ad e2       	ldi	r26, 0x2D	; 45
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	ed e2       	ldi	r30, 0x2D	; 45
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	8f 7d       	andi	r24, 0xDF	; 223
    184a:	8c 93       	st	X, r24
    #endif
/*===========================================*/
/*  Select Clock Polarity Raisinr or Falling */         // Same With Master Configration.
/*-------------------------------------------*/     
    #if ( CLK_POLARITY == RAISING_Leading_Edge )    
        CLEAR_BIT(SPCR_REG,SPCR_CPOL);                  // Select Raising at Leading edge & Falling at Tralling Edge
    184c:	ad e2       	ldi	r26, 0x2D	; 45
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	ed e2       	ldi	r30, 0x2D	; 45
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	87 7f       	andi	r24, 0xF7	; 247
    1858:	8c 93       	st	X, r24
    #endif
/*================================================*/
/*  Select Clock Phase Sample or setup on Leading */    // Same With Master Configration.
/*------------------------------------------------*/  
    #if ( CLK_PHASE == SAMPLE_Leading_Edge )     
        CLEAR_BIT(SPCR_REG,SPCR_CPHA);                  // Select Sampling at leadding edge & Setup at Trailling Edge
    185a:	ad e2       	ldi	r26, 0x2D	; 45
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	ed e2       	ldi	r30, 0x2D	; 45
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	8b 7f       	andi	r24, 0xFB	; 251
    1866:	8c 93       	st	X, r24
        SET_BIT(SPCR_REG,SPCR_CPHA);                    // Select Setup at leadding edge & Sampling at Trailling Edge
    #endif
/*======================================*/
/*              Enable SPI              */
/*--------------------------------------*/        
    SET_BIT(SPCR_REG,SPCR_SPE);                     // Enable SPI
    1868:	ad e2       	ldi	r26, 0x2D	; 45
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	ed e2       	ldi	r30, 0x2D	; 45
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	80 64       	ori	r24, 0x40	; 64
    1874:	8c 93       	st	X, r24
     
}
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <SPI_u8TranceiveData>:
/* Description : Function can Transmit and Recieve Char                                         */                                         
/* Fun. Argument1: Copy_u8Data { Transsmited Data }                                             */
/* Fun. Return : unsigned Char u8  { Recieved Data }                                            */
/************************************************************************************************/
u8 SPI_u8TranceiveData (u8 Copy_u8Data)
{
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	0f 92       	push	r0
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	89 83       	std	Y+1, r24	; 0x01
    /* Transmit */
    // set the data to REG
    SPDR_REG = Copy_u8Data ;
    1888:	ef e2       	ldi	r30, 0x2F	; 47
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	80 83       	st	Z, r24
    // polling
    while( (GET_BIT(SPSR_REG,SPSR_SPIF)) == 0 );
    1890:	ee e2       	ldi	r30, 0x2E	; 46
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	88 23       	and	r24, r24
    1898:	dc f7       	brge	.-10     	; 0x1890 <SPI_u8TranceiveData+0x14>
    // clear the flag
    SET_BIT(SPSR_REG,SPSR_SPIF);
    189a:	ae e2       	ldi	r26, 0x2E	; 46
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	ee e2       	ldi	r30, 0x2E	; 46
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	80 68       	ori	r24, 0x80	; 128
    18a6:	8c 93       	st	X, r24

    /* Recieve */
    return SPDR_REG ;
    18a8:	ef e2       	ldi	r30, 0x2F	; 47
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z

}
    18ae:	0f 90       	pop	r0
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <SPI_voidTransmitData>:
/* Description : Function can Transmit Char                                                     */                                         
/* Fun. Argument1: Copy_u8Data { Transsmited Data }                                             */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void SPI_voidTransmitData (u8 Copy_u8Data)
{
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	0f 92       	push	r0
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	89 83       	std	Y+1, r24	; 0x01
    // set the data to REG
    SPDR_REG = Copy_u8Data ;
    18c2:	ef e2       	ldi	r30, 0x2F	; 47
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	80 83       	st	Z, r24
    // polling
    while( (GET_BIT(SPSR_REG,SPSR_SPIF)) == 0 );
    18ca:	ee e2       	ldi	r30, 0x2E	; 46
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	88 23       	and	r24, r24
    18d2:	dc f7       	brge	.-10     	; 0x18ca <SPI_voidTransmitData+0x14>
    // clear the flag
    SET_BIT(SPSR_REG,SPSR_SPIF);
    18d4:	ae e2       	ldi	r26, 0x2E	; 46
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	ee e2       	ldi	r30, 0x2E	; 46
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	80 68       	ori	r24, 0x80	; 128
    18e0:	8c 93       	st	X, r24
}
    18e2:	0f 90       	pop	r0
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	08 95       	ret

000018ea <SPI_voidRecieveData>:
/* Function Name : SPI_voidRecieveData                                                          */
/* Description : Function can Recieve Char                                                      */                                         
/* Fun. Return : unsigned character ( Data Recived )                                            */
/************************************************************************************************/
u8 SPI_voidRecieveData (void)
{
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    return SPDR_REG ;
    18f2:	ef e2       	ldi	r30, 0x2F	; 47
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
}
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <SPI_voidTranceiveString>:
/* Fun. Argument1: *Copy_Au8TransmitString { Address of array of Char we need Transmit it }     */
/* Fun. Argument2: *Copy_u8RecieveString   { Address of array of Char we need Recieve it }      */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void SPI_voidTranceiveString (u8 *Copy_Au8TransmitString , u8 *Copy_u8RecieveString )
{
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	00 d0       	rcall	.+0      	; 0x1904 <SPI_voidTranceiveString+0x6>
    1904:	00 d0       	rcall	.+0      	; 0x1906 <SPI_voidTranceiveString+0x8>
    1906:	0f 92       	push	r0
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	9b 83       	std	Y+3, r25	; 0x03
    190e:	8a 83       	std	Y+2, r24	; 0x02
    1910:	7d 83       	std	Y+5, r23	; 0x05
    1912:	6c 83       	std	Y+4, r22	; 0x04
    for ( u8 iter=0 ; Copy_Au8TransmitString[iter] != '\0' ; iter++ )
    1914:	19 82       	std	Y+1, r1	; 0x01
    1916:	27 c0       	rjmp	.+78     	; 0x1966 <SPI_voidTranceiveString+0x68>
    {
        /* Send Data */
        // set the data to REG
        SPDR_REG = Copy_Au8TransmitString[iter] ;
    1918:	af e2       	ldi	r26, 0x2F	; 47
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	9b 81       	ldd	r25, Y+3	; 0x03
    1926:	fc 01       	movw	r30, r24
    1928:	e2 0f       	add	r30, r18
    192a:	f3 1f       	adc	r31, r19
    192c:	80 81       	ld	r24, Z
    192e:	8c 93       	st	X, r24
        // polling
        while( (GET_BIT(SPSR_REG,SPSR_SPIF)) == 0 );
    1930:	ee e2       	ldi	r30, 0x2E	; 46
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	88 23       	and	r24, r24
    1938:	dc f7       	brge	.-10     	; 0x1930 <SPI_voidTranceiveString+0x32>
        // clear the flag
        SET_BIT(SPSR_REG,SPSR_SPIF);
    193a:	ae e2       	ldi	r26, 0x2E	; 46
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	ee e2       	ldi	r30, 0x2E	; 46
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	80 68       	ori	r24, 0x80	; 128
    1946:	8c 93       	st	X, r24

        /* Recieve Data */
        Copy_u8RecieveString[iter] = SPDR_REG ;
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	8c 81       	ldd	r24, Y+4	; 0x04
    1950:	9d 81       	ldd	r25, Y+5	; 0x05
    1952:	dc 01       	movw	r26, r24
    1954:	a2 0f       	add	r26, r18
    1956:	b3 1f       	adc	r27, r19
    1958:	ef e2       	ldi	r30, 0x2F	; 47
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	8c 93       	st	X, r24
/* Fun. Argument2: *Copy_u8RecieveString   { Address of array of Char we need Recieve it }      */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void SPI_voidTranceiveString (u8 *Copy_Au8TransmitString , u8 *Copy_u8RecieveString )
{
    for ( u8 iter=0 ; Copy_Au8TransmitString[iter] != '\0' ; iter++ )
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	8f 5f       	subi	r24, 0xFF	; 255
    1964:	89 83       	std	Y+1, r24	; 0x01
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	9b 81       	ldd	r25, Y+3	; 0x03
    1970:	fc 01       	movw	r30, r24
    1972:	e2 0f       	add	r30, r18
    1974:	f3 1f       	adc	r31, r19
    1976:	80 81       	ld	r24, Z
    1978:	88 23       	and	r24, r24
    197a:	71 f6       	brne	.-100    	; 0x1918 <SPI_voidTranceiveString+0x1a>
        SET_BIT(SPSR_REG,SPSR_SPIF);

        /* Recieve Data */
        Copy_u8RecieveString[iter] = SPDR_REG ;
    }
}
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	08 95       	ret

0000198c <SPI_u8AsynTranceiveData>:
/* Description : Function can Transmit and Recieve Data by Interrupt                            */                                         
/* Fun. Argument1: Copy_u8Data { Transsmited Data }                                             */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void SPI_u8AsynTranceiveData (u8 Copy_u8Data)
{
    198c:	df 93       	push	r29
    198e:	cf 93       	push	r28
    1990:	0f 92       	push	r0
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    1996:	89 83       	std	Y+1, r24	; 0x01
 
    SET_BIT(SPCR_REG,SPCR_SPIE);            // Enable SPI Interrupt
    1998:	ad e2       	ldi	r26, 0x2D	; 45
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	ed e2       	ldi	r30, 0x2D	; 45
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	80 68       	ori	r24, 0x80	; 128
    19a4:	8c 93       	st	X, r24
    /* Transmit */
    SPDR_REG = Copy_u8Data ;                // set the data to REG
    19a6:	ef e2       	ldi	r30, 0x2F	; 47
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	80 83       	st	Z, r24
}
    19ae:	0f 90       	pop	r0
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	08 95       	ret

000019b6 <SPI_voidSetCallBack>:
/* Fun. Argument1:{ void (*LocalPointerToFunction) (u8 *Copy_u8RecivedData) }*/
/*                Pointer to function that = Address of application function */
/* Fun. Return : void                                                        */
/*****************************************************************************/
void SPI_voidSetCallBack (  void (*Local_PointerToFunction) (u8 *Copy_u8RecivedData) )
{
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	00 d0       	rcall	.+0      	; 0x19bc <SPI_voidSetCallBack+0x6>
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	9a 83       	std	Y+2, r25	; 0x02
    19c2:	89 83       	std	Y+1, r24	; 0x01
    Global_PF_Vector_12 = Local_PointerToFunction ;
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	9a 81       	ldd	r25, Y+2	; 0x02
    19c8:	90 93 d7 02 	sts	0x02D7, r25
    19cc:	80 93 d6 02 	sts	0x02D6, r24
}
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	cf 91       	pop	r28
    19d6:	df 91       	pop	r29
    19d8:	08 95       	ret

000019da <__vector_12>:
/* Description : ISR Prototype (position 12 on vector table SPI )            */ 
/* Fun. Return : void                                                        */
/*****************************************************************************/
void __vector_12 (void)    __attribute__((signal));
void __vector_12 (void)
{
    19da:	1f 92       	push	r1
    19dc:	0f 92       	push	r0
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	0f 92       	push	r0
    19e2:	11 24       	eor	r1, r1
    19e4:	2f 93       	push	r18
    19e6:	3f 93       	push	r19
    19e8:	4f 93       	push	r20
    19ea:	5f 93       	push	r21
    19ec:	6f 93       	push	r22
    19ee:	7f 93       	push	r23
    19f0:	8f 93       	push	r24
    19f2:	9f 93       	push	r25
    19f4:	af 93       	push	r26
    19f6:	bf 93       	push	r27
    19f8:	ef 93       	push	r30
    19fa:	ff 93       	push	r31
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	00 d0       	rcall	.+0      	; 0x1a02 <__vector_12+0x28>
    1a02:	0f 92       	push	r0
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8Data ;
    // Recieve Data
    Local_u8Data = SPDR_REG ;
    1a08:	ef e2       	ldi	r30, 0x2F	; 47
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	8b 83       	std	Y+3, r24	; 0x03
    u8 *Local_Pu8Data = &Local_u8Data ;
    1a10:	ce 01       	movw	r24, r28
    1a12:	03 96       	adiw	r24, 0x03	; 3
    1a14:	9a 83       	std	Y+2, r25	; 0x02
    1a16:	89 83       	std	Y+1, r24	; 0x01
    Global_PF_Vector_12 ( Local_Pu8Data );      // Call Back Application Function
    1a18:	e0 91 d6 02 	lds	r30, 0x02D6
    1a1c:	f0 91 d7 02 	lds	r31, 0x02D7
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	9a 81       	ldd	r25, Y+2	; 0x02
    1a24:	09 95       	icall
    CLEAR_BIT(SPCR_REG,SPCR_SPIE);              // Disable SPI Interrupt
    1a26:	ad e2       	ldi	r26, 0x2D	; 45
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	ed e2       	ldi	r30, 0x2D	; 45
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	8f 77       	andi	r24, 0x7F	; 127
    1a32:	8c 93       	st	X, r24
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	ff 91       	pop	r31
    1a40:	ef 91       	pop	r30
    1a42:	bf 91       	pop	r27
    1a44:	af 91       	pop	r26
    1a46:	9f 91       	pop	r25
    1a48:	8f 91       	pop	r24
    1a4a:	7f 91       	pop	r23
    1a4c:	6f 91       	pop	r22
    1a4e:	5f 91       	pop	r21
    1a50:	4f 91       	pop	r20
    1a52:	3f 91       	pop	r19
    1a54:	2f 91       	pop	r18
    1a56:	0f 90       	pop	r0
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	0f 90       	pop	r0
    1a5c:	1f 90       	pop	r1
    1a5e:	18 95       	reti

00001a60 <I2C_voidMasterInit>:
/*===========================================================================================================================*/
/*=================================================  [ Master Functions ]   =================================================*/
/*===========================================================================================================================*/
/* Set Master Address to 0 if master will not be addressed */
void I2C_voidMasterInit (u8 Copy_u8MasterAddress)
{
    1a60:	df 93       	push	r29
    1a62:	cf 93       	push	r28
    1a64:	0f 92       	push	r0
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
    1a6a:	89 83       	std	Y+1, r24	; 0x01
    Enable_ACK ();           // Enable ACK  
    1a6c:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <Enable_ACK>
    /*  TWBR = (( CPU Clock frequency / SCL frequency ) - 16) / ( 2 * 4^TWPS)        */ 
    /*  TWBR = (( 8000000 / 400000 ) - 16) / ( 2 * 4^(0) )                           */ 
    /*  TWBR = ( 20 - 16 ) / ( 2 * 1 ) = (4) / (2)                                   */
    /*  TWBR = 2                                                                     */
    /*===============================================================================*/
    TWBR_REG = 2 ;                        // Set TWBR with vale => 400 KHz ( TWBR = 2 )
    1a70:	e0 e2       	ldi	r30, 0x20	; 32
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	82 e0       	ldi	r24, 0x02	; 2
    1a76:	80 83       	st	Z, r24
    // Set prescaller == 1 (clr TWSR 0,1)
    CLEAR_BIT(TWSR_REG,TWSR_TWPS0);
    1a78:	a1 e2       	ldi	r26, 0x21	; 33
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e1 e2       	ldi	r30, 0x21	; 33
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	8e 7f       	andi	r24, 0xFE	; 254
    1a84:	8c 93       	st	X, r24
    CLEAR_BIT(TWSR_REG,TWSR_TWPS1);
    1a86:	a1 e2       	ldi	r26, 0x21	; 33
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e1 e2       	ldi	r30, 0x21	; 33
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	8d 7f       	andi	r24, 0xFD	; 253
    1a92:	8c 93       	st	X, r24
    /*Check if the master node will be addressed or not*/
	if( Copy_u8MasterAddress == 0x00 )
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	88 23       	and	r24, r24
    1a98:	29 f0       	breq	.+10     	; 0x1aa4 <I2C_voidMasterInit+0x44>
		/*Do Nothing*/
	}
	else
	{
		/*Set The Required Address to The Master*/
		TWAR_REG = (Copy_u8MasterAddress << 1);
    1a9a:	e2 e2       	ldi	r30, 0x22	; 34
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	88 0f       	add	r24, r24
    1aa2:	80 83       	st	Z, r24
	}
    // Enable I2C  ( set TWCR 2 )
    SET_BIT(TWCR_REG,TWCR_TWEN);
    1aa4:	a6 e5       	ldi	r26, 0x56	; 86
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e6 e5       	ldi	r30, 0x56	; 86
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	84 60       	ori	r24, 0x04	; 4
    1ab0:	8c 93       	st	X, r24
}
    1ab2:	0f 90       	pop	r0
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <I2C_Master_u8StartCondition>:
/*===========================================================================================================================*/
Error_t I2C_Master_u8StartCondition (void)
{
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	0f 92       	push	r0
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    Error_t Local_Error = I2C_NO_Error ;
    1ac4:	19 82       	std	Y+1, r1	; 0x01
    SET_BIT(TWCR_REG,TWCR_TWSTA);                              // Start condition ( Set TWCR 5)
    1ac6:	a6 e5       	ldi	r26, 0x56	; 86
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e6 e5       	ldi	r30, 0x56	; 86
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	80 62       	ori	r24, 0x20	; 32
    1ad2:	8c 93       	st	X, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                              // Clear flag ( Set TWCR 7 )
    1ad4:	a6 e5       	ldi	r26, 0x56	; 86
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e6 e5       	ldi	r30, 0x56	; 86
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	80 68       	ori	r24, 0x80	; 128
    1ae0:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );            // Wait for flag ( TWCR 7 == 0 )
    1ae2:	e6 e5       	ldi	r30, 0x56	; 86
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	88 23       	and	r24, r24
    1aea:	dc f7       	brge	.-10     	; 0x1ae2 <I2C_Master_u8StartCondition+0x28>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_START_ACK )    // Check status code == start condition ( TWSR & 0xf8 ) == 0x08
    1aec:	e1 e2       	ldi	r30, 0x21	; 33
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	88 2f       	mov	r24, r24
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	88 7f       	andi	r24, 0xF8	; 248
    1af8:	90 70       	andi	r25, 0x00	; 0
    1afa:	88 30       	cpi	r24, 0x08	; 8
    1afc:	91 05       	cpc	r25, r1
    1afe:	11 f0       	breq	.+4      	; 0x1b04 <I2C_Master_u8StartCondition+0x4a>
    {
        Local_Error = I2C_Error_Master_StartCond_ACK ; 
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b06:	0f 90       	pop	r0
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	08 95       	ret

00001b0e <I2C_Master_u8ReStartCondition>:
/*===========================================================================================================================*/
Error_t I2C_Master_u8ReStartCondition (void)
{
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	0f 92       	push	r0
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    Error_t Local_Error = I2C_NO_Error ;
    1b18:	19 82       	std	Y+1, r1	; 0x01
    SET_BIT(TWCR_REG,TWCR_TWSTA);                                   // Start condition ( Set TWCR 5)
    1b1a:	a6 e5       	ldi	r26, 0x56	; 86
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e6 e5       	ldi	r30, 0x56	; 86
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	80 62       	ori	r24, 0x20	; 32
    1b26:	8c 93       	st	X, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                   // Clear flag ( Set TWCR 7 )
    1b28:	a6 e5       	ldi	r26, 0x56	; 86
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e6 e5       	ldi	r30, 0x56	; 86
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	80 68       	ori	r24, 0x80	; 128
    1b34:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                 // Wait for flag ( TWCR 7 == 0 )
    1b36:	e6 e5       	ldi	r30, 0x56	; 86
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	88 23       	and	r24, r24
    1b3e:	dc f7       	brge	.-10     	; 0x1b36 <I2C_Master_u8ReStartCondition+0x28>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_REP_START_ACK )     // Check status code == Repeat condition ( TWSR & 0xf8 ) == 0x10 
    1b40:	e1 e2       	ldi	r30, 0x21	; 33
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	88 2f       	mov	r24, r24
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	88 7f       	andi	r24, 0xF8	; 248
    1b4c:	90 70       	andi	r25, 0x00	; 0
    1b4e:	80 31       	cpi	r24, 0x10	; 16
    1b50:	91 05       	cpc	r25, r1
    1b52:	11 f0       	breq	.+4      	; 0x1b58 <I2C_Master_u8ReStartCondition+0x4a>
    {
        Local_Error = I2C_Error_Master_ReStartCond_ACK ; 
    1b54:	82 e0       	ldi	r24, 0x02	; 2
    1b56:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b5a:	0f 90       	pop	r0
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <I2C_Master_u8SendSLA_Write_ACK>:
/*===========================================================================================================================*/
Error_t I2C_Master_u8SendSLA_Write_ACK (u8 Copy_u8SlaveAddress)
{
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <I2C_Master_u8SendSLA_Write_ACK+0x6>
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    1b6e:	19 82       	std	Y+1, r1	; 0x01
    TWDR_REG = (Copy_u8SlaveAddress<<1) ;                           // Write 7 bits slave address ( TWDR == address<<1 )
    1b70:	e3 e2       	ldi	r30, 0x23	; 35
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	88 0f       	add	r24, r24
    1b78:	80 83       	st	Z, r24
    CLEAR_BIT(TWDR_REG,TWDR_TWD0);                                  // Write condition ( CLEAR TWDR 0 )
    1b7a:	a3 e2       	ldi	r26, 0x23	; 35
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e3 e2       	ldi	r30, 0x23	; 35
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	8e 7f       	andi	r24, 0xFE	; 254
    1b86:	8c 93       	st	X, r24
    CLEAR_BIT(TWCR_REG,TWCR_TWSTA);                                 // Clear start condition bit ( TWCR 5 ) - for sure
    1b88:	a6 e5       	ldi	r26, 0x56	; 86
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e6 e5       	ldi	r30, 0x56	; 86
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	8f 7d       	andi	r24, 0xDF	; 223
    1b94:	8c 93       	st	X, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                   // Clear flag ( Set TWCR 7 )
    1b96:	a6 e5       	ldi	r26, 0x56	; 86
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e6 e5       	ldi	r30, 0x56	; 86
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	80 68       	ori	r24, 0x80	; 128
    1ba2:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                 // Wait for flag ( TWCR 7 == 0 )
    1ba4:	e6 e5       	ldi	r30, 0x56	; 86
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	88 23       	and	r24, r24
    1bac:	dc f7       	brge	.-10     	; 0x1ba4 <I2C_Master_u8SendSLA_Write_ACK+0x42>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_SLA_Write_ACK )     // Check status code == SLA + Write + ACK == (0x18)
    1bae:	e1 e2       	ldi	r30, 0x21	; 33
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	88 2f       	mov	r24, r24
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	88 7f       	andi	r24, 0xF8	; 248
    1bba:	90 70       	andi	r25, 0x00	; 0
    1bbc:	88 31       	cpi	r24, 0x18	; 24
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	11 f0       	breq	.+4      	; 0x1bc6 <I2C_Master_u8SendSLA_Write_ACK+0x64>
    {
        Local_Error = I2C_Error_Master_SendSLA_Write_ACK ; 
    1bc2:	83 e0       	ldi	r24, 0x03	; 3
    1bc4:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <I2C_Master_u8SendSLA_Write_NOTACK>:
/*===========================================================================================================================*/
Error_t I2C_Master_u8SendSLA_Write_NOTACK (u8 Copy_u8SlaveAddress)
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <I2C_Master_u8SendSLA_Write_NOTACK+0x6>
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    1bde:	19 82       	std	Y+1, r1	; 0x01
    Disable_ACK ();                                                    // Disable ACK
    1be0:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <Disable_ACK>
    TWDR_REG = (Copy_u8SlaveAddress<<1) ;                              // Write 7 bits slave address ( TWDR == address<<1 )
    1be4:	e3 e2       	ldi	r30, 0x23	; 35
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	88 0f       	add	r24, r24
    1bec:	80 83       	st	Z, r24
    CLEAR_BIT(TWDR_REG,TWDR_TWD0);                                     // Write condition ( CLEAR TWDR 0 )
    1bee:	a3 e2       	ldi	r26, 0x23	; 35
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e3 e2       	ldi	r30, 0x23	; 35
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	8e 7f       	andi	r24, 0xFE	; 254
    1bfa:	8c 93       	st	X, r24
    CLEAR_BIT(TWCR_REG,TWCR_TWSTA);                                    // Clear start condition bit ( TWCR 5 ) - for sure
    1bfc:	a6 e5       	ldi	r26, 0x56	; 86
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e6 e5       	ldi	r30, 0x56	; 86
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	8f 7d       	andi	r24, 0xDF	; 223
    1c08:	8c 93       	st	X, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                      // Clear flag ( Set TWCR 7 )
    1c0a:	a6 e5       	ldi	r26, 0x56	; 86
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	e6 e5       	ldi	r30, 0x56	; 86
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	80 68       	ori	r24, 0x80	; 128
    1c16:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                    // Wait for flag ( TWCR 7 == 0 )
    1c18:	e6 e5       	ldi	r30, 0x56	; 86
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	88 23       	and	r24, r24
    1c20:	dc f7       	brge	.-10     	; 0x1c18 <I2C_Master_u8SendSLA_Write_NOTACK+0x46>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_SLA_Write_NOTACK )     // Check status code == SLA + Write + NOTACK == (0x20)
    1c22:	e1 e2       	ldi	r30, 0x21	; 33
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	88 2f       	mov	r24, r24
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	88 7f       	andi	r24, 0xF8	; 248
    1c2e:	90 70       	andi	r25, 0x00	; 0
    1c30:	80 32       	cpi	r24, 0x20	; 32
    1c32:	91 05       	cpc	r25, r1
    1c34:	11 f0       	breq	.+4      	; 0x1c3a <I2C_Master_u8SendSLA_Write_NOTACK+0x68>
    {
        Local_Error = I2C_Error_Master_SendSLA_Write_NOTACK ; 
    1c36:	84 e0       	ldi	r24, 0x04	; 4
    1c38:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	cf 91       	pop	r28
    1c42:	df 91       	pop	r29
    1c44:	08 95       	ret

00001c46 <I2C_Master_u8SendSLA_Read_ACK>:
/*===========================================================================================================================*/
Error_t I2C_Master_u8SendSLA_Read_ACK (u8 Copy_u8SlaveAddress)
{
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <I2C_Master_u8SendSLA_Read_ACK+0x6>
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    1c52:	19 82       	std	Y+1, r1	; 0x01
    TWDR_REG = (Copy_u8SlaveAddress<<1) ;                              // Write 7 bits slave address ( TWDR == address<<1 )
    1c54:	e3 e2       	ldi	r30, 0x23	; 35
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5a:	88 0f       	add	r24, r24
    1c5c:	80 83       	st	Z, r24
    SET_BIT(TWDR_REG,TWDR_TWD0);                                       // Read condition ( SET TWDR 0 )
    1c5e:	a3 e2       	ldi	r26, 0x23	; 35
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	e3 e2       	ldi	r30, 0x23	; 35
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	81 60       	ori	r24, 0x01	; 1
    1c6a:	8c 93       	st	X, r24
    CLEAR_BIT(TWCR_REG,TWCR_TWSTA);                                    // Clear start condition bit ( TWCR 5 ) - for sure
    1c6c:	a6 e5       	ldi	r26, 0x56	; 86
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	e6 e5       	ldi	r30, 0x56	; 86
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	8f 7d       	andi	r24, 0xDF	; 223
    1c78:	8c 93       	st	X, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                      // Clear flag ( Set TWCR 7 )
    1c7a:	a6 e5       	ldi	r26, 0x56	; 86
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	e6 e5       	ldi	r30, 0x56	; 86
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	80 68       	ori	r24, 0x80	; 128
    1c86:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                    // Wait for flag ( TWCR 7 == 0 )
    1c88:	e6 e5       	ldi	r30, 0x56	; 86
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	88 23       	and	r24, r24
    1c90:	dc f7       	brge	.-10     	; 0x1c88 <I2C_Master_u8SendSLA_Read_ACK+0x42>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_SLA_Read_ACK )         // Check status code == SLA + Read + ACK == (0x40)
    1c92:	e1 e2       	ldi	r30, 0x21	; 33
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	88 2f       	mov	r24, r24
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	88 7f       	andi	r24, 0xF8	; 248
    1c9e:	90 70       	andi	r25, 0x00	; 0
    1ca0:	80 34       	cpi	r24, 0x40	; 64
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	11 f0       	breq	.+4      	; 0x1caa <I2C_Master_u8SendSLA_Read_ACK+0x64>
    {
        Local_Error = I2C_Error_Master_SendSLA_Read_ACK ; 
    1ca6:	85 e0       	ldi	r24, 0x05	; 5
    1ca8:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	cf 91       	pop	r28
    1cb2:	df 91       	pop	r29
    1cb4:	08 95       	ret

00001cb6 <I2C_Master_u8SendSLA_Read_NOTACK>:
/*===========================================================================================================================*/
Error_t I2C_Master_u8SendSLA_Read_NOTACK (u8 Copy_u8SlaveAddress)
{
    1cb6:	df 93       	push	r29
    1cb8:	cf 93       	push	r28
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <I2C_Master_u8SendSLA_Read_NOTACK+0x6>
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    1cc2:	19 82       	std	Y+1, r1	; 0x01
    Disable_ACK ();                                                    // Disable ACK 
    1cc4:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <Disable_ACK>
    TWDR_REG = (Copy_u8SlaveAddress<<1) ;                              // Write 7 bits slave address ( TWDR == address<<1 )
    1cc8:	e3 e2       	ldi	r30, 0x23	; 35
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	88 0f       	add	r24, r24
    1cd0:	80 83       	st	Z, r24
    SET_BIT(TWDR_REG,TWDR_TWD0);                                       // Read condition ( SET TWDR 0 )
    1cd2:	a3 e2       	ldi	r26, 0x23	; 35
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	e3 e2       	ldi	r30, 0x23	; 35
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	81 60       	ori	r24, 0x01	; 1
    1cde:	8c 93       	st	X, r24
    CLEAR_BIT(TWCR_REG,TWCR_TWSTA);                                    // Clear start condition bit ( TWCR 5 ) - for sure
    1ce0:	a6 e5       	ldi	r26, 0x56	; 86
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e6 e5       	ldi	r30, 0x56	; 86
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	8f 7d       	andi	r24, 0xDF	; 223
    1cec:	8c 93       	st	X, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                      // Clear flag ( Set TWCR 7 )
    1cee:	a6 e5       	ldi	r26, 0x56	; 86
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	e6 e5       	ldi	r30, 0x56	; 86
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	80 68       	ori	r24, 0x80	; 128
    1cfa:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                    // Wait for flag ( TWCR 7 == 0 )
    1cfc:	e6 e5       	ldi	r30, 0x56	; 86
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	88 23       	and	r24, r24
    1d04:	dc f7       	brge	.-10     	; 0x1cfc <I2C_Master_u8SendSLA_Read_NOTACK+0x46>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_SLA_Read_NOTACK )      // Check status code == SLA + Read + NOTACK == (0x48)
    1d06:	e1 e2       	ldi	r30, 0x21	; 33
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	88 2f       	mov	r24, r24
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	88 7f       	andi	r24, 0xF8	; 248
    1d12:	90 70       	andi	r25, 0x00	; 0
    1d14:	88 34       	cpi	r24, 0x48	; 72
    1d16:	91 05       	cpc	r25, r1
    1d18:	11 f0       	breq	.+4      	; 0x1d1e <I2C_Master_u8SendSLA_Read_NOTACK+0x68>
    {
        Local_Error = I2C_Error_Master_SendSLA_Read_NOTACK ; 
    1d1a:	86 e0       	ldi	r24, 0x06	; 6
    1d1c:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	cf 91       	pop	r28
    1d26:	df 91       	pop	r29
    1d28:	08 95       	ret

00001d2a <I2C_Master_u8WriteDataByte_ACK>:
/*===========================================================================================================================*/
Error_t I2C_Master_u8WriteDataByte_ACK (u8 Copy_u8WriteData)
{
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	00 d0       	rcall	.+0      	; 0x1d30 <I2C_Master_u8WriteDataByte_ACK+0x6>
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
    1d34:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    1d36:	19 82       	std	Y+1, r1	; 0x01
    TWDR_REG = Copy_u8WriteData ;                                      // Write data in TWDR
    1d38:	e3 e2       	ldi	r30, 0x23	; 35
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	80 83       	st	Z, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                      // Clear flag ( Set TWCR 7 )
    1d40:	a6 e5       	ldi	r26, 0x56	; 86
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e6 e5       	ldi	r30, 0x56	; 86
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	80 68       	ori	r24, 0x80	; 128
    1d4c:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                    // Wait for flag ( TWCR 7 == 0 )
    1d4e:	e6 e5       	ldi	r30, 0x56	; 86
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	88 23       	and	r24, r24
    1d56:	dc f7       	brge	.-10     	; 0x1d4e <I2C_Master_u8WriteDataByte_ACK+0x24>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_WR_DataByte_ACK )      // Check status code == Master Send Data + ACK == (0x28)
    1d58:	e1 e2       	ldi	r30, 0x21	; 33
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	88 2f       	mov	r24, r24
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	88 7f       	andi	r24, 0xF8	; 248
    1d64:	90 70       	andi	r25, 0x00	; 0
    1d66:	88 32       	cpi	r24, 0x28	; 40
    1d68:	91 05       	cpc	r25, r1
    1d6a:	11 f0       	breq	.+4      	; 0x1d70 <I2C_Master_u8WriteDataByte_ACK+0x46>
    {
        Local_Error = I2C_Error_Master_WriteDataByte_ACK ; 
    1d6c:	87 e0       	ldi	r24, 0x07	; 7
    1d6e:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	cf 91       	pop	r28
    1d78:	df 91       	pop	r29
    1d7a:	08 95       	ret

00001d7c <I2C_Master_u8WriteDataByte_NOTACK>:
/*===========================================================================================================================*/
Error_t I2C_Master_u8WriteDataByte_NOTACK (u8 Copy_u8WriteData)
{
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	00 d0       	rcall	.+0      	; 0x1d82 <I2C_Master_u8WriteDataByte_NOTACK+0x6>
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    1d88:	19 82       	std	Y+1, r1	; 0x01
    Disable_ACK ();                                                    // Disable ACK 
    1d8a:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <Disable_ACK>
    TWDR_REG = Copy_u8WriteData ;                                      // Write data in TWDR
    1d8e:	e3 e2       	ldi	r30, 0x23	; 35
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	80 83       	st	Z, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                      // Clear flag ( Set TWCR 7 )
    1d96:	a6 e5       	ldi	r26, 0x56	; 86
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e6 e5       	ldi	r30, 0x56	; 86
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	80 68       	ori	r24, 0x80	; 128
    1da2:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                    // Wait for flag ( TWCR 7 == 0 )
    1da4:	e6 e5       	ldi	r30, 0x56	; 86
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	88 23       	and	r24, r24
    1dac:	dc f7       	brge	.-10     	; 0x1da4 <I2C_Master_u8WriteDataByte_NOTACK+0x28>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_WR_DataByte_NOTACK )   // Check status code == Master Send Data + NOTACK == (0x30)
    1dae:	e1 e2       	ldi	r30, 0x21	; 33
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	88 2f       	mov	r24, r24
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	88 7f       	andi	r24, 0xF8	; 248
    1dba:	90 70       	andi	r25, 0x00	; 0
    1dbc:	80 33       	cpi	r24, 0x30	; 48
    1dbe:	91 05       	cpc	r25, r1
    1dc0:	11 f0       	breq	.+4      	; 0x1dc6 <I2C_Master_u8WriteDataByte_NOTACK+0x4a>
    {
        Local_Error = I2C_Error_Master_WriteDataByte_NOTACK ; 
    1dc2:	88 e0       	ldi	r24, 0x08	; 8
    1dc4:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	08 95       	ret

00001dd2 <I2C_Master_u8ReadDataByte_ACK>:
/*===========================================================================================================================*/
Error_t I2C_Master_u8ReadDataByte_ACK (u8 *Copy_Pu8ReadData)
{
    1dd2:	df 93       	push	r29
    1dd4:	cf 93       	push	r28
    1dd6:	00 d0       	rcall	.+0      	; 0x1dd8 <I2C_Master_u8ReadDataByte_ACK+0x6>
    1dd8:	0f 92       	push	r0
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
    1dde:	9b 83       	std	Y+3, r25	; 0x03
    1de0:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    1de2:	19 82       	std	Y+1, r1	; 0x01
    SET_BIT(TWCR_REG,TWCR_TWINT);                                      // Clear flag ( Set TWCR 7 )
    1de4:	a6 e5       	ldi	r26, 0x56	; 86
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e6 e5       	ldi	r30, 0x56	; 86
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	80 68       	ori	r24, 0x80	; 128
    1df0:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                    // Wait for flag ( TWCR 7 == 0 )
    1df2:	e6 e5       	ldi	r30, 0x56	; 86
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	88 23       	and	r24, r24
    1dfa:	dc f7       	brge	.-10     	; 0x1df2 <I2C_Master_u8ReadDataByte_ACK+0x20>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_RD_DataByte_ACK )      // Check status code == Master Read Data + ACK == (0x50)
    1dfc:	e1 e2       	ldi	r30, 0x21	; 33
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	88 2f       	mov	r24, r24
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	88 7f       	andi	r24, 0xF8	; 248
    1e08:	90 70       	andi	r25, 0x00	; 0
    1e0a:	80 35       	cpi	r24, 0x50	; 80
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	11 f0       	breq	.+4      	; 0x1e14 <I2C_Master_u8ReadDataByte_ACK+0x42>
    {
        Local_Error = I2C_Error_Master_ReadDataByte_ACK ; 
    1e10:	89 e0       	ldi	r24, 0x09	; 9
    1e12:	89 83       	std	Y+1, r24	; 0x01
    }
    *Copy_Pu8ReadData = TWDR_REG ;                                     // Read Data From Reg TWDR
    1e14:	e3 e2       	ldi	r30, 0x23	; 35
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e1c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e1e:	80 83       	st	Z, r24
    return Local_Error ;
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	cf 91       	pop	r28
    1e2a:	df 91       	pop	r29
    1e2c:	08 95       	ret

00001e2e <I2C_Master_u8ReadDataByte_NOTACK>:
/*===========================================================================================================================*/
Error_t I2C_Master_u8ReadDataByte_NOTACK (u8 *Copy_Pu8ReadData)
{
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <I2C_Master_u8ReadDataByte_NOTACK+0x6>
    1e34:	0f 92       	push	r0
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
    1e3a:	9b 83       	std	Y+3, r25	; 0x03
    1e3c:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    1e3e:	19 82       	std	Y+1, r1	; 0x01
    Disable_ACK ();                                                    // Disable ACK 
    1e40:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <Disable_ACK>
    SET_BIT(TWCR_REG,TWCR_TWINT);                                      // Clear flag ( Set TWCR 7 )
    1e44:	a6 e5       	ldi	r26, 0x56	; 86
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e6 e5       	ldi	r30, 0x56	; 86
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	80 68       	ori	r24, 0x80	; 128
    1e50:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                    // Wait for flag ( TWCR 7 == 0 )
    1e52:	e6 e5       	ldi	r30, 0x56	; 86
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	88 23       	and	r24, r24
    1e5a:	dc f7       	brge	.-10     	; 0x1e52 <I2C_Master_u8ReadDataByte_NOTACK+0x24>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_RD_DataByte_NOTACK )   // Check status code == Master Read Data + NOTACK == (0x58)
    1e5c:	e1 e2       	ldi	r30, 0x21	; 33
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	88 2f       	mov	r24, r24
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	88 7f       	andi	r24, 0xF8	; 248
    1e68:	90 70       	andi	r25, 0x00	; 0
    1e6a:	88 35       	cpi	r24, 0x58	; 88
    1e6c:	91 05       	cpc	r25, r1
    1e6e:	11 f0       	breq	.+4      	; 0x1e74 <I2C_Master_u8ReadDataByte_NOTACK+0x46>
    {
        Local_Error = I2C_Error_Master_ReadDataByte_NOTACK ; 
    1e70:	8a e0       	ldi	r24, 0x0A	; 10
    1e72:	89 83       	std	Y+1, r24	; 0x01
    }
    *Copy_Pu8ReadData = TWDR_REG ;                                     // Read Data From Reg TWDR
    1e74:	e3 e2       	ldi	r30, 0x23	; 35
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e7c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e7e:	80 83       	st	Z, r24
    return Local_Error ;
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <I2C_Master_voidStopCondition>:
/*===========================================================================================================================*/
void I2C_Master_voidStopCondition (void)
{
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TWCR_REG,TWCR_TWSTO);               // Stop condition ( Set TWCR 4 )
    1e96:	a6 e5       	ldi	r26, 0x56	; 86
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	e6 e5       	ldi	r30, 0x56	; 86
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	80 61       	ori	r24, 0x10	; 16
    1ea2:	8c 93       	st	X, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);               // Clear flag ( Set TWCR 7 )  
    1ea4:	a6 e5       	ldi	r26, 0x56	; 86
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e6 e5       	ldi	r30, 0x56	; 86
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	80 68       	ori	r24, 0x80	; 128
    1eb0:	8c 93       	st	X, r24
}
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	08 95       	ret

00001eb8 <I2C_voidSlaveInit>:
/*===========================================================================================================================*/
/*=================================================   [ Slave Functions ]   =================================================*/
/*===========================================================================================================================*/
/*===========================================================================================================================*/
void I2C_voidSlaveInit (u8 Copy_u8SlaveAddress)
{
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	0f 92       	push	r0
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	89 83       	std	Y+1, r24	; 0x01
    TWAR_REG = Copy_u8SlaveAddress << 1 ;       // Set slave address in ( TWAR = address<<1 )
    1ec4:	e2 e2       	ldi	r30, 0x22	; 34
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	88 0f       	add	r24, r24
    1ecc:	80 83       	st	Z, r24
    Enable_ACK();                               // Enable ACK  ( set TWCR 6 )
    1ece:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <Enable_ACK>
    SET_BIT(TWCR_REG,TWCR_TWEN);                // Enable I2C  ( set TWCR 2 )
    1ed2:	a6 e5       	ldi	r26, 0x56	; 86
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e6 e5       	ldi	r30, 0x56	; 86
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	84 60       	ori	r24, 0x04	; 4
    1ede:	8c 93       	st	X, r24
}
    1ee0:	0f 90       	pop	r0
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <I2C_SLAVE_u8OwnSLA_Write_Recieved_ACK>:
/*===========================================================================================================================*/
Error_t I2C_SLAVE_u8OwnSLA_Write_Recieved_ACK (void)
{
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	0f 92       	push	r0
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    Error_t Local_Error = I2C_NO_Error ;
    1ef2:	19 82       	std	Y+1, r1	; 0x01
    SET_BIT(TWCR_REG,TWCR_TWINT);                                            // Clear flag ( Set TWCR 7 )
    1ef4:	a6 e5       	ldi	r26, 0x56	; 86
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e6 e5       	ldi	r30, 0x56	; 86
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	80 68       	ori	r24, 0x80	; 128
    1f00:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                          // Wait for flag ( TWCR 7 == 0 )
    1f02:	e6 e5       	ldi	r30, 0x56	; 86
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	88 23       	and	r24, r24
    1f0a:	dc f7       	brge	.-10     	; 0x1f02 <I2C_SLAVE_u8OwnSLA_Write_Recieved_ACK+0x1a>
    if ( (TWSR_REG & STATUS_BIT_MASK) != SLAVE_OwnSLA_Write_Recieved_ACK )   // Check status code == Own Slave Address + Write + ACK == (0x60)
    1f0c:	e1 e2       	ldi	r30, 0x21	; 33
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	88 2f       	mov	r24, r24
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	88 7f       	andi	r24, 0xF8	; 248
    1f18:	90 70       	andi	r25, 0x00	; 0
    1f1a:	80 36       	cpi	r24, 0x60	; 96
    1f1c:	91 05       	cpc	r25, r1
    1f1e:	11 f0       	breq	.+4      	; 0x1f24 <I2C_SLAVE_u8OwnSLA_Write_Recieved_ACK+0x3c>
    {
        Local_Error = I2C_Error_Slave_OwnSLA_Write_ACK ; 
    1f20:	8b e0       	ldi	r24, 0x0B	; 11
    1f22:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f26:	0f 90       	pop	r0
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <I2C_SLAVE_u8OwnSLA_Read_Recieved_ACK>:
/*===========================================================================================================================*/
Error_t I2C_SLAVE_u8OwnSLA_Read_Recieved_ACK (void)
{
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	0f 92       	push	r0
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    Error_t Local_Error = I2C_NO_Error ;
    1f38:	19 82       	std	Y+1, r1	; 0x01
    SET_BIT(TWCR_REG,TWCR_TWINT);                                            // Clear flag ( Set TWCR 7 )
    1f3a:	a6 e5       	ldi	r26, 0x56	; 86
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	e6 e5       	ldi	r30, 0x56	; 86
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	80 68       	ori	r24, 0x80	; 128
    1f46:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                          // Wait for flag ( TWCR 7 == 0 )
    1f48:	e6 e5       	ldi	r30, 0x56	; 86
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	88 23       	and	r24, r24
    1f50:	dc f7       	brge	.-10     	; 0x1f48 <I2C_SLAVE_u8OwnSLA_Read_Recieved_ACK+0x1a>
    if ( (TWSR_REG & STATUS_BIT_MASK) != SLAVE_OwnSLA_Read_Recieved_ACK )    // Check status code == Own Slave Address + Read + ACK == (0xA8)
    1f52:	e1 e2       	ldi	r30, 0x21	; 33
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	88 2f       	mov	r24, r24
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	88 7f       	andi	r24, 0xF8	; 248
    1f5e:	90 70       	andi	r25, 0x00	; 0
    1f60:	88 3a       	cpi	r24, 0xA8	; 168
    1f62:	91 05       	cpc	r25, r1
    1f64:	11 f0       	breq	.+4      	; 0x1f6a <I2C_SLAVE_u8OwnSLA_Read_Recieved_ACK+0x3c>
    {
        Local_Error = I2C_Error_Slave_OwnSLA_Read_ACK ; 
    1f66:	8c e0       	ldi	r24, 0x0C	; 12
    1f68:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f6c:	0f 90       	pop	r0
    1f6e:	cf 91       	pop	r28
    1f70:	df 91       	pop	r29
    1f72:	08 95       	ret

00001f74 <I2C_SLAVE_u8DataByteRecieved_ACK>:
/*===========================================================================================================================*/
Error_t I2C_SLAVE_u8DataByteRecieved_ACK (u8 *Copy_Pu8RecievedData)
{
    1f74:	df 93       	push	r29
    1f76:	cf 93       	push	r28
    1f78:	00 d0       	rcall	.+0      	; 0x1f7a <I2C_SLAVE_u8DataByteRecieved_ACK+0x6>
    1f7a:	0f 92       	push	r0
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	9b 83       	std	Y+3, r25	; 0x03
    1f82:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    1f84:	19 82       	std	Y+1, r1	; 0x01
    SET_BIT(TWCR_REG,TWCR_TWINT);                                            // Clear flag ( Set TWCR 7 )
    1f86:	a6 e5       	ldi	r26, 0x56	; 86
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e6 e5       	ldi	r30, 0x56	; 86
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	80 68       	ori	r24, 0x80	; 128
    1f92:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                          // Wait for flag ( TWCR 7 == 0 )
    1f94:	e6 e5       	ldi	r30, 0x56	; 86
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	88 23       	and	r24, r24
    1f9c:	dc f7       	brge	.-10     	; 0x1f94 <I2C_SLAVE_u8DataByteRecieved_ACK+0x20>
    if ( (TWSR_REG & STATUS_BIT_MASK) != SLAVE_DataByte_Recieved_ACK )       // Check status code == Data Byte Recived + ACK  == (0x80)
    1f9e:	e1 e2       	ldi	r30, 0x21	; 33
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	88 2f       	mov	r24, r24
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	88 7f       	andi	r24, 0xF8	; 248
    1faa:	90 70       	andi	r25, 0x00	; 0
    1fac:	80 38       	cpi	r24, 0x80	; 128
    1fae:	91 05       	cpc	r25, r1
    1fb0:	11 f0       	breq	.+4      	; 0x1fb6 <I2C_SLAVE_u8DataByteRecieved_ACK+0x42>
    {
        Local_Error = I2C_Error_Slave_DataByteRecieved_ACK ; 
    1fb2:	8d e0       	ldi	r24, 0x0D	; 13
    1fb4:	89 83       	std	Y+1, r24	; 0x01
    }
    *Copy_Pu8RecievedData = TWDR_REG ;                                       // Read Data From Reg TWDR 
    1fb6:	e3 e2       	ldi	r30, 0x23	; 35
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	ea 81       	ldd	r30, Y+2	; 0x02
    1fbe:	fb 81       	ldd	r31, Y+3	; 0x03
    1fc0:	80 83       	st	Z, r24
    return Local_Error ;
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	08 95       	ret

00001fd0 <I2C_SLAVE_u8DataByteRecieved_NOTACK>:
/*===========================================================================================================================*/
Error_t I2C_SLAVE_u8DataByteRecieved_NOTACK (u8 *Copy_Pu8RecievedData)
{
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	00 d0       	rcall	.+0      	; 0x1fd6 <I2C_SLAVE_u8DataByteRecieved_NOTACK+0x6>
    1fd6:	0f 92       	push	r0
    1fd8:	cd b7       	in	r28, 0x3d	; 61
    1fda:	de b7       	in	r29, 0x3e	; 62
    1fdc:	9b 83       	std	Y+3, r25	; 0x03
    1fde:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;    
    1fe0:	19 82       	std	Y+1, r1	; 0x01
    Disable_ACK ();                                                             // Disable ACK 
    1fe2:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <Disable_ACK>
    SET_BIT(TWCR_REG,TWCR_TWINT);                                               // Clear flag ( Set TWCR 7 )
    1fe6:	a6 e5       	ldi	r26, 0x56	; 86
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	e6 e5       	ldi	r30, 0x56	; 86
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	80 68       	ori	r24, 0x80	; 128
    1ff2:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                             // Wait for flag ( TWCR 7 == 0 )
    1ff4:	e6 e5       	ldi	r30, 0x56	; 86
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	88 23       	and	r24, r24
    1ffc:	dc f7       	brge	.-10     	; 0x1ff4 <I2C_SLAVE_u8DataByteRecieved_NOTACK+0x24>
    if ( (TWSR_REG & STATUS_BIT_MASK) != SLAVE_DataByte_Recieved_NOTACK )       // Check status code == Data Byte Recived + NOTACK  == (0x88)
    1ffe:	e1 e2       	ldi	r30, 0x21	; 33
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	88 2f       	mov	r24, r24
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	88 7f       	andi	r24, 0xF8	; 248
    200a:	90 70       	andi	r25, 0x00	; 0
    200c:	88 38       	cpi	r24, 0x88	; 136
    200e:	91 05       	cpc	r25, r1
    2010:	11 f0       	breq	.+4      	; 0x2016 <I2C_SLAVE_u8DataByteRecieved_NOTACK+0x46>
    {
        Local_Error = I2C_Error_Slave_DataByteRecieved_NOTACK ; 
    2012:	8e e0       	ldi	r24, 0x0E	; 14
    2014:	89 83       	std	Y+1, r24	; 0x01
    }
    *Copy_Pu8RecievedData = TWDR_REG ;                                          // Read Data From Reg TWDR
    2016:	e3 e2       	ldi	r30, 0x23	; 35
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	ea 81       	ldd	r30, Y+2	; 0x02
    201e:	fb 81       	ldd	r31, Y+3	; 0x03
    2020:	80 83       	st	Z, r24
    return Local_Error ;
    2022:	89 81       	ldd	r24, Y+1	; 0x01
}
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	cf 91       	pop	r28
    202c:	df 91       	pop	r29
    202e:	08 95       	ret

00002030 <I2C_SLAVE_u8DataByteTransmit_ACK>:
/*===========================================================================================================================*/
Error_t I2C_SLAVE_u8DataByteTransmit_ACK (u8 Copy_Pu8TransmitData)
{
    2030:	df 93       	push	r29
    2032:	cf 93       	push	r28
    2034:	00 d0       	rcall	.+0      	; 0x2036 <I2C_SLAVE_u8DataByteTransmit_ACK+0x6>
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    203c:	19 82       	std	Y+1, r1	; 0x01
    TWDR_REG =  Copy_Pu8TransmitData ;                                       // Write Data in Reg TWDR 
    203e:	e3 e2       	ldi	r30, 0x23	; 35
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	8a 81       	ldd	r24, Y+2	; 0x02
    2044:	80 83       	st	Z, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                            // Clear flag ( Set TWCR 7 )
    2046:	a6 e5       	ldi	r26, 0x56	; 86
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	e6 e5       	ldi	r30, 0x56	; 86
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	80 68       	ori	r24, 0x80	; 128
    2052:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                          // Wait for flag ( TWCR 7 == 0 )
    2054:	e6 e5       	ldi	r30, 0x56	; 86
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	88 23       	and	r24, r24
    205c:	dc f7       	brge	.-10     	; 0x2054 <I2C_SLAVE_u8DataByteTransmit_ACK+0x24>
    if ( (TWSR_REG & STATUS_BIT_MASK) != SLAVE_DataByte_Transmitted_ACK )    // Check status code == Data Byte Transmit + ACK  == (0xB8)
    205e:	e1 e2       	ldi	r30, 0x21	; 33
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	88 2f       	mov	r24, r24
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	88 7f       	andi	r24, 0xF8	; 248
    206a:	90 70       	andi	r25, 0x00	; 0
    206c:	88 3b       	cpi	r24, 0xB8	; 184
    206e:	91 05       	cpc	r25, r1
    2070:	11 f0       	breq	.+4      	; 0x2076 <I2C_SLAVE_u8DataByteTransmit_ACK+0x46>
    {
        Local_Error = I2C_Error_Slave_DataByteTransmit_ACK ; 
    2072:	8f e0       	ldi	r24, 0x0F	; 15
    2074:	89 83       	std	Y+1, r24	; 0x01
    } 
    return Local_Error ;
    2076:	89 81       	ldd	r24, Y+1	; 0x01
}
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	08 95       	ret

00002082 <I2C_SLAVE_u8DataByteTransmit_NOTACK>:
/*===========================================================================================================================*/
Error_t I2C_SLAVE_u8DataByteTransmit_NOTACK (u8 Copy_Pu8TransmitData)
{
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	00 d0       	rcall	.+0      	; 0x2088 <I2C_SLAVE_u8DataByteTransmit_NOTACK+0x6>
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    208e:	19 82       	std	Y+1, r1	; 0x01
    Disable_ACK ();                                                             // Disable ACK 
    2090:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <Disable_ACK>
    TWDR_REG =  Copy_Pu8TransmitData ;                                          // Write Data in Reg TWDR 
    2094:	e3 e2       	ldi	r30, 0x23	; 35
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	8a 81       	ldd	r24, Y+2	; 0x02
    209a:	80 83       	st	Z, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                               // Clear flag ( Set TWCR 7 )
    209c:	a6 e5       	ldi	r26, 0x56	; 86
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e6 e5       	ldi	r30, 0x56	; 86
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	80 68       	ori	r24, 0x80	; 128
    20a8:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                             // Wait for flag ( TWCR 7 == 0 )
    20aa:	e6 e5       	ldi	r30, 0x56	; 86
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	88 23       	and	r24, r24
    20b2:	dc f7       	brge	.-10     	; 0x20aa <I2C_SLAVE_u8DataByteTransmit_NOTACK+0x28>
    if ( (TWSR_REG & STATUS_BIT_MASK) != SLAVE_DataByte_Transmitted_NOTACK )    // Check status code == Data Byte Transmit + NOTACK  == (0xC0)
    20b4:	e1 e2       	ldi	r30, 0x21	; 33
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	88 2f       	mov	r24, r24
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	88 7f       	andi	r24, 0xF8	; 248
    20c0:	90 70       	andi	r25, 0x00	; 0
    20c2:	80 3c       	cpi	r24, 0xC0	; 192
    20c4:	91 05       	cpc	r25, r1
    20c6:	11 f0       	breq	.+4      	; 0x20cc <I2C_SLAVE_u8DataByteTransmit_NOTACK+0x4a>
    {
        Local_Error = I2C_Error_Slave_DataByteTransmit_NOTACK ; 
    20c8:	80 e1       	ldi	r24, 0x10	; 16
    20ca:	89 83       	std	Y+1, r24	; 0x01
    } 
    return Local_Error ;
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	cf 91       	pop	r28
    20d4:	df 91       	pop	r29
    20d6:	08 95       	ret

000020d8 <Enable_ACK>:
/*===========================================================================================================================*/
void Enable_ACK (void)
{
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    // Enable ACK  ( Set TWCR 6 )
    SET_BIT(TWCR_REG,TWCR_TWEA);
    20e0:	a6 e5       	ldi	r26, 0x56	; 86
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	e6 e5       	ldi	r30, 0x56	; 86
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	80 64       	ori	r24, 0x40	; 64
    20ec:	8c 93       	st	X, r24
}
    20ee:	cf 91       	pop	r28
    20f0:	df 91       	pop	r29
    20f2:	08 95       	ret

000020f4 <Disable_ACK>:
/*===========================================================================================================================*/
void Disable_ACK (void)
{
    20f4:	df 93       	push	r29
    20f6:	cf 93       	push	r28
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    // Disable ACK  ( Clear TWCR 6 )
    CLEAR_BIT(TWCR_REG,TWCR_TWEA);
    20fc:	a6 e5       	ldi	r26, 0x56	; 86
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	e6 e5       	ldi	r30, 0x56	; 86
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	8f 7b       	andi	r24, 0xBF	; 191
    2108:	8c 93       	st	X, r24
}
    210a:	cf 91       	pop	r28
    210c:	df 91       	pop	r29
    210e:	08 95       	ret

00002110 <GIE_void_GI_Enable>:
/* Description : Enable or Disable GIE General Interrupt                     */ 
/* Fun. Argument1: Copy_u8Status { ON , OFF }                                */
/* Fun. Return : void                                                        */
/*****************************************************************************/
void GIE_void_GI_Enable ( u8 Copy_u8Status )
{
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	00 d0       	rcall	.+0      	; 0x2116 <GIE_void_GI_Enable+0x6>
    2116:	0f 92       	push	r0
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	89 83       	std	Y+1, r24	; 0x01
    switch ( Copy_u8Status )
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	28 2f       	mov	r18, r24
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	3b 83       	std	Y+3, r19	; 0x03
    2126:	2a 83       	std	Y+2, r18	; 0x02
    2128:	8a 81       	ldd	r24, Y+2	; 0x02
    212a:	9b 81       	ldd	r25, Y+3	; 0x03
    212c:	00 97       	sbiw	r24, 0x00	; 0
    212e:	69 f0       	breq	.+26     	; 0x214a <GIE_void_GI_Enable+0x3a>
    2130:	2a 81       	ldd	r18, Y+2	; 0x02
    2132:	3b 81       	ldd	r19, Y+3	; 0x03
    2134:	21 30       	cpi	r18, 0x01	; 1
    2136:	31 05       	cpc	r19, r1
    2138:	79 f4       	brne	.+30     	; 0x2158 <GIE_void_GI_Enable+0x48>
    {
        case ON  :    SET_BIT(SREG_REG,7);       break;
    213a:	af e5       	ldi	r26, 0x5F	; 95
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	ef e5       	ldi	r30, 0x5F	; 95
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	80 68       	ori	r24, 0x80	; 128
    2146:	8c 93       	st	X, r24
    2148:	07 c0       	rjmp	.+14     	; 0x2158 <GIE_void_GI_Enable+0x48>
        case OFF :    CLEAR_BIT(SREG_REG,7);     break;
    214a:	af e5       	ldi	r26, 0x5F	; 95
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	ef e5       	ldi	r30, 0x5F	; 95
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	8f 77       	andi	r24, 0x7F	; 127
    2156:	8c 93       	st	X, r24
        default  :                               break;
    }
}
    2158:	0f 90       	pop	r0
    215a:	0f 90       	pop	r0
    215c:	0f 90       	pop	r0
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	08 95       	ret

00002164 <EXTI_voidEnable>:
/* Fun. Argument1: Copy_u8INTnumber { INT0 , INT1 , INT2 }                                   */
/* Fun. Argument1: Copy_u8SenseControl {FALLING_EDGE, RAISING_EDGE, LOW_LEVEL, ON_CHANGE}    */
/* Fun. Return : void                                                                        */
/*********************************************************************************************/
void EXTI_voidEnable ( u8 Copy_u8INTnumber , u8 Copy_u8SenseControl )
{
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	2a 97       	sbiw	r28, 0x0a	; 10
    216e:	0f b6       	in	r0, 0x3f	; 63
    2170:	f8 94       	cli
    2172:	de bf       	out	0x3e, r29	; 62
    2174:	0f be       	out	0x3f, r0	; 63
    2176:	cd bf       	out	0x3d, r28	; 61
    2178:	89 83       	std	Y+1, r24	; 0x01
    217a:	6a 83       	std	Y+2, r22	; 0x02
    switch ( Copy_u8INTnumber )
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	28 2f       	mov	r18, r24
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	3a 87       	std	Y+10, r19	; 0x0a
    2184:	29 87       	std	Y+9, r18	; 0x09
    2186:	89 85       	ldd	r24, Y+9	; 0x09
    2188:	9a 85       	ldd	r25, Y+10	; 0x0a
    218a:	81 30       	cpi	r24, 0x01	; 1
    218c:	91 05       	cpc	r25, r1
    218e:	09 f4       	brne	.+2      	; 0x2192 <EXTI_voidEnable+0x2e>
    2190:	6d c0       	rjmp	.+218    	; 0x226c <EXTI_voidEnable+0x108>
    2192:	29 85       	ldd	r18, Y+9	; 0x09
    2194:	3a 85       	ldd	r19, Y+10	; 0x0a
    2196:	22 30       	cpi	r18, 0x02	; 2
    2198:	31 05       	cpc	r19, r1
    219a:	09 f4       	brne	.+2      	; 0x219e <EXTI_voidEnable+0x3a>
    219c:	c9 c0       	rjmp	.+402    	; 0x2330 <EXTI_voidEnable+0x1cc>
    219e:	89 85       	ldd	r24, Y+9	; 0x09
    21a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a2:	00 97       	sbiw	r24, 0x00	; 0
    21a4:	09 f0       	breq	.+2      	; 0x21a8 <EXTI_voidEnable+0x44>
    21a6:	e9 c0       	rjmp	.+466    	; 0x237a <EXTI_voidEnable+0x216>
    {
        case INT0 :     SET_BIT(GICR_REG,PIN6);             // Set 1 On PIN6 At GTCR_REG to [Enable] (PIE) Peripheral Interrupt Enable to INT0 .
    21a8:	ab e5       	ldi	r26, 0x5B	; 91
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	eb e5       	ldi	r30, 0x5B	; 91
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	80 64       	ori	r24, 0x40	; 64
    21b4:	8c 93       	st	X, r24
                        switch ( Copy_u8SenseControl )
    21b6:	8a 81       	ldd	r24, Y+2	; 0x02
    21b8:	28 2f       	mov	r18, r24
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	38 87       	std	Y+8, r19	; 0x08
    21be:	2f 83       	std	Y+7, r18	; 0x07
    21c0:	8f 81       	ldd	r24, Y+7	; 0x07
    21c2:	98 85       	ldd	r25, Y+8	; 0x08
    21c4:	81 30       	cpi	r24, 0x01	; 1
    21c6:	91 05       	cpc	r25, r1
    21c8:	21 f1       	breq	.+72     	; 0x2212 <EXTI_voidEnable+0xae>
    21ca:	2f 81       	ldd	r18, Y+7	; 0x07
    21cc:	38 85       	ldd	r19, Y+8	; 0x08
    21ce:	22 30       	cpi	r18, 0x02	; 2
    21d0:	31 05       	cpc	r19, r1
    21d2:	2c f4       	brge	.+10     	; 0x21de <EXTI_voidEnable+0x7a>
    21d4:	8f 81       	ldd	r24, Y+7	; 0x07
    21d6:	98 85       	ldd	r25, Y+8	; 0x08
    21d8:	00 97       	sbiw	r24, 0x00	; 0
    21da:	61 f0       	breq	.+24     	; 0x21f4 <EXTI_voidEnable+0x90>
    21dc:	ce c0       	rjmp	.+412    	; 0x237a <EXTI_voidEnable+0x216>
    21de:	2f 81       	ldd	r18, Y+7	; 0x07
    21e0:	38 85       	ldd	r19, Y+8	; 0x08
    21e2:	22 30       	cpi	r18, 0x02	; 2
    21e4:	31 05       	cpc	r19, r1
    21e6:	21 f1       	breq	.+72     	; 0x2230 <EXTI_voidEnable+0xcc>
    21e8:	8f 81       	ldd	r24, Y+7	; 0x07
    21ea:	98 85       	ldd	r25, Y+8	; 0x08
    21ec:	83 30       	cpi	r24, 0x03	; 3
    21ee:	91 05       	cpc	r25, r1
    21f0:	71 f1       	breq	.+92     	; 0x224e <EXTI_voidEnable+0xea>
    21f2:	c3 c0       	rjmp	.+390    	; 0x237a <EXTI_voidEnable+0x216>
                        {                                                                                                   // BIT1  -  BIT0  on MCUCR_REG
                            case FALLING_EDGE :     SET_BIT(MCUCR_REG,PIN1);      CLEAR_BIT(MCUCR_REG,PIN0);      break;    //   1   -   0   Falling Edge
    21f4:	a5 e5       	ldi	r26, 0x55	; 85
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	e5 e5       	ldi	r30, 0x55	; 85
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	82 60       	ori	r24, 0x02	; 2
    2200:	8c 93       	st	X, r24
    2202:	a5 e5       	ldi	r26, 0x55	; 85
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	e5 e5       	ldi	r30, 0x55	; 85
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	8e 7f       	andi	r24, 0xFE	; 254
    220e:	8c 93       	st	X, r24
    2210:	b4 c0       	rjmp	.+360    	; 0x237a <EXTI_voidEnable+0x216>
                            case RAISING_EDGE :     SET_BIT(MCUCR_REG,PIN1);      SET_BIT(MCUCR_REG,PIN0);        break;    //   1   -   1   Raising Edge  
    2212:	a5 e5       	ldi	r26, 0x55	; 85
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e5 e5       	ldi	r30, 0x55	; 85
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	82 60       	ori	r24, 0x02	; 2
    221e:	8c 93       	st	X, r24
    2220:	a5 e5       	ldi	r26, 0x55	; 85
    2222:	b0 e0       	ldi	r27, 0x00	; 0
    2224:	e5 e5       	ldi	r30, 0x55	; 85
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 81       	ld	r24, Z
    222a:	81 60       	ori	r24, 0x01	; 1
    222c:	8c 93       	st	X, r24
    222e:	a5 c0       	rjmp	.+330    	; 0x237a <EXTI_voidEnable+0x216>
                            case LOW_LEVEL    :     CLEAR_BIT(MCUCR_REG,PIN1);    CLEAR_BIT(MCUCR_REG,PIN0);      break;    //   0   -   0   Low Level  
    2230:	a5 e5       	ldi	r26, 0x55	; 85
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	e5 e5       	ldi	r30, 0x55	; 85
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	8d 7f       	andi	r24, 0xFD	; 253
    223c:	8c 93       	st	X, r24
    223e:	a5 e5       	ldi	r26, 0x55	; 85
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	e5 e5       	ldi	r30, 0x55	; 85
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	8e 7f       	andi	r24, 0xFE	; 254
    224a:	8c 93       	st	X, r24
    224c:	96 c0       	rjmp	.+300    	; 0x237a <EXTI_voidEnable+0x216>
                            case ON_CHANGE    :     CLEAR_BIT(MCUCR_REG,PIN1);    SET_BIT(MCUCR_REG,PIN0);        break;    //   0   -   1   On Change   
    224e:	a5 e5       	ldi	r26, 0x55	; 85
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	e5 e5       	ldi	r30, 0x55	; 85
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	8d 7f       	andi	r24, 0xFD	; 253
    225a:	8c 93       	st	X, r24
    225c:	a5 e5       	ldi	r26, 0x55	; 85
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e5 e5       	ldi	r30, 0x55	; 85
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	81 60       	ori	r24, 0x01	; 1
    2268:	8c 93       	st	X, r24
    226a:	87 c0       	rjmp	.+270    	; 0x237a <EXTI_voidEnable+0x216>
                            default           :                                                                   break;
                        }
                        break;
        case INT1 :     SET_BIT(GICR_REG,PIN7);             // Set 1 On PIN7 At GTCR_REG to [Enable] (PIE) Peripheral Interrupt Enable to INT1 .
    226c:	ab e5       	ldi	r26, 0x5B	; 91
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	eb e5       	ldi	r30, 0x5B	; 91
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	80 68       	ori	r24, 0x80	; 128
    2278:	8c 93       	st	X, r24
                        switch ( Copy_u8SenseControl )
    227a:	8a 81       	ldd	r24, Y+2	; 0x02
    227c:	28 2f       	mov	r18, r24
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	3e 83       	std	Y+6, r19	; 0x06
    2282:	2d 83       	std	Y+5, r18	; 0x05
    2284:	8d 81       	ldd	r24, Y+5	; 0x05
    2286:	9e 81       	ldd	r25, Y+6	; 0x06
    2288:	81 30       	cpi	r24, 0x01	; 1
    228a:	91 05       	cpc	r25, r1
    228c:	21 f1       	breq	.+72     	; 0x22d6 <EXTI_voidEnable+0x172>
    228e:	2d 81       	ldd	r18, Y+5	; 0x05
    2290:	3e 81       	ldd	r19, Y+6	; 0x06
    2292:	22 30       	cpi	r18, 0x02	; 2
    2294:	31 05       	cpc	r19, r1
    2296:	2c f4       	brge	.+10     	; 0x22a2 <EXTI_voidEnable+0x13e>
    2298:	8d 81       	ldd	r24, Y+5	; 0x05
    229a:	9e 81       	ldd	r25, Y+6	; 0x06
    229c:	00 97       	sbiw	r24, 0x00	; 0
    229e:	61 f0       	breq	.+24     	; 0x22b8 <EXTI_voidEnable+0x154>
    22a0:	6c c0       	rjmp	.+216    	; 0x237a <EXTI_voidEnable+0x216>
    22a2:	2d 81       	ldd	r18, Y+5	; 0x05
    22a4:	3e 81       	ldd	r19, Y+6	; 0x06
    22a6:	22 30       	cpi	r18, 0x02	; 2
    22a8:	31 05       	cpc	r19, r1
    22aa:	21 f1       	breq	.+72     	; 0x22f4 <EXTI_voidEnable+0x190>
    22ac:	8d 81       	ldd	r24, Y+5	; 0x05
    22ae:	9e 81       	ldd	r25, Y+6	; 0x06
    22b0:	83 30       	cpi	r24, 0x03	; 3
    22b2:	91 05       	cpc	r25, r1
    22b4:	71 f1       	breq	.+92     	; 0x2312 <EXTI_voidEnable+0x1ae>
    22b6:	61 c0       	rjmp	.+194    	; 0x237a <EXTI_voidEnable+0x216>
                        {                                                                                                   // BIT3  -  BIT2  on MCUCR_REG
                            case FALLING_EDGE :     SET_BIT(MCUCR_REG,PIN3);      CLEAR_BIT(MCUCR_REG,PIN2);      break;    //   1   -   0   Falling Edge
    22b8:	a5 e5       	ldi	r26, 0x55	; 85
    22ba:	b0 e0       	ldi	r27, 0x00	; 0
    22bc:	e5 e5       	ldi	r30, 0x55	; 85
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	88 60       	ori	r24, 0x08	; 8
    22c4:	8c 93       	st	X, r24
    22c6:	a5 e5       	ldi	r26, 0x55	; 85
    22c8:	b0 e0       	ldi	r27, 0x00	; 0
    22ca:	e5 e5       	ldi	r30, 0x55	; 85
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	8b 7f       	andi	r24, 0xFB	; 251
    22d2:	8c 93       	st	X, r24
    22d4:	52 c0       	rjmp	.+164    	; 0x237a <EXTI_voidEnable+0x216>
                            case RAISING_EDGE :     SET_BIT(MCUCR_REG,PIN3);      SET_BIT(MCUCR_REG,PIN2);        break;    //   1   -   1   Raising Edge
    22d6:	a5 e5       	ldi	r26, 0x55	; 85
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	e5 e5       	ldi	r30, 0x55	; 85
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	88 60       	ori	r24, 0x08	; 8
    22e2:	8c 93       	st	X, r24
    22e4:	a5 e5       	ldi	r26, 0x55	; 85
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	e5 e5       	ldi	r30, 0x55	; 85
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	84 60       	ori	r24, 0x04	; 4
    22f0:	8c 93       	st	X, r24
    22f2:	43 c0       	rjmp	.+134    	; 0x237a <EXTI_voidEnable+0x216>
                            case LOW_LEVEL    :     CLEAR_BIT(MCUCR_REG,PIN3);    CLEAR_BIT(MCUCR_REG,PIN2);      break;    //   0   -   0   Low Level
    22f4:	a5 e5       	ldi	r26, 0x55	; 85
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	e5 e5       	ldi	r30, 0x55	; 85
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	87 7f       	andi	r24, 0xF7	; 247
    2300:	8c 93       	st	X, r24
    2302:	a5 e5       	ldi	r26, 0x55	; 85
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e5 e5       	ldi	r30, 0x55	; 85
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	8b 7f       	andi	r24, 0xFB	; 251
    230e:	8c 93       	st	X, r24
    2310:	34 c0       	rjmp	.+104    	; 0x237a <EXTI_voidEnable+0x216>
                            case ON_CHANGE    :     CLEAR_BIT(MCUCR_REG,PIN3);    SET_BIT(MCUCR_REG,PIN2);        break;    //   0   -   1   On Change 
    2312:	a5 e5       	ldi	r26, 0x55	; 85
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	e5 e5       	ldi	r30, 0x55	; 85
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	87 7f       	andi	r24, 0xF7	; 247
    231e:	8c 93       	st	X, r24
    2320:	a5 e5       	ldi	r26, 0x55	; 85
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	e5 e5       	ldi	r30, 0x55	; 85
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	84 60       	ori	r24, 0x04	; 4
    232c:	8c 93       	st	X, r24
    232e:	25 c0       	rjmp	.+74     	; 0x237a <EXTI_voidEnable+0x216>
                            default           :                                                                   break;  
                        }
                        break;
        case INT2 :     SET_BIT(GICR_REG,PIN5);             // Set 1 On PIN5 At GTCR_REG to [Enable] (PIE) Peripheral Interrupt Enable to INT2 .
    2330:	ab e5       	ldi	r26, 0x5B	; 91
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	eb e5       	ldi	r30, 0x5B	; 91
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	80 62       	ori	r24, 0x20	; 32
    233c:	8c 93       	st	X, r24
                        switch ( Copy_u8SenseControl )
    233e:	8a 81       	ldd	r24, Y+2	; 0x02
    2340:	28 2f       	mov	r18, r24
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	3c 83       	std	Y+4, r19	; 0x04
    2346:	2b 83       	std	Y+3, r18	; 0x03
    2348:	8b 81       	ldd	r24, Y+3	; 0x03
    234a:	9c 81       	ldd	r25, Y+4	; 0x04
    234c:	00 97       	sbiw	r24, 0x00	; 0
    234e:	31 f0       	breq	.+12     	; 0x235c <EXTI_voidEnable+0x1f8>
    2350:	2b 81       	ldd	r18, Y+3	; 0x03
    2352:	3c 81       	ldd	r19, Y+4	; 0x04
    2354:	21 30       	cpi	r18, 0x01	; 1
    2356:	31 05       	cpc	r19, r1
    2358:	49 f0       	breq	.+18     	; 0x236c <EXTI_voidEnable+0x208>
    235a:	0f c0       	rjmp	.+30     	; 0x237a <EXTI_voidEnable+0x216>
                        {                                                                      //  BIT6  on  MCUCSR_REG
                            case FALLING_EDGE :     CLEAR_BIT(MCUCSR_REG,PIN6);      break;    //   0    Falling Edge   
    235c:	a4 e5       	ldi	r26, 0x54	; 84
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	e4 e5       	ldi	r30, 0x54	; 84
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	8f 7b       	andi	r24, 0xBF	; 191
    2368:	8c 93       	st	X, r24
    236a:	07 c0       	rjmp	.+14     	; 0x237a <EXTI_voidEnable+0x216>
                            case RAISING_EDGE :     SET_BIT(MCUCSR_REG,PIN6);        break;    //   1    Raising Edge
    236c:	a4 e5       	ldi	r26, 0x54	; 84
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	e4 e5       	ldi	r30, 0x54	; 84
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	80 64       	ori	r24, 0x40	; 64
    2378:	8c 93       	st	X, r24
                            default           :                                      break;  
                        } 
                        break;
        default   :     break;
    }
}
    237a:	2a 96       	adiw	r28, 0x0a	; 10
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	de bf       	out	0x3e, r29	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	cd bf       	out	0x3d, r28	; 61
    2386:	cf 91       	pop	r28
    2388:	df 91       	pop	r29
    238a:	08 95       	ret

0000238c <EXTI_voidDisable>:
/* Description :  Disable (PIE) Peripheral Interrupt Enable                  */ 
/* Fun. Argument1: Copy_u8INTnumber { INT0 , INT1 , INT2 }                   */
/* Fun. Return : void                                                        */
/*****************************************************************************/
void EXTI_voidDisable ( u8 Copy_u8INTnumber )
{
    238c:	df 93       	push	r29
    238e:	cf 93       	push	r28
    2390:	00 d0       	rcall	.+0      	; 0x2392 <EXTI_voidDisable+0x6>
    2392:	0f 92       	push	r0
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
    2398:	89 83       	std	Y+1, r24	; 0x01
    switch ( Copy_u8INTnumber )
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	28 2f       	mov	r18, r24
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	3b 83       	std	Y+3, r19	; 0x03
    23a2:	2a 83       	std	Y+2, r18	; 0x02
    23a4:	8a 81       	ldd	r24, Y+2	; 0x02
    23a6:	9b 81       	ldd	r25, Y+3	; 0x03
    23a8:	81 30       	cpi	r24, 0x01	; 1
    23aa:	91 05       	cpc	r25, r1
    23ac:	89 f0       	breq	.+34     	; 0x23d0 <EXTI_voidDisable+0x44>
    23ae:	2a 81       	ldd	r18, Y+2	; 0x02
    23b0:	3b 81       	ldd	r19, Y+3	; 0x03
    23b2:	22 30       	cpi	r18, 0x02	; 2
    23b4:	31 05       	cpc	r19, r1
    23b6:	a1 f0       	breq	.+40     	; 0x23e0 <EXTI_voidDisable+0x54>
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	9b 81       	ldd	r25, Y+3	; 0x03
    23bc:	00 97       	sbiw	r24, 0x00	; 0
    23be:	b9 f4       	brne	.+46     	; 0x23ee <EXTI_voidDisable+0x62>
    {
        case INT0 :     CLEAR_BIT(GICR_REG,PIN6);   break;    // Set 0 On PIN6 At GTCR_REG to [Disable] (PIE) Peripheral Interrupt Enable to INT0 .
    23c0:	ab e5       	ldi	r26, 0x5B	; 91
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	eb e5       	ldi	r30, 0x5B	; 91
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 81       	ld	r24, Z
    23ca:	8f 7b       	andi	r24, 0xBF	; 191
    23cc:	8c 93       	st	X, r24
    23ce:	0f c0       	rjmp	.+30     	; 0x23ee <EXTI_voidDisable+0x62>
        case INT1 :     CLEAR_BIT(GICR_REG,PIN7);   break;    // Set 0 On PIN7 At GTCR_REG to [Disable] (PIE) Peripheral Interrupt Enable to INT1 .
    23d0:	ab e5       	ldi	r26, 0x5B	; 91
    23d2:	b0 e0       	ldi	r27, 0x00	; 0
    23d4:	eb e5       	ldi	r30, 0x5B	; 91
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 81       	ld	r24, Z
    23da:	8f 77       	andi	r24, 0x7F	; 127
    23dc:	8c 93       	st	X, r24
    23de:	07 c0       	rjmp	.+14     	; 0x23ee <EXTI_voidDisable+0x62>
        case INT2 :     CLEAR_BIT(GICR_REG,PIN5);   break;    // Set 0 On PIN5 At GTCR_REG to [Disable] (PIE) Peripheral Interrupt Enable to INT2 .
    23e0:	ab e5       	ldi	r26, 0x5B	; 91
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	eb e5       	ldi	r30, 0x5B	; 91
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	8f 7d       	andi	r24, 0xDF	; 223
    23ec:	8c 93       	st	X, r24
        default   :                                 break;
    }
}
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	cf 91       	pop	r28
    23f6:	df 91       	pop	r29
    23f8:	08 95       	ret

000023fa <EXTI_voidSetCallBack>:
/* Fun. Argument2:{ void (*LocalPointerToFunction) (void) }                  */
/*                Pointer to function that = Address of application function */
/* Fun. Return : void                                                        */
/*****************************************************************************/
void EXTI_voidSetCallBack ( u8 Copy_u8INTnumber , void (*Local_PointerToFunction) (void) )
{
    23fa:	df 93       	push	r29
    23fc:	cf 93       	push	r28
    23fe:	00 d0       	rcall	.+0      	; 0x2400 <EXTI_voidSetCallBack+0x6>
    2400:	00 d0       	rcall	.+0      	; 0x2402 <EXTI_voidSetCallBack+0x8>
    2402:	0f 92       	push	r0
    2404:	cd b7       	in	r28, 0x3d	; 61
    2406:	de b7       	in	r29, 0x3e	; 62
    2408:	89 83       	std	Y+1, r24	; 0x01
    240a:	7b 83       	std	Y+3, r23	; 0x03
    240c:	6a 83       	std	Y+2, r22	; 0x02
    switch( Copy_u8INTnumber )
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	28 2f       	mov	r18, r24
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	3d 83       	std	Y+5, r19	; 0x05
    2416:	2c 83       	std	Y+4, r18	; 0x04
    2418:	8c 81       	ldd	r24, Y+4	; 0x04
    241a:	9d 81       	ldd	r25, Y+5	; 0x05
    241c:	81 30       	cpi	r24, 0x01	; 1
    241e:	91 05       	cpc	r25, r1
    2420:	81 f0       	breq	.+32     	; 0x2442 <EXTI_voidSetCallBack+0x48>
    2422:	2c 81       	ldd	r18, Y+4	; 0x04
    2424:	3d 81       	ldd	r19, Y+5	; 0x05
    2426:	22 30       	cpi	r18, 0x02	; 2
    2428:	31 05       	cpc	r19, r1
    242a:	91 f0       	breq	.+36     	; 0x2450 <EXTI_voidSetCallBack+0x56>
    242c:	8c 81       	ldd	r24, Y+4	; 0x04
    242e:	9d 81       	ldd	r25, Y+5	; 0x05
    2430:	00 97       	sbiw	r24, 0x00	; 0
    2432:	a1 f4       	brne	.+40     	; 0x245c <EXTI_voidSetCallBack+0x62>
    {
        case INT0 :     Global_PF_Vector_1 = Local_PointerToFunction ;     break;
    2434:	8a 81       	ldd	r24, Y+2	; 0x02
    2436:	9b 81       	ldd	r25, Y+3	; 0x03
    2438:	90 93 d9 02 	sts	0x02D9, r25
    243c:	80 93 d8 02 	sts	0x02D8, r24
    2440:	0d c0       	rjmp	.+26     	; 0x245c <EXTI_voidSetCallBack+0x62>
        case INT1 :     Global_PF_Vector_2 = Local_PointerToFunction ;     break; 
    2442:	8a 81       	ldd	r24, Y+2	; 0x02
    2444:	9b 81       	ldd	r25, Y+3	; 0x03
    2446:	90 93 db 02 	sts	0x02DB, r25
    244a:	80 93 da 02 	sts	0x02DA, r24
    244e:	06 c0       	rjmp	.+12     	; 0x245c <EXTI_voidSetCallBack+0x62>
        case INT2 :     Global_PF_Vector_3 = Local_PointerToFunction ;     break; 
    2450:	8a 81       	ldd	r24, Y+2	; 0x02
    2452:	9b 81       	ldd	r25, Y+3	; 0x03
    2454:	90 93 dd 02 	sts	0x02DD, r25
    2458:	80 93 dc 02 	sts	0x02DC, r24
        default   :                                                        break; 
    } 
}
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	0f 90       	pop	r0
    2464:	0f 90       	pop	r0
    2466:	cf 91       	pop	r28
    2468:	df 91       	pop	r29
    246a:	08 95       	ret

0000246c <__vector_1>:
/* Description : ISR Prototype (position 1 on vector table INT0 )            */ 
/* Fun. Return : void                                                        */
/*****************************************************************************/
void __vector_1 (void)   __attribute__((signal));
void __vector_1 (void)
{
    246c:	1f 92       	push	r1
    246e:	0f 92       	push	r0
    2470:	0f b6       	in	r0, 0x3f	; 63
    2472:	0f 92       	push	r0
    2474:	11 24       	eor	r1, r1
    2476:	2f 93       	push	r18
    2478:	3f 93       	push	r19
    247a:	4f 93       	push	r20
    247c:	5f 93       	push	r21
    247e:	6f 93       	push	r22
    2480:	7f 93       	push	r23
    2482:	8f 93       	push	r24
    2484:	9f 93       	push	r25
    2486:	af 93       	push	r26
    2488:	bf 93       	push	r27
    248a:	ef 93       	push	r30
    248c:	ff 93       	push	r31
    248e:	df 93       	push	r29
    2490:	cf 93       	push	r28
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
    if ( Global_PF_Vector_1 != NULL )
    2496:	80 91 d8 02 	lds	r24, 0x02D8
    249a:	90 91 d9 02 	lds	r25, 0x02D9
    249e:	00 97       	sbiw	r24, 0x00	; 0
    24a0:	29 f0       	breq	.+10     	; 0x24ac <__vector_1+0x40>
    {
        Global_PF_Vector_1 ();  // calling Global pointer to function that contain address of Application Function with INT0. 
    24a2:	e0 91 d8 02 	lds	r30, 0x02D8
    24a6:	f0 91 d9 02 	lds	r31, 0x02D9
    24aa:	09 95       	icall
    }

}
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	ff 91       	pop	r31
    24b2:	ef 91       	pop	r30
    24b4:	bf 91       	pop	r27
    24b6:	af 91       	pop	r26
    24b8:	9f 91       	pop	r25
    24ba:	8f 91       	pop	r24
    24bc:	7f 91       	pop	r23
    24be:	6f 91       	pop	r22
    24c0:	5f 91       	pop	r21
    24c2:	4f 91       	pop	r20
    24c4:	3f 91       	pop	r19
    24c6:	2f 91       	pop	r18
    24c8:	0f 90       	pop	r0
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	0f 90       	pop	r0
    24ce:	1f 90       	pop	r1
    24d0:	18 95       	reti

000024d2 <__vector_2>:
/* Description : ISR Prototype (position 2 on vector table INT1 )            */ 
/* Fun. Return : void                                                        */
/*****************************************************************************/
void __vector_2 (void)   __attribute__((signal));
void __vector_2 (void) 
{
    24d2:	1f 92       	push	r1
    24d4:	0f 92       	push	r0
    24d6:	0f b6       	in	r0, 0x3f	; 63
    24d8:	0f 92       	push	r0
    24da:	11 24       	eor	r1, r1
    24dc:	2f 93       	push	r18
    24de:	3f 93       	push	r19
    24e0:	4f 93       	push	r20
    24e2:	5f 93       	push	r21
    24e4:	6f 93       	push	r22
    24e6:	7f 93       	push	r23
    24e8:	8f 93       	push	r24
    24ea:	9f 93       	push	r25
    24ec:	af 93       	push	r26
    24ee:	bf 93       	push	r27
    24f0:	ef 93       	push	r30
    24f2:	ff 93       	push	r31
    24f4:	df 93       	push	r29
    24f6:	cf 93       	push	r28
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
    if ( Global_PF_Vector_2 != NULL )
    24fc:	80 91 da 02 	lds	r24, 0x02DA
    2500:	90 91 db 02 	lds	r25, 0x02DB
    2504:	00 97       	sbiw	r24, 0x00	; 0
    2506:	29 f0       	breq	.+10     	; 0x2512 <__vector_2+0x40>
    {
        Global_PF_Vector_2 ();  // calling Global pointer to function that contain address of Application Function with INT1. 
    2508:	e0 91 da 02 	lds	r30, 0x02DA
    250c:	f0 91 db 02 	lds	r31, 0x02DB
    2510:	09 95       	icall
    }
    
}
    2512:	cf 91       	pop	r28
    2514:	df 91       	pop	r29
    2516:	ff 91       	pop	r31
    2518:	ef 91       	pop	r30
    251a:	bf 91       	pop	r27
    251c:	af 91       	pop	r26
    251e:	9f 91       	pop	r25
    2520:	8f 91       	pop	r24
    2522:	7f 91       	pop	r23
    2524:	6f 91       	pop	r22
    2526:	5f 91       	pop	r21
    2528:	4f 91       	pop	r20
    252a:	3f 91       	pop	r19
    252c:	2f 91       	pop	r18
    252e:	0f 90       	pop	r0
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	0f 90       	pop	r0
    2534:	1f 90       	pop	r1
    2536:	18 95       	reti

00002538 <__vector_3>:
/* Description : ISR Prototype (position 3 on vector table INT2 )            */ 
/* Fun. Return : void                                                        */
/*****************************************************************************/
void __vector_3 (void)   __attribute__((signal));
void __vector_3 (void) 
{
    2538:	1f 92       	push	r1
    253a:	0f 92       	push	r0
    253c:	0f b6       	in	r0, 0x3f	; 63
    253e:	0f 92       	push	r0
    2540:	11 24       	eor	r1, r1
    2542:	2f 93       	push	r18
    2544:	3f 93       	push	r19
    2546:	4f 93       	push	r20
    2548:	5f 93       	push	r21
    254a:	6f 93       	push	r22
    254c:	7f 93       	push	r23
    254e:	8f 93       	push	r24
    2550:	9f 93       	push	r25
    2552:	af 93       	push	r26
    2554:	bf 93       	push	r27
    2556:	ef 93       	push	r30
    2558:	ff 93       	push	r31
    255a:	df 93       	push	r29
    255c:	cf 93       	push	r28
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
    if ( Global_PF_Vector_3 != NULL )
    2562:	80 91 dc 02 	lds	r24, 0x02DC
    2566:	90 91 dd 02 	lds	r25, 0x02DD
    256a:	00 97       	sbiw	r24, 0x00	; 0
    256c:	29 f0       	breq	.+10     	; 0x2578 <__vector_3+0x40>
    {
        Global_PF_Vector_3 ();  // calling Global pointer to function that contain address of Application Function with INT2.
    256e:	e0 91 dc 02 	lds	r30, 0x02DC
    2572:	f0 91 dd 02 	lds	r31, 0x02DD
    2576:	09 95       	icall
    }
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	ff 91       	pop	r31
    257e:	ef 91       	pop	r30
    2580:	bf 91       	pop	r27
    2582:	af 91       	pop	r26
    2584:	9f 91       	pop	r25
    2586:	8f 91       	pop	r24
    2588:	7f 91       	pop	r23
    258a:	6f 91       	pop	r22
    258c:	5f 91       	pop	r21
    258e:	4f 91       	pop	r20
    2590:	3f 91       	pop	r19
    2592:	2f 91       	pop	r18
    2594:	0f 90       	pop	r0
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	0f 90       	pop	r0
    259a:	1f 90       	pop	r1
    259c:	18 95       	reti

0000259e <DIO_voidSetPinDirection>:
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }                      */
/* Fun. Argument3: Copy_u8Direction { INPUT,OUTPUT }                                            */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void DIO_voidSetPinDirection (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber, u8 Copy_u8Direction )
{
    259e:	df 93       	push	r29
    25a0:	cf 93       	push	r28
    25a2:	cd b7       	in	r28, 0x3d	; 61
    25a4:	de b7       	in	r29, 0x3e	; 62
    25a6:	29 97       	sbiw	r28, 0x09	; 9
    25a8:	0f b6       	in	r0, 0x3f	; 63
    25aa:	f8 94       	cli
    25ac:	de bf       	out	0x3e, r29	; 62
    25ae:	0f be       	out	0x3f, r0	; 63
    25b0:	cd bf       	out	0x3d, r28	; 61
    25b2:	89 83       	std	Y+1, r24	; 0x01
    25b4:	6a 83       	std	Y+2, r22	; 0x02
    25b6:	4b 83       	std	Y+3, r20	; 0x03
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD || Copy_u8PinNumber > PIN7 )
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	84 30       	cpi	r24, 0x04	; 4
    25bc:	08 f0       	brcs	.+2      	; 0x25c0 <DIO_voidSetPinDirection+0x22>
    25be:	f6 c0       	rjmp	.+492    	; 0x27ac <DIO_voidSetPinDirection+0x20e>
    25c0:	8a 81       	ldd	r24, Y+2	; 0x02
    25c2:	88 30       	cpi	r24, 0x08	; 8
    25c4:	08 f0       	brcs	.+2      	; 0x25c8 <DIO_voidSetPinDirection+0x2a>
    25c6:	f2 c0       	rjmp	.+484    	; 0x27ac <DIO_voidSetPinDirection+0x20e>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Direction)
    25c8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ca:	28 2f       	mov	r18, r24
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	39 87       	std	Y+9, r19	; 0x09
    25d0:	28 87       	std	Y+8, r18	; 0x08
    25d2:	88 85       	ldd	r24, Y+8	; 0x08
    25d4:	99 85       	ldd	r25, Y+9	; 0x09
    25d6:	00 97       	sbiw	r24, 0x00	; 0
    25d8:	39 f0       	breq	.+14     	; 0x25e8 <DIO_voidSetPinDirection+0x4a>
    25da:	28 85       	ldd	r18, Y+8	; 0x08
    25dc:	39 85       	ldd	r19, Y+9	; 0x09
    25de:	21 30       	cpi	r18, 0x01	; 1
    25e0:	31 05       	cpc	r19, r1
    25e2:	09 f4       	brne	.+2      	; 0x25e6 <DIO_voidSetPinDirection+0x48>
    25e4:	75 c0       	rjmp	.+234    	; 0x26d0 <DIO_voidSetPinDirection+0x132>
    25e6:	e2 c0       	rjmp	.+452    	; 0x27ac <DIO_voidSetPinDirection+0x20e>
        {
            case INPUT :    switch(Copy_u8PortNumber)
    25e8:	89 81       	ldd	r24, Y+1	; 0x01
    25ea:	28 2f       	mov	r18, r24
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	3f 83       	std	Y+7, r19	; 0x07
    25f0:	2e 83       	std	Y+6, r18	; 0x06
    25f2:	8e 81       	ldd	r24, Y+6	; 0x06
    25f4:	9f 81       	ldd	r25, Y+7	; 0x07
    25f6:	81 30       	cpi	r24, 0x01	; 1
    25f8:	91 05       	cpc	r25, r1
    25fa:	59 f1       	breq	.+86     	; 0x2652 <DIO_voidSetPinDirection+0xb4>
    25fc:	2e 81       	ldd	r18, Y+6	; 0x06
    25fe:	3f 81       	ldd	r19, Y+7	; 0x07
    2600:	22 30       	cpi	r18, 0x02	; 2
    2602:	31 05       	cpc	r19, r1
    2604:	2c f4       	brge	.+10     	; 0x2610 <DIO_voidSetPinDirection+0x72>
    2606:	8e 81       	ldd	r24, Y+6	; 0x06
    2608:	9f 81       	ldd	r25, Y+7	; 0x07
    260a:	00 97       	sbiw	r24, 0x00	; 0
    260c:	69 f0       	breq	.+26     	; 0x2628 <DIO_voidSetPinDirection+0x8a>
    260e:	ce c0       	rjmp	.+412    	; 0x27ac <DIO_voidSetPinDirection+0x20e>
    2610:	2e 81       	ldd	r18, Y+6	; 0x06
    2612:	3f 81       	ldd	r19, Y+7	; 0x07
    2614:	22 30       	cpi	r18, 0x02	; 2
    2616:	31 05       	cpc	r19, r1
    2618:	89 f1       	breq	.+98     	; 0x267c <DIO_voidSetPinDirection+0xde>
    261a:	8e 81       	ldd	r24, Y+6	; 0x06
    261c:	9f 81       	ldd	r25, Y+7	; 0x07
    261e:	83 30       	cpi	r24, 0x03	; 3
    2620:	91 05       	cpc	r25, r1
    2622:	09 f4       	brne	.+2      	; 0x2626 <DIO_voidSetPinDirection+0x88>
    2624:	40 c0       	rjmp	.+128    	; 0x26a6 <DIO_voidSetPinDirection+0x108>
    2626:	c2 c0       	rjmp	.+388    	; 0x27ac <DIO_voidSetPinDirection+0x20e>
                            {
                                case PORTA :    CLEAR_BIT( DDRA_REG ,Copy_u8PinNumber );    break;       
    2628:	aa e3       	ldi	r26, 0x3A	; 58
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	ea e3       	ldi	r30, 0x3A	; 58
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	48 2f       	mov	r20, r24
    2634:	8a 81       	ldd	r24, Y+2	; 0x02
    2636:	28 2f       	mov	r18, r24
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	02 2e       	mov	r0, r18
    2640:	02 c0       	rjmp	.+4      	; 0x2646 <DIO_voidSetPinDirection+0xa8>
    2642:	88 0f       	add	r24, r24
    2644:	99 1f       	adc	r25, r25
    2646:	0a 94       	dec	r0
    2648:	e2 f7       	brpl	.-8      	; 0x2642 <DIO_voidSetPinDirection+0xa4>
    264a:	80 95       	com	r24
    264c:	84 23       	and	r24, r20
    264e:	8c 93       	st	X, r24
    2650:	ad c0       	rjmp	.+346    	; 0x27ac <DIO_voidSetPinDirection+0x20e>
                                case PORTB :    CLEAR_BIT( DDRB_REG ,Copy_u8PinNumber );    break;
    2652:	a7 e3       	ldi	r26, 0x37	; 55
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	e7 e3       	ldi	r30, 0x37	; 55
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	48 2f       	mov	r20, r24
    265e:	8a 81       	ldd	r24, Y+2	; 0x02
    2660:	28 2f       	mov	r18, r24
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	02 2e       	mov	r0, r18
    266a:	02 c0       	rjmp	.+4      	; 0x2670 <DIO_voidSetPinDirection+0xd2>
    266c:	88 0f       	add	r24, r24
    266e:	99 1f       	adc	r25, r25
    2670:	0a 94       	dec	r0
    2672:	e2 f7       	brpl	.-8      	; 0x266c <DIO_voidSetPinDirection+0xce>
    2674:	80 95       	com	r24
    2676:	84 23       	and	r24, r20
    2678:	8c 93       	st	X, r24
    267a:	98 c0       	rjmp	.+304    	; 0x27ac <DIO_voidSetPinDirection+0x20e>
                                case PORTC :    CLEAR_BIT( DDRC_REG ,Copy_u8PinNumber );    break;
    267c:	a4 e3       	ldi	r26, 0x34	; 52
    267e:	b0 e0       	ldi	r27, 0x00	; 0
    2680:	e4 e3       	ldi	r30, 0x34	; 52
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	80 81       	ld	r24, Z
    2686:	48 2f       	mov	r20, r24
    2688:	8a 81       	ldd	r24, Y+2	; 0x02
    268a:	28 2f       	mov	r18, r24
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	02 2e       	mov	r0, r18
    2694:	02 c0       	rjmp	.+4      	; 0x269a <DIO_voidSetPinDirection+0xfc>
    2696:	88 0f       	add	r24, r24
    2698:	99 1f       	adc	r25, r25
    269a:	0a 94       	dec	r0
    269c:	e2 f7       	brpl	.-8      	; 0x2696 <DIO_voidSetPinDirection+0xf8>
    269e:	80 95       	com	r24
    26a0:	84 23       	and	r24, r20
    26a2:	8c 93       	st	X, r24
    26a4:	83 c0       	rjmp	.+262    	; 0x27ac <DIO_voidSetPinDirection+0x20e>
                                case PORTD :    CLEAR_BIT( DDRD_REG ,Copy_u8PinNumber );    break;
    26a6:	a1 e3       	ldi	r26, 0x31	; 49
    26a8:	b0 e0       	ldi	r27, 0x00	; 0
    26aa:	e1 e3       	ldi	r30, 0x31	; 49
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	80 81       	ld	r24, Z
    26b0:	48 2f       	mov	r20, r24
    26b2:	8a 81       	ldd	r24, Y+2	; 0x02
    26b4:	28 2f       	mov	r18, r24
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	02 2e       	mov	r0, r18
    26be:	02 c0       	rjmp	.+4      	; 0x26c4 <DIO_voidSetPinDirection+0x126>
    26c0:	88 0f       	add	r24, r24
    26c2:	99 1f       	adc	r25, r25
    26c4:	0a 94       	dec	r0
    26c6:	e2 f7       	brpl	.-8      	; 0x26c0 <DIO_voidSetPinDirection+0x122>
    26c8:	80 95       	com	r24
    26ca:	84 23       	and	r24, r20
    26cc:	8c 93       	st	X, r24
    26ce:	6e c0       	rjmp	.+220    	; 0x27ac <DIO_voidSetPinDirection+0x20e>
                                default    :                                                break;
                            }
                            break;
            case OUTPUT :   switch(Copy_u8PortNumber)
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	28 2f       	mov	r18, r24
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	3d 83       	std	Y+5, r19	; 0x05
    26d8:	2c 83       	std	Y+4, r18	; 0x04
    26da:	8c 81       	ldd	r24, Y+4	; 0x04
    26dc:	9d 81       	ldd	r25, Y+5	; 0x05
    26de:	81 30       	cpi	r24, 0x01	; 1
    26e0:	91 05       	cpc	r25, r1
    26e2:	49 f1       	breq	.+82     	; 0x2736 <DIO_voidSetPinDirection+0x198>
    26e4:	2c 81       	ldd	r18, Y+4	; 0x04
    26e6:	3d 81       	ldd	r19, Y+5	; 0x05
    26e8:	22 30       	cpi	r18, 0x02	; 2
    26ea:	31 05       	cpc	r19, r1
    26ec:	2c f4       	brge	.+10     	; 0x26f8 <DIO_voidSetPinDirection+0x15a>
    26ee:	8c 81       	ldd	r24, Y+4	; 0x04
    26f0:	9d 81       	ldd	r25, Y+5	; 0x05
    26f2:	00 97       	sbiw	r24, 0x00	; 0
    26f4:	61 f0       	breq	.+24     	; 0x270e <DIO_voidSetPinDirection+0x170>
    26f6:	5a c0       	rjmp	.+180    	; 0x27ac <DIO_voidSetPinDirection+0x20e>
    26f8:	2c 81       	ldd	r18, Y+4	; 0x04
    26fa:	3d 81       	ldd	r19, Y+5	; 0x05
    26fc:	22 30       	cpi	r18, 0x02	; 2
    26fe:	31 05       	cpc	r19, r1
    2700:	71 f1       	breq	.+92     	; 0x275e <DIO_voidSetPinDirection+0x1c0>
    2702:	8c 81       	ldd	r24, Y+4	; 0x04
    2704:	9d 81       	ldd	r25, Y+5	; 0x05
    2706:	83 30       	cpi	r24, 0x03	; 3
    2708:	91 05       	cpc	r25, r1
    270a:	e9 f1       	breq	.+122    	; 0x2786 <DIO_voidSetPinDirection+0x1e8>
    270c:	4f c0       	rjmp	.+158    	; 0x27ac <DIO_voidSetPinDirection+0x20e>
                            {
                                case PORTA :    SET_BIT( DDRA_REG ,Copy_u8PinNumber );      break;
    270e:	aa e3       	ldi	r26, 0x3A	; 58
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	ea e3       	ldi	r30, 0x3A	; 58
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	48 2f       	mov	r20, r24
    271a:	8a 81       	ldd	r24, Y+2	; 0x02
    271c:	28 2f       	mov	r18, r24
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	02 2e       	mov	r0, r18
    2726:	02 c0       	rjmp	.+4      	; 0x272c <DIO_voidSetPinDirection+0x18e>
    2728:	88 0f       	add	r24, r24
    272a:	99 1f       	adc	r25, r25
    272c:	0a 94       	dec	r0
    272e:	e2 f7       	brpl	.-8      	; 0x2728 <DIO_voidSetPinDirection+0x18a>
    2730:	84 2b       	or	r24, r20
    2732:	8c 93       	st	X, r24
    2734:	3b c0       	rjmp	.+118    	; 0x27ac <DIO_voidSetPinDirection+0x20e>
                                case PORTB :    SET_BIT( DDRB_REG ,Copy_u8PinNumber );      break;
    2736:	a7 e3       	ldi	r26, 0x37	; 55
    2738:	b0 e0       	ldi	r27, 0x00	; 0
    273a:	e7 e3       	ldi	r30, 0x37	; 55
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	80 81       	ld	r24, Z
    2740:	48 2f       	mov	r20, r24
    2742:	8a 81       	ldd	r24, Y+2	; 0x02
    2744:	28 2f       	mov	r18, r24
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	02 2e       	mov	r0, r18
    274e:	02 c0       	rjmp	.+4      	; 0x2754 <DIO_voidSetPinDirection+0x1b6>
    2750:	88 0f       	add	r24, r24
    2752:	99 1f       	adc	r25, r25
    2754:	0a 94       	dec	r0
    2756:	e2 f7       	brpl	.-8      	; 0x2750 <DIO_voidSetPinDirection+0x1b2>
    2758:	84 2b       	or	r24, r20
    275a:	8c 93       	st	X, r24
    275c:	27 c0       	rjmp	.+78     	; 0x27ac <DIO_voidSetPinDirection+0x20e>
                                case PORTC :    SET_BIT( DDRC_REG ,Copy_u8PinNumber );      break;
    275e:	a4 e3       	ldi	r26, 0x34	; 52
    2760:	b0 e0       	ldi	r27, 0x00	; 0
    2762:	e4 e3       	ldi	r30, 0x34	; 52
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	80 81       	ld	r24, Z
    2768:	48 2f       	mov	r20, r24
    276a:	8a 81       	ldd	r24, Y+2	; 0x02
    276c:	28 2f       	mov	r18, r24
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	02 2e       	mov	r0, r18
    2776:	02 c0       	rjmp	.+4      	; 0x277c <DIO_voidSetPinDirection+0x1de>
    2778:	88 0f       	add	r24, r24
    277a:	99 1f       	adc	r25, r25
    277c:	0a 94       	dec	r0
    277e:	e2 f7       	brpl	.-8      	; 0x2778 <DIO_voidSetPinDirection+0x1da>
    2780:	84 2b       	or	r24, r20
    2782:	8c 93       	st	X, r24
    2784:	13 c0       	rjmp	.+38     	; 0x27ac <DIO_voidSetPinDirection+0x20e>
                                case PORTD :    SET_BIT( DDRD_REG ,Copy_u8PinNumber );      break;
    2786:	a1 e3       	ldi	r26, 0x31	; 49
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	e1 e3       	ldi	r30, 0x31	; 49
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
    2790:	48 2f       	mov	r20, r24
    2792:	8a 81       	ldd	r24, Y+2	; 0x02
    2794:	28 2f       	mov	r18, r24
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	02 2e       	mov	r0, r18
    279e:	02 c0       	rjmp	.+4      	; 0x27a4 <DIO_voidSetPinDirection+0x206>
    27a0:	88 0f       	add	r24, r24
    27a2:	99 1f       	adc	r25, r25
    27a4:	0a 94       	dec	r0
    27a6:	e2 f7       	brpl	.-8      	; 0x27a0 <DIO_voidSetPinDirection+0x202>
    27a8:	84 2b       	or	r24, r20
    27aa:	8c 93       	st	X, r24
                            break;
            default :       break;
                            
        }
    }
}
    27ac:	29 96       	adiw	r28, 0x09	; 9
    27ae:	0f b6       	in	r0, 0x3f	; 63
    27b0:	f8 94       	cli
    27b2:	de bf       	out	0x3e, r29	; 62
    27b4:	0f be       	out	0x3f, r0	; 63
    27b6:	cd bf       	out	0x3d, r28	; 61
    27b8:	cf 91       	pop	r28
    27ba:	df 91       	pop	r29
    27bc:	08 95       	ret

000027be <DIO_voidSetPortDirection>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                                */
/* Fun. Argument2: Copy_u8Direction { INPUT,OUTPUT }                                            */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void DIO_voidSetPortDirection (u8 Copy_u8PortNumber, u8 Copy_u8Direction )
{
    27be:	df 93       	push	r29
    27c0:	cf 93       	push	r28
    27c2:	cd b7       	in	r28, 0x3d	; 61
    27c4:	de b7       	in	r29, 0x3e	; 62
    27c6:	28 97       	sbiw	r28, 0x08	; 8
    27c8:	0f b6       	in	r0, 0x3f	; 63
    27ca:	f8 94       	cli
    27cc:	de bf       	out	0x3e, r29	; 62
    27ce:	0f be       	out	0x3f, r0	; 63
    27d0:	cd bf       	out	0x3d, r28	; 61
    27d2:	89 83       	std	Y+1, r24	; 0x01
    27d4:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
    27d6:	89 81       	ldd	r24, Y+1	; 0x01
    27d8:	84 30       	cpi	r24, 0x04	; 4
    27da:	08 f0       	brcs	.+2      	; 0x27de <DIO_voidSetPortDirection+0x20>
    27dc:	70 c0       	rjmp	.+224    	; 0x28be <DIO_voidSetPortDirection+0x100>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Direction)
    27de:	8a 81       	ldd	r24, Y+2	; 0x02
    27e0:	28 2f       	mov	r18, r24
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	38 87       	std	Y+8, r19	; 0x08
    27e6:	2f 83       	std	Y+7, r18	; 0x07
    27e8:	8f 81       	ldd	r24, Y+7	; 0x07
    27ea:	98 85       	ldd	r25, Y+8	; 0x08
    27ec:	00 97       	sbiw	r24, 0x00	; 0
    27ee:	31 f0       	breq	.+12     	; 0x27fc <DIO_voidSetPortDirection+0x3e>
    27f0:	2f 81       	ldd	r18, Y+7	; 0x07
    27f2:	38 85       	ldd	r19, Y+8	; 0x08
    27f4:	21 30       	cpi	r18, 0x01	; 1
    27f6:	31 05       	cpc	r19, r1
    27f8:	81 f1       	breq	.+96     	; 0x285a <DIO_voidSetPortDirection+0x9c>
    27fa:	61 c0       	rjmp	.+194    	; 0x28be <DIO_voidSetPortDirection+0x100>
        {
            case INPUT :    switch(Copy_u8PortNumber)
    27fc:	89 81       	ldd	r24, Y+1	; 0x01
    27fe:	28 2f       	mov	r18, r24
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	3e 83       	std	Y+6, r19	; 0x06
    2804:	2d 83       	std	Y+5, r18	; 0x05
    2806:	8d 81       	ldd	r24, Y+5	; 0x05
    2808:	9e 81       	ldd	r25, Y+6	; 0x06
    280a:	81 30       	cpi	r24, 0x01	; 1
    280c:	91 05       	cpc	r25, r1
    280e:	c9 f0       	breq	.+50     	; 0x2842 <DIO_voidSetPortDirection+0x84>
    2810:	2d 81       	ldd	r18, Y+5	; 0x05
    2812:	3e 81       	ldd	r19, Y+6	; 0x06
    2814:	22 30       	cpi	r18, 0x02	; 2
    2816:	31 05       	cpc	r19, r1
    2818:	2c f4       	brge	.+10     	; 0x2824 <DIO_voidSetPortDirection+0x66>
    281a:	8d 81       	ldd	r24, Y+5	; 0x05
    281c:	9e 81       	ldd	r25, Y+6	; 0x06
    281e:	00 97       	sbiw	r24, 0x00	; 0
    2820:	61 f0       	breq	.+24     	; 0x283a <DIO_voidSetPortDirection+0x7c>
    2822:	4d c0       	rjmp	.+154    	; 0x28be <DIO_voidSetPortDirection+0x100>
    2824:	2d 81       	ldd	r18, Y+5	; 0x05
    2826:	3e 81       	ldd	r19, Y+6	; 0x06
    2828:	22 30       	cpi	r18, 0x02	; 2
    282a:	31 05       	cpc	r19, r1
    282c:	71 f0       	breq	.+28     	; 0x284a <DIO_voidSetPortDirection+0x8c>
    282e:	8d 81       	ldd	r24, Y+5	; 0x05
    2830:	9e 81       	ldd	r25, Y+6	; 0x06
    2832:	83 30       	cpi	r24, 0x03	; 3
    2834:	91 05       	cpc	r25, r1
    2836:	69 f0       	breq	.+26     	; 0x2852 <DIO_voidSetPortDirection+0x94>
    2838:	42 c0       	rjmp	.+132    	; 0x28be <DIO_voidSetPortDirection+0x100>
                            {
                                case PORTA :    DDRA_REG = 0x00 ;   break;
    283a:	ea e3       	ldi	r30, 0x3A	; 58
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	10 82       	st	Z, r1
    2840:	3e c0       	rjmp	.+124    	; 0x28be <DIO_voidSetPortDirection+0x100>
                                case PORTB :    DDRB_REG = 0x00 ;   break;
    2842:	e7 e3       	ldi	r30, 0x37	; 55
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	10 82       	st	Z, r1
    2848:	3a c0       	rjmp	.+116    	; 0x28be <DIO_voidSetPortDirection+0x100>
                                case PORTC :    DDRC_REG = 0x00 ;   break;
    284a:	e4 e3       	ldi	r30, 0x34	; 52
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	10 82       	st	Z, r1
    2850:	36 c0       	rjmp	.+108    	; 0x28be <DIO_voidSetPortDirection+0x100>
                                case PORTD :    DDRD_REG = 0x00 ;   break;
    2852:	e1 e3       	ldi	r30, 0x31	; 49
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	10 82       	st	Z, r1
    2858:	32 c0       	rjmp	.+100    	; 0x28be <DIO_voidSetPortDirection+0x100>
                                default    :                        break;
                            }
                            break;
            case OUTPUT :   switch(Copy_u8PortNumber)
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	28 2f       	mov	r18, r24
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	3c 83       	std	Y+4, r19	; 0x04
    2862:	2b 83       	std	Y+3, r18	; 0x03
    2864:	8b 81       	ldd	r24, Y+3	; 0x03
    2866:	9c 81       	ldd	r25, Y+4	; 0x04
    2868:	81 30       	cpi	r24, 0x01	; 1
    286a:	91 05       	cpc	r25, r1
    286c:	d1 f0       	breq	.+52     	; 0x28a2 <DIO_voidSetPortDirection+0xe4>
    286e:	2b 81       	ldd	r18, Y+3	; 0x03
    2870:	3c 81       	ldd	r19, Y+4	; 0x04
    2872:	22 30       	cpi	r18, 0x02	; 2
    2874:	31 05       	cpc	r19, r1
    2876:	2c f4       	brge	.+10     	; 0x2882 <DIO_voidSetPortDirection+0xc4>
    2878:	8b 81       	ldd	r24, Y+3	; 0x03
    287a:	9c 81       	ldd	r25, Y+4	; 0x04
    287c:	00 97       	sbiw	r24, 0x00	; 0
    287e:	61 f0       	breq	.+24     	; 0x2898 <DIO_voidSetPortDirection+0xda>
    2880:	1e c0       	rjmp	.+60     	; 0x28be <DIO_voidSetPortDirection+0x100>
    2882:	2b 81       	ldd	r18, Y+3	; 0x03
    2884:	3c 81       	ldd	r19, Y+4	; 0x04
    2886:	22 30       	cpi	r18, 0x02	; 2
    2888:	31 05       	cpc	r19, r1
    288a:	81 f0       	breq	.+32     	; 0x28ac <DIO_voidSetPortDirection+0xee>
    288c:	8b 81       	ldd	r24, Y+3	; 0x03
    288e:	9c 81       	ldd	r25, Y+4	; 0x04
    2890:	83 30       	cpi	r24, 0x03	; 3
    2892:	91 05       	cpc	r25, r1
    2894:	81 f0       	breq	.+32     	; 0x28b6 <DIO_voidSetPortDirection+0xf8>
    2896:	13 c0       	rjmp	.+38     	; 0x28be <DIO_voidSetPortDirection+0x100>
                            {
                                case PORTA :    DDRA_REG = 0xff ;   break;
    2898:	ea e3       	ldi	r30, 0x3A	; 58
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	8f ef       	ldi	r24, 0xFF	; 255
    289e:	80 83       	st	Z, r24
    28a0:	0e c0       	rjmp	.+28     	; 0x28be <DIO_voidSetPortDirection+0x100>
                                case PORTB :    DDRB_REG = 0xff ;   break;
    28a2:	e7 e3       	ldi	r30, 0x37	; 55
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	8f ef       	ldi	r24, 0xFF	; 255
    28a8:	80 83       	st	Z, r24
    28aa:	09 c0       	rjmp	.+18     	; 0x28be <DIO_voidSetPortDirection+0x100>
                                case PORTC :    DDRC_REG = 0xff ;   break;
    28ac:	e4 e3       	ldi	r30, 0x34	; 52
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	8f ef       	ldi	r24, 0xFF	; 255
    28b2:	80 83       	st	Z, r24
    28b4:	04 c0       	rjmp	.+8      	; 0x28be <DIO_voidSetPortDirection+0x100>
                                case PORTD :    DDRD_REG = 0xff ;   break;
    28b6:	e1 e3       	ldi	r30, 0x31	; 49
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	8f ef       	ldi	r24, 0xFF	; 255
    28bc:	80 83       	st	Z, r24
                            break;
            default :       break;
                            
        }
    }
}
    28be:	28 96       	adiw	r28, 0x08	; 8
    28c0:	0f b6       	in	r0, 0x3f	; 63
    28c2:	f8 94       	cli
    28c4:	de bf       	out	0x3e, r29	; 62
    28c6:	0f be       	out	0x3f, r0	; 63
    28c8:	cd bf       	out	0x3d, r28	; 61
    28ca:	cf 91       	pop	r28
    28cc:	df 91       	pop	r29
    28ce:	08 95       	ret

000028d0 <DIO_voidSetPinValue>:
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }                */
/* Fun. Argument3: Copy_u8Value { HIGH , LOW }                                            */
/* Fun. Return : void                                                                     */
/******************************************************************************************/
void DIO_voidSetPinValue (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber, u8 Copy_u8Value )
{
    28d0:	df 93       	push	r29
    28d2:	cf 93       	push	r28
    28d4:	cd b7       	in	r28, 0x3d	; 61
    28d6:	de b7       	in	r29, 0x3e	; 62
    28d8:	29 97       	sbiw	r28, 0x09	; 9
    28da:	0f b6       	in	r0, 0x3f	; 63
    28dc:	f8 94       	cli
    28de:	de bf       	out	0x3e, r29	; 62
    28e0:	0f be       	out	0x3f, r0	; 63
    28e2:	cd bf       	out	0x3d, r28	; 61
    28e4:	89 83       	std	Y+1, r24	; 0x01
    28e6:	6a 83       	std	Y+2, r22	; 0x02
    28e8:	4b 83       	std	Y+3, r20	; 0x03
        /* i/p validation */
    if ( Copy_u8PortNumber > PORTD || Copy_u8PinNumber > PIN7 )
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	84 30       	cpi	r24, 0x04	; 4
    28ee:	08 f0       	brcs	.+2      	; 0x28f2 <DIO_voidSetPinValue+0x22>
    28f0:	f6 c0       	rjmp	.+492    	; 0x2ade <DIO_voidSetPinValue+0x20e>
    28f2:	8a 81       	ldd	r24, Y+2	; 0x02
    28f4:	88 30       	cpi	r24, 0x08	; 8
    28f6:	08 f0       	brcs	.+2      	; 0x28fa <DIO_voidSetPinValue+0x2a>
    28f8:	f2 c0       	rjmp	.+484    	; 0x2ade <DIO_voidSetPinValue+0x20e>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Value)
    28fa:	8b 81       	ldd	r24, Y+3	; 0x03
    28fc:	28 2f       	mov	r18, r24
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	39 87       	std	Y+9, r19	; 0x09
    2902:	28 87       	std	Y+8, r18	; 0x08
    2904:	88 85       	ldd	r24, Y+8	; 0x08
    2906:	99 85       	ldd	r25, Y+9	; 0x09
    2908:	00 97       	sbiw	r24, 0x00	; 0
    290a:	39 f0       	breq	.+14     	; 0x291a <DIO_voidSetPinValue+0x4a>
    290c:	28 85       	ldd	r18, Y+8	; 0x08
    290e:	39 85       	ldd	r19, Y+9	; 0x09
    2910:	21 30       	cpi	r18, 0x01	; 1
    2912:	31 05       	cpc	r19, r1
    2914:	09 f4       	brne	.+2      	; 0x2918 <DIO_voidSetPinValue+0x48>
    2916:	75 c0       	rjmp	.+234    	; 0x2a02 <DIO_voidSetPinValue+0x132>
    2918:	e2 c0       	rjmp	.+452    	; 0x2ade <DIO_voidSetPinValue+0x20e>
        {
            case LOW :    switch(Copy_u8PortNumber)
    291a:	89 81       	ldd	r24, Y+1	; 0x01
    291c:	28 2f       	mov	r18, r24
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	3f 83       	std	Y+7, r19	; 0x07
    2922:	2e 83       	std	Y+6, r18	; 0x06
    2924:	8e 81       	ldd	r24, Y+6	; 0x06
    2926:	9f 81       	ldd	r25, Y+7	; 0x07
    2928:	81 30       	cpi	r24, 0x01	; 1
    292a:	91 05       	cpc	r25, r1
    292c:	59 f1       	breq	.+86     	; 0x2984 <DIO_voidSetPinValue+0xb4>
    292e:	2e 81       	ldd	r18, Y+6	; 0x06
    2930:	3f 81       	ldd	r19, Y+7	; 0x07
    2932:	22 30       	cpi	r18, 0x02	; 2
    2934:	31 05       	cpc	r19, r1
    2936:	2c f4       	brge	.+10     	; 0x2942 <DIO_voidSetPinValue+0x72>
    2938:	8e 81       	ldd	r24, Y+6	; 0x06
    293a:	9f 81       	ldd	r25, Y+7	; 0x07
    293c:	00 97       	sbiw	r24, 0x00	; 0
    293e:	69 f0       	breq	.+26     	; 0x295a <DIO_voidSetPinValue+0x8a>
    2940:	ce c0       	rjmp	.+412    	; 0x2ade <DIO_voidSetPinValue+0x20e>
    2942:	2e 81       	ldd	r18, Y+6	; 0x06
    2944:	3f 81       	ldd	r19, Y+7	; 0x07
    2946:	22 30       	cpi	r18, 0x02	; 2
    2948:	31 05       	cpc	r19, r1
    294a:	89 f1       	breq	.+98     	; 0x29ae <DIO_voidSetPinValue+0xde>
    294c:	8e 81       	ldd	r24, Y+6	; 0x06
    294e:	9f 81       	ldd	r25, Y+7	; 0x07
    2950:	83 30       	cpi	r24, 0x03	; 3
    2952:	91 05       	cpc	r25, r1
    2954:	09 f4       	brne	.+2      	; 0x2958 <DIO_voidSetPinValue+0x88>
    2956:	40 c0       	rjmp	.+128    	; 0x29d8 <DIO_voidSetPinValue+0x108>
    2958:	c2 c0       	rjmp	.+388    	; 0x2ade <DIO_voidSetPinValue+0x20e>
                            {
                                case PORTA :    CLEAR_BIT( PORTA_REG ,Copy_u8PinNumber );   break;
    295a:	ab e3       	ldi	r26, 0x3B	; 59
    295c:	b0 e0       	ldi	r27, 0x00	; 0
    295e:	eb e3       	ldi	r30, 0x3B	; 59
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	80 81       	ld	r24, Z
    2964:	48 2f       	mov	r20, r24
    2966:	8a 81       	ldd	r24, Y+2	; 0x02
    2968:	28 2f       	mov	r18, r24
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	02 2e       	mov	r0, r18
    2972:	02 c0       	rjmp	.+4      	; 0x2978 <DIO_voidSetPinValue+0xa8>
    2974:	88 0f       	add	r24, r24
    2976:	99 1f       	adc	r25, r25
    2978:	0a 94       	dec	r0
    297a:	e2 f7       	brpl	.-8      	; 0x2974 <DIO_voidSetPinValue+0xa4>
    297c:	80 95       	com	r24
    297e:	84 23       	and	r24, r20
    2980:	8c 93       	st	X, r24
    2982:	ad c0       	rjmp	.+346    	; 0x2ade <DIO_voidSetPinValue+0x20e>
                                case PORTB :    CLEAR_BIT( PORTB_REG ,Copy_u8PinNumber );   break;
    2984:	a8 e3       	ldi	r26, 0x38	; 56
    2986:	b0 e0       	ldi	r27, 0x00	; 0
    2988:	e8 e3       	ldi	r30, 0x38	; 56
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	80 81       	ld	r24, Z
    298e:	48 2f       	mov	r20, r24
    2990:	8a 81       	ldd	r24, Y+2	; 0x02
    2992:	28 2f       	mov	r18, r24
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	02 2e       	mov	r0, r18
    299c:	02 c0       	rjmp	.+4      	; 0x29a2 <DIO_voidSetPinValue+0xd2>
    299e:	88 0f       	add	r24, r24
    29a0:	99 1f       	adc	r25, r25
    29a2:	0a 94       	dec	r0
    29a4:	e2 f7       	brpl	.-8      	; 0x299e <DIO_voidSetPinValue+0xce>
    29a6:	80 95       	com	r24
    29a8:	84 23       	and	r24, r20
    29aa:	8c 93       	st	X, r24
    29ac:	98 c0       	rjmp	.+304    	; 0x2ade <DIO_voidSetPinValue+0x20e>
                                case PORTC :    CLEAR_BIT( PORTC_REG ,Copy_u8PinNumber );   break;
    29ae:	a5 e3       	ldi	r26, 0x35	; 53
    29b0:	b0 e0       	ldi	r27, 0x00	; 0
    29b2:	e5 e3       	ldi	r30, 0x35	; 53
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	80 81       	ld	r24, Z
    29b8:	48 2f       	mov	r20, r24
    29ba:	8a 81       	ldd	r24, Y+2	; 0x02
    29bc:	28 2f       	mov	r18, r24
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	02 2e       	mov	r0, r18
    29c6:	02 c0       	rjmp	.+4      	; 0x29cc <DIO_voidSetPinValue+0xfc>
    29c8:	88 0f       	add	r24, r24
    29ca:	99 1f       	adc	r25, r25
    29cc:	0a 94       	dec	r0
    29ce:	e2 f7       	brpl	.-8      	; 0x29c8 <DIO_voidSetPinValue+0xf8>
    29d0:	80 95       	com	r24
    29d2:	84 23       	and	r24, r20
    29d4:	8c 93       	st	X, r24
    29d6:	83 c0       	rjmp	.+262    	; 0x2ade <DIO_voidSetPinValue+0x20e>
                                case PORTD :    CLEAR_BIT( PORTD_REG ,Copy_u8PinNumber );   break;
    29d8:	a2 e3       	ldi	r26, 0x32	; 50
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	e2 e3       	ldi	r30, 0x32	; 50
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	48 2f       	mov	r20, r24
    29e4:	8a 81       	ldd	r24, Y+2	; 0x02
    29e6:	28 2f       	mov	r18, r24
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	02 2e       	mov	r0, r18
    29f0:	02 c0       	rjmp	.+4      	; 0x29f6 <DIO_voidSetPinValue+0x126>
    29f2:	88 0f       	add	r24, r24
    29f4:	99 1f       	adc	r25, r25
    29f6:	0a 94       	dec	r0
    29f8:	e2 f7       	brpl	.-8      	; 0x29f2 <DIO_voidSetPinValue+0x122>
    29fa:	80 95       	com	r24
    29fc:	84 23       	and	r24, r20
    29fe:	8c 93       	st	X, r24
    2a00:	6e c0       	rjmp	.+220    	; 0x2ade <DIO_voidSetPinValue+0x20e>
                                default    :                                                break; 
                            }
                            break;
            case HIGH :   switch(Copy_u8PortNumber)
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	28 2f       	mov	r18, r24
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	3d 83       	std	Y+5, r19	; 0x05
    2a0a:	2c 83       	std	Y+4, r18	; 0x04
    2a0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a0e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a10:	81 30       	cpi	r24, 0x01	; 1
    2a12:	91 05       	cpc	r25, r1
    2a14:	49 f1       	breq	.+82     	; 0x2a68 <DIO_voidSetPinValue+0x198>
    2a16:	2c 81       	ldd	r18, Y+4	; 0x04
    2a18:	3d 81       	ldd	r19, Y+5	; 0x05
    2a1a:	22 30       	cpi	r18, 0x02	; 2
    2a1c:	31 05       	cpc	r19, r1
    2a1e:	2c f4       	brge	.+10     	; 0x2a2a <DIO_voidSetPinValue+0x15a>
    2a20:	8c 81       	ldd	r24, Y+4	; 0x04
    2a22:	9d 81       	ldd	r25, Y+5	; 0x05
    2a24:	00 97       	sbiw	r24, 0x00	; 0
    2a26:	61 f0       	breq	.+24     	; 0x2a40 <DIO_voidSetPinValue+0x170>
    2a28:	5a c0       	rjmp	.+180    	; 0x2ade <DIO_voidSetPinValue+0x20e>
    2a2a:	2c 81       	ldd	r18, Y+4	; 0x04
    2a2c:	3d 81       	ldd	r19, Y+5	; 0x05
    2a2e:	22 30       	cpi	r18, 0x02	; 2
    2a30:	31 05       	cpc	r19, r1
    2a32:	71 f1       	breq	.+92     	; 0x2a90 <DIO_voidSetPinValue+0x1c0>
    2a34:	8c 81       	ldd	r24, Y+4	; 0x04
    2a36:	9d 81       	ldd	r25, Y+5	; 0x05
    2a38:	83 30       	cpi	r24, 0x03	; 3
    2a3a:	91 05       	cpc	r25, r1
    2a3c:	e9 f1       	breq	.+122    	; 0x2ab8 <DIO_voidSetPinValue+0x1e8>
    2a3e:	4f c0       	rjmp	.+158    	; 0x2ade <DIO_voidSetPinValue+0x20e>
                            {
                                case PORTA :    SET_BIT( PORTA_REG ,Copy_u8PinNumber );     break;
    2a40:	ab e3       	ldi	r26, 0x3B	; 59
    2a42:	b0 e0       	ldi	r27, 0x00	; 0
    2a44:	eb e3       	ldi	r30, 0x3B	; 59
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	80 81       	ld	r24, Z
    2a4a:	48 2f       	mov	r20, r24
    2a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4e:	28 2f       	mov	r18, r24
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	02 2e       	mov	r0, r18
    2a58:	02 c0       	rjmp	.+4      	; 0x2a5e <DIO_voidSetPinValue+0x18e>
    2a5a:	88 0f       	add	r24, r24
    2a5c:	99 1f       	adc	r25, r25
    2a5e:	0a 94       	dec	r0
    2a60:	e2 f7       	brpl	.-8      	; 0x2a5a <DIO_voidSetPinValue+0x18a>
    2a62:	84 2b       	or	r24, r20
    2a64:	8c 93       	st	X, r24
    2a66:	3b c0       	rjmp	.+118    	; 0x2ade <DIO_voidSetPinValue+0x20e>
                                case PORTB :    SET_BIT( PORTB_REG ,Copy_u8PinNumber );     break;
    2a68:	a8 e3       	ldi	r26, 0x38	; 56
    2a6a:	b0 e0       	ldi	r27, 0x00	; 0
    2a6c:	e8 e3       	ldi	r30, 0x38	; 56
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	80 81       	ld	r24, Z
    2a72:	48 2f       	mov	r20, r24
    2a74:	8a 81       	ldd	r24, Y+2	; 0x02
    2a76:	28 2f       	mov	r18, r24
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	02 2e       	mov	r0, r18
    2a80:	02 c0       	rjmp	.+4      	; 0x2a86 <DIO_voidSetPinValue+0x1b6>
    2a82:	88 0f       	add	r24, r24
    2a84:	99 1f       	adc	r25, r25
    2a86:	0a 94       	dec	r0
    2a88:	e2 f7       	brpl	.-8      	; 0x2a82 <DIO_voidSetPinValue+0x1b2>
    2a8a:	84 2b       	or	r24, r20
    2a8c:	8c 93       	st	X, r24
    2a8e:	27 c0       	rjmp	.+78     	; 0x2ade <DIO_voidSetPinValue+0x20e>
                                case PORTC :    SET_BIT( PORTC_REG ,Copy_u8PinNumber );     break;
    2a90:	a5 e3       	ldi	r26, 0x35	; 53
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	e5 e3       	ldi	r30, 0x35	; 53
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z
    2a9a:	48 2f       	mov	r20, r24
    2a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9e:	28 2f       	mov	r18, r24
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	02 2e       	mov	r0, r18
    2aa8:	02 c0       	rjmp	.+4      	; 0x2aae <DIO_voidSetPinValue+0x1de>
    2aaa:	88 0f       	add	r24, r24
    2aac:	99 1f       	adc	r25, r25
    2aae:	0a 94       	dec	r0
    2ab0:	e2 f7       	brpl	.-8      	; 0x2aaa <DIO_voidSetPinValue+0x1da>
    2ab2:	84 2b       	or	r24, r20
    2ab4:	8c 93       	st	X, r24
    2ab6:	13 c0       	rjmp	.+38     	; 0x2ade <DIO_voidSetPinValue+0x20e>
                                case PORTD :    SET_BIT( PORTD_REG ,Copy_u8PinNumber );     break;
    2ab8:	a2 e3       	ldi	r26, 0x32	; 50
    2aba:	b0 e0       	ldi	r27, 0x00	; 0
    2abc:	e2 e3       	ldi	r30, 0x32	; 50
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	80 81       	ld	r24, Z
    2ac2:	48 2f       	mov	r20, r24
    2ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac6:	28 2f       	mov	r18, r24
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	02 2e       	mov	r0, r18
    2ad0:	02 c0       	rjmp	.+4      	; 0x2ad6 <DIO_voidSetPinValue+0x206>
    2ad2:	88 0f       	add	r24, r24
    2ad4:	99 1f       	adc	r25, r25
    2ad6:	0a 94       	dec	r0
    2ad8:	e2 f7       	brpl	.-8      	; 0x2ad2 <DIO_voidSetPinValue+0x202>
    2ada:	84 2b       	or	r24, r20
    2adc:	8c 93       	st	X, r24
                            break;
            default :       break;
                            
        }
    }
}
    2ade:	29 96       	adiw	r28, 0x09	; 9
    2ae0:	0f b6       	in	r0, 0x3f	; 63
    2ae2:	f8 94       	cli
    2ae4:	de bf       	out	0x3e, r29	; 62
    2ae6:	0f be       	out	0x3f, r0	; 63
    2ae8:	cd bf       	out	0x3d, r28	; 61
    2aea:	cf 91       	pop	r28
    2aec:	df 91       	pop	r29
    2aee:	08 95       	ret

00002af0 <DIO_voidSetPortValue>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                          */
/* Fun. Argument2: Copy_u8Value { HIGH , LOW }                                            */
/* Fun. Return : void                                                                     */
/******************************************************************************************/
void DIO_voidSetPortValue (u8 Copy_u8PortNumber, u8 Copy_u8Value )
{
    2af0:	df 93       	push	r29
    2af2:	cf 93       	push	r28
    2af4:	00 d0       	rcall	.+0      	; 0x2af6 <DIO_voidSetPortValue+0x6>
    2af6:	00 d0       	rcall	.+0      	; 0x2af8 <DIO_voidSetPortValue+0x8>
    2af8:	cd b7       	in	r28, 0x3d	; 61
    2afa:	de b7       	in	r29, 0x3e	; 62
    2afc:	89 83       	std	Y+1, r24	; 0x01
    2afe:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
    2b00:	89 81       	ldd	r24, Y+1	; 0x01
    2b02:	84 30       	cpi	r24, 0x04	; 4
    2b04:	90 f5       	brcc	.+100    	; 0x2b6a <DIO_voidSetPortValue+0x7a>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    2b06:	89 81       	ldd	r24, Y+1	; 0x01
    2b08:	28 2f       	mov	r18, r24
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	3c 83       	std	Y+4, r19	; 0x04
    2b0e:	2b 83       	std	Y+3, r18	; 0x03
    2b10:	8b 81       	ldd	r24, Y+3	; 0x03
    2b12:	9c 81       	ldd	r25, Y+4	; 0x04
    2b14:	81 30       	cpi	r24, 0x01	; 1
    2b16:	91 05       	cpc	r25, r1
    2b18:	d1 f0       	breq	.+52     	; 0x2b4e <DIO_voidSetPortValue+0x5e>
    2b1a:	2b 81       	ldd	r18, Y+3	; 0x03
    2b1c:	3c 81       	ldd	r19, Y+4	; 0x04
    2b1e:	22 30       	cpi	r18, 0x02	; 2
    2b20:	31 05       	cpc	r19, r1
    2b22:	2c f4       	brge	.+10     	; 0x2b2e <DIO_voidSetPortValue+0x3e>
    2b24:	8b 81       	ldd	r24, Y+3	; 0x03
    2b26:	9c 81       	ldd	r25, Y+4	; 0x04
    2b28:	00 97       	sbiw	r24, 0x00	; 0
    2b2a:	61 f0       	breq	.+24     	; 0x2b44 <DIO_voidSetPortValue+0x54>
    2b2c:	1e c0       	rjmp	.+60     	; 0x2b6a <DIO_voidSetPortValue+0x7a>
    2b2e:	2b 81       	ldd	r18, Y+3	; 0x03
    2b30:	3c 81       	ldd	r19, Y+4	; 0x04
    2b32:	22 30       	cpi	r18, 0x02	; 2
    2b34:	31 05       	cpc	r19, r1
    2b36:	81 f0       	breq	.+32     	; 0x2b58 <DIO_voidSetPortValue+0x68>
    2b38:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b3c:	83 30       	cpi	r24, 0x03	; 3
    2b3e:	91 05       	cpc	r25, r1
    2b40:	81 f0       	breq	.+32     	; 0x2b62 <DIO_voidSetPortValue+0x72>
    2b42:	13 c0       	rjmp	.+38     	; 0x2b6a <DIO_voidSetPortValue+0x7a>
        {
            case PORTA: PORTA_REG = Copy_u8Value;
    2b44:	eb e3       	ldi	r30, 0x3B	; 59
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4a:	80 83       	st	Z, r24
    2b4c:	0e c0       	rjmp	.+28     	; 0x2b6a <DIO_voidSetPortValue+0x7a>
                        break;
    
            case PORTB: PORTB_REG = Copy_u8Value;
    2b4e:	e8 e3       	ldi	r30, 0x38	; 56
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	8a 81       	ldd	r24, Y+2	; 0x02
    2b54:	80 83       	st	Z, r24
    2b56:	09 c0       	rjmp	.+18     	; 0x2b6a <DIO_voidSetPortValue+0x7a>
                        break;
    
            case PORTC: PORTC_REG = Copy_u8Value;
    2b58:	e5 e3       	ldi	r30, 0x35	; 53
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5e:	80 83       	st	Z, r24
    2b60:	04 c0       	rjmp	.+8      	; 0x2b6a <DIO_voidSetPortValue+0x7a>
                        break;
    
            case PORTD: PORTD_REG = Copy_u8Value;
    2b62:	e2 e3       	ldi	r30, 0x32	; 50
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	8a 81       	ldd	r24, Y+2	; 0x02
    2b68:	80 83       	st	Z, r24
                        break;
            default:
                        break;
        }
    }
}
    2b6a:	0f 90       	pop	r0
    2b6c:	0f 90       	pop	r0
    2b6e:	0f 90       	pop	r0
    2b70:	0f 90       	pop	r0
    2b72:	cf 91       	pop	r28
    2b74:	df 91       	pop	r29
    2b76:	08 95       	ret

00002b78 <DIO_u8GetPinValue>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }            */
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }  */
/* Fun. Return :  unsigned char   { HIGH , LOW }                            */
/****************************************************************************/
u8 DIO_u8GetPinValue (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber )
{
    2b78:	df 93       	push	r29
    2b7a:	cf 93       	push	r28
    2b7c:	00 d0       	rcall	.+0      	; 0x2b7e <DIO_u8GetPinValue+0x6>
    2b7e:	00 d0       	rcall	.+0      	; 0x2b80 <DIO_u8GetPinValue+0x8>
    2b80:	0f 92       	push	r0
    2b82:	cd b7       	in	r28, 0x3d	; 61
    2b84:	de b7       	in	r29, 0x3e	; 62
    2b86:	8a 83       	std	Y+2, r24	; 0x02
    2b88:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Variable;
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD || Copy_u8PinNumber > PIN7 )
    2b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8c:	84 30       	cpi	r24, 0x04	; 4
    2b8e:	08 f0       	brcs	.+2      	; 0x2b92 <DIO_u8GetPinValue+0x1a>
    2b90:	6a c0       	rjmp	.+212    	; 0x2c66 <DIO_u8GetPinValue+0xee>
    2b92:	8b 81       	ldd	r24, Y+3	; 0x03
    2b94:	88 30       	cpi	r24, 0x08	; 8
    2b96:	08 f0       	brcs	.+2      	; 0x2b9a <DIO_u8GetPinValue+0x22>
    2b98:	66 c0       	rjmp	.+204    	; 0x2c66 <DIO_u8GetPinValue+0xee>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    2b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9c:	28 2f       	mov	r18, r24
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	3d 83       	std	Y+5, r19	; 0x05
    2ba2:	2c 83       	std	Y+4, r18	; 0x04
    2ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ba8:	81 30       	cpi	r24, 0x01	; 1
    2baa:	91 05       	cpc	r25, r1
    2bac:	39 f1       	breq	.+78     	; 0x2bfc <DIO_u8GetPinValue+0x84>
    2bae:	2c 81       	ldd	r18, Y+4	; 0x04
    2bb0:	3d 81       	ldd	r19, Y+5	; 0x05
    2bb2:	22 30       	cpi	r18, 0x02	; 2
    2bb4:	31 05       	cpc	r19, r1
    2bb6:	2c f4       	brge	.+10     	; 0x2bc2 <DIO_u8GetPinValue+0x4a>
    2bb8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bba:	9d 81       	ldd	r25, Y+5	; 0x05
    2bbc:	00 97       	sbiw	r24, 0x00	; 0
    2bbe:	61 f0       	breq	.+24     	; 0x2bd8 <DIO_u8GetPinValue+0x60>
    2bc0:	52 c0       	rjmp	.+164    	; 0x2c66 <DIO_u8GetPinValue+0xee>
    2bc2:	2c 81       	ldd	r18, Y+4	; 0x04
    2bc4:	3d 81       	ldd	r19, Y+5	; 0x05
    2bc6:	22 30       	cpi	r18, 0x02	; 2
    2bc8:	31 05       	cpc	r19, r1
    2bca:	51 f1       	breq	.+84     	; 0x2c20 <DIO_u8GetPinValue+0xa8>
    2bcc:	8c 81       	ldd	r24, Y+4	; 0x04
    2bce:	9d 81       	ldd	r25, Y+5	; 0x05
    2bd0:	83 30       	cpi	r24, 0x03	; 3
    2bd2:	91 05       	cpc	r25, r1
    2bd4:	b9 f1       	breq	.+110    	; 0x2c44 <DIO_u8GetPinValue+0xcc>
    2bd6:	47 c0       	rjmp	.+142    	; 0x2c66 <DIO_u8GetPinValue+0xee>
        {
            case PORTA :    Local_u8Variable = GET_BIT( PINA_REG ,Copy_u8PinNumber );   break;   
    2bd8:	e9 e3       	ldi	r30, 0x39	; 57
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	80 81       	ld	r24, Z
    2bde:	48 2f       	mov	r20, r24
    2be0:	8b 81       	ldd	r24, Y+3	; 0x03
    2be2:	28 2f       	mov	r18, r24
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	02 2e       	mov	r0, r18
    2bec:	02 c0       	rjmp	.+4      	; 0x2bf2 <DIO_u8GetPinValue+0x7a>
    2bee:	88 0f       	add	r24, r24
    2bf0:	99 1f       	adc	r25, r25
    2bf2:	0a 94       	dec	r0
    2bf4:	e2 f7       	brpl	.-8      	; 0x2bee <DIO_u8GetPinValue+0x76>
    2bf6:	84 23       	and	r24, r20
    2bf8:	89 83       	std	Y+1, r24	; 0x01
    2bfa:	35 c0       	rjmp	.+106    	; 0x2c66 <DIO_u8GetPinValue+0xee>
            case PORTB :    Local_u8Variable = GET_BIT( PINB_REG ,Copy_u8PinNumber );   break;
    2bfc:	e6 e3       	ldi	r30, 0x36	; 54
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	80 81       	ld	r24, Z
    2c02:	48 2f       	mov	r20, r24
    2c04:	8b 81       	ldd	r24, Y+3	; 0x03
    2c06:	28 2f       	mov	r18, r24
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	02 2e       	mov	r0, r18
    2c10:	02 c0       	rjmp	.+4      	; 0x2c16 <DIO_u8GetPinValue+0x9e>
    2c12:	88 0f       	add	r24, r24
    2c14:	99 1f       	adc	r25, r25
    2c16:	0a 94       	dec	r0
    2c18:	e2 f7       	brpl	.-8      	; 0x2c12 <DIO_u8GetPinValue+0x9a>
    2c1a:	84 23       	and	r24, r20
    2c1c:	89 83       	std	Y+1, r24	; 0x01
    2c1e:	23 c0       	rjmp	.+70     	; 0x2c66 <DIO_u8GetPinValue+0xee>
            case PORTC :    Local_u8Variable = GET_BIT( PINC_REG ,Copy_u8PinNumber );   break;
    2c20:	e3 e3       	ldi	r30, 0x33	; 51
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	80 81       	ld	r24, Z
    2c26:	48 2f       	mov	r20, r24
    2c28:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2a:	28 2f       	mov	r18, r24
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	81 e0       	ldi	r24, 0x01	; 1
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	02 2e       	mov	r0, r18
    2c34:	02 c0       	rjmp	.+4      	; 0x2c3a <DIO_u8GetPinValue+0xc2>
    2c36:	88 0f       	add	r24, r24
    2c38:	99 1f       	adc	r25, r25
    2c3a:	0a 94       	dec	r0
    2c3c:	e2 f7       	brpl	.-8      	; 0x2c36 <DIO_u8GetPinValue+0xbe>
    2c3e:	84 23       	and	r24, r20
    2c40:	89 83       	std	Y+1, r24	; 0x01
    2c42:	11 c0       	rjmp	.+34     	; 0x2c66 <DIO_u8GetPinValue+0xee>
            case PORTD :    Local_u8Variable = GET_BIT( PIND_REG ,Copy_u8PinNumber );   break;
    2c44:	e0 e3       	ldi	r30, 0x30	; 48
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	80 81       	ld	r24, Z
    2c4a:	48 2f       	mov	r20, r24
    2c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4e:	28 2f       	mov	r18, r24
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	02 2e       	mov	r0, r18
    2c58:	02 c0       	rjmp	.+4      	; 0x2c5e <DIO_u8GetPinValue+0xe6>
    2c5a:	88 0f       	add	r24, r24
    2c5c:	99 1f       	adc	r25, r25
    2c5e:	0a 94       	dec	r0
    2c60:	e2 f7       	brpl	.-8      	; 0x2c5a <DIO_u8GetPinValue+0xe2>
    2c62:	84 23       	and	r24, r20
    2c64:	89 83       	std	Y+1, r24	; 0x01
            default :                                                                   break;
        }
    }
    return Local_u8Variable ;
    2c66:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c68:	0f 90       	pop	r0
    2c6a:	0f 90       	pop	r0
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
    2c70:	0f 90       	pop	r0
    2c72:	cf 91       	pop	r28
    2c74:	df 91       	pop	r29
    2c76:	08 95       	ret

00002c78 <DIO_u8GetPortValue>:
/* Description : Read i/p of the whole Port register                        */
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }            */
/* Fun. Return : u8 {0bxxxxxxxx} (x) is a value in an one Pin on the Port   */
/****************************************************************************/
u8 DIO_u8GetPortValue (u8 Copy_u8PortNumber )
{
    2c78:	df 93       	push	r29
    2c7a:	cf 93       	push	r28
    2c7c:	00 d0       	rcall	.+0      	; 0x2c7e <DIO_u8GetPortValue+0x6>
    2c7e:	00 d0       	rcall	.+0      	; 0x2c80 <DIO_u8GetPortValue+0x8>
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
    2c84:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8Variable;
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
    2c86:	8a 81       	ldd	r24, Y+2	; 0x02
    2c88:	84 30       	cpi	r24, 0x04	; 4
    2c8a:	90 f5       	brcc	.+100    	; 0x2cf0 <DIO_u8GetPortValue+0x78>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    2c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8e:	28 2f       	mov	r18, r24
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	3c 83       	std	Y+4, r19	; 0x04
    2c94:	2b 83       	std	Y+3, r18	; 0x03
    2c96:	8b 81       	ldd	r24, Y+3	; 0x03
    2c98:	9c 81       	ldd	r25, Y+4	; 0x04
    2c9a:	81 30       	cpi	r24, 0x01	; 1
    2c9c:	91 05       	cpc	r25, r1
    2c9e:	d1 f0       	breq	.+52     	; 0x2cd4 <DIO_u8GetPortValue+0x5c>
    2ca0:	2b 81       	ldd	r18, Y+3	; 0x03
    2ca2:	3c 81       	ldd	r19, Y+4	; 0x04
    2ca4:	22 30       	cpi	r18, 0x02	; 2
    2ca6:	31 05       	cpc	r19, r1
    2ca8:	2c f4       	brge	.+10     	; 0x2cb4 <DIO_u8GetPortValue+0x3c>
    2caa:	8b 81       	ldd	r24, Y+3	; 0x03
    2cac:	9c 81       	ldd	r25, Y+4	; 0x04
    2cae:	00 97       	sbiw	r24, 0x00	; 0
    2cb0:	61 f0       	breq	.+24     	; 0x2cca <DIO_u8GetPortValue+0x52>
    2cb2:	1e c0       	rjmp	.+60     	; 0x2cf0 <DIO_u8GetPortValue+0x78>
    2cb4:	2b 81       	ldd	r18, Y+3	; 0x03
    2cb6:	3c 81       	ldd	r19, Y+4	; 0x04
    2cb8:	22 30       	cpi	r18, 0x02	; 2
    2cba:	31 05       	cpc	r19, r1
    2cbc:	81 f0       	breq	.+32     	; 0x2cde <DIO_u8GetPortValue+0x66>
    2cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc2:	83 30       	cpi	r24, 0x03	; 3
    2cc4:	91 05       	cpc	r25, r1
    2cc6:	81 f0       	breq	.+32     	; 0x2ce8 <DIO_u8GetPortValue+0x70>
    2cc8:	13 c0       	rjmp	.+38     	; 0x2cf0 <DIO_u8GetPortValue+0x78>
        {
            case PORTA :    Local_u8Variable = PINA_REG ;   break;  
    2cca:	e9 e3       	ldi	r30, 0x39	; 57
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	80 81       	ld	r24, Z
    2cd0:	89 83       	std	Y+1, r24	; 0x01
    2cd2:	0e c0       	rjmp	.+28     	; 0x2cf0 <DIO_u8GetPortValue+0x78>
            case PORTB :    Local_u8Variable = PINB_REG ;   break;
    2cd4:	e6 e3       	ldi	r30, 0x36	; 54
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	80 81       	ld	r24, Z
    2cda:	89 83       	std	Y+1, r24	; 0x01
    2cdc:	09 c0       	rjmp	.+18     	; 0x2cf0 <DIO_u8GetPortValue+0x78>
            case PORTC :    Local_u8Variable = PINC_REG ;   break;
    2cde:	e3 e3       	ldi	r30, 0x33	; 51
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	80 81       	ld	r24, Z
    2ce4:	89 83       	std	Y+1, r24	; 0x01
    2ce6:	04 c0       	rjmp	.+8      	; 0x2cf0 <DIO_u8GetPortValue+0x78>
            case PORTD :    Local_u8Variable = PIND_REG ;   break;
    2ce8:	e0 e3       	ldi	r30, 0x30	; 48
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	80 81       	ld	r24, Z
    2cee:	89 83       	std	Y+1, r24	; 0x01
            default    :                                    break;
        }
    }
    return Local_u8Variable ;
    2cf0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cf2:	0f 90       	pop	r0
    2cf4:	0f 90       	pop	r0
    2cf6:	0f 90       	pop	r0
    2cf8:	0f 90       	pop	r0
    2cfa:	cf 91       	pop	r28
    2cfc:	df 91       	pop	r29
    2cfe:	08 95       	ret

00002d00 <DIO_voidTogglePinValue>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }            */
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }  */
/* Fun. Return : void                                                       */
/****************************************************************************/
void DIO_voidTogglePinValue (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber )
{
    2d00:	df 93       	push	r29
    2d02:	cf 93       	push	r28
    2d04:	00 d0       	rcall	.+0      	; 0x2d06 <DIO_voidTogglePinValue+0x6>
    2d06:	00 d0       	rcall	.+0      	; 0x2d08 <DIO_voidTogglePinValue+0x8>
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
    2d0c:	89 83       	std	Y+1, r24	; 0x01
    2d0e:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD || Copy_u8PinNumber > PIN7 )
    2d10:	89 81       	ldd	r24, Y+1	; 0x01
    2d12:	84 30       	cpi	r24, 0x04	; 4
    2d14:	08 f0       	brcs	.+2      	; 0x2d18 <DIO_voidTogglePinValue+0x18>
    2d16:	72 c0       	rjmp	.+228    	; 0x2dfc <DIO_voidTogglePinValue+0xfc>
    2d18:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1a:	88 30       	cpi	r24, 0x08	; 8
    2d1c:	08 f0       	brcs	.+2      	; 0x2d20 <DIO_voidTogglePinValue+0x20>
    2d1e:	6e c0       	rjmp	.+220    	; 0x2dfc <DIO_voidTogglePinValue+0xfc>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    2d20:	89 81       	ldd	r24, Y+1	; 0x01
    2d22:	28 2f       	mov	r18, r24
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	3c 83       	std	Y+4, r19	; 0x04
    2d28:	2b 83       	std	Y+3, r18	; 0x03
    2d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d2e:	81 30       	cpi	r24, 0x01	; 1
    2d30:	91 05       	cpc	r25, r1
    2d32:	49 f1       	breq	.+82     	; 0x2d86 <DIO_voidTogglePinValue+0x86>
    2d34:	2b 81       	ldd	r18, Y+3	; 0x03
    2d36:	3c 81       	ldd	r19, Y+4	; 0x04
    2d38:	22 30       	cpi	r18, 0x02	; 2
    2d3a:	31 05       	cpc	r19, r1
    2d3c:	2c f4       	brge	.+10     	; 0x2d48 <DIO_voidTogglePinValue+0x48>
    2d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d40:	9c 81       	ldd	r25, Y+4	; 0x04
    2d42:	00 97       	sbiw	r24, 0x00	; 0
    2d44:	61 f0       	breq	.+24     	; 0x2d5e <DIO_voidTogglePinValue+0x5e>
    2d46:	5a c0       	rjmp	.+180    	; 0x2dfc <DIO_voidTogglePinValue+0xfc>
    2d48:	2b 81       	ldd	r18, Y+3	; 0x03
    2d4a:	3c 81       	ldd	r19, Y+4	; 0x04
    2d4c:	22 30       	cpi	r18, 0x02	; 2
    2d4e:	31 05       	cpc	r19, r1
    2d50:	71 f1       	breq	.+92     	; 0x2dae <DIO_voidTogglePinValue+0xae>
    2d52:	8b 81       	ldd	r24, Y+3	; 0x03
    2d54:	9c 81       	ldd	r25, Y+4	; 0x04
    2d56:	83 30       	cpi	r24, 0x03	; 3
    2d58:	91 05       	cpc	r25, r1
    2d5a:	e9 f1       	breq	.+122    	; 0x2dd6 <DIO_voidTogglePinValue+0xd6>
    2d5c:	4f c0       	rjmp	.+158    	; 0x2dfc <DIO_voidTogglePinValue+0xfc>
        {
            case PORTA :    TOGGLE_BIT( PORTA_REG, Copy_u8PinNumber );     break;
    2d5e:	ab e3       	ldi	r26, 0x3B	; 59
    2d60:	b0 e0       	ldi	r27, 0x00	; 0
    2d62:	eb e3       	ldi	r30, 0x3B	; 59
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	80 81       	ld	r24, Z
    2d68:	48 2f       	mov	r20, r24
    2d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6c:	28 2f       	mov	r18, r24
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	02 2e       	mov	r0, r18
    2d76:	02 c0       	rjmp	.+4      	; 0x2d7c <DIO_voidTogglePinValue+0x7c>
    2d78:	88 0f       	add	r24, r24
    2d7a:	99 1f       	adc	r25, r25
    2d7c:	0a 94       	dec	r0
    2d7e:	e2 f7       	brpl	.-8      	; 0x2d78 <DIO_voidTogglePinValue+0x78>
    2d80:	84 27       	eor	r24, r20
    2d82:	8c 93       	st	X, r24
    2d84:	3b c0       	rjmp	.+118    	; 0x2dfc <DIO_voidTogglePinValue+0xfc>
            case PORTB :    TOGGLE_BIT( PORTB_REG, Copy_u8PinNumber );     break;
    2d86:	a8 e3       	ldi	r26, 0x38	; 56
    2d88:	b0 e0       	ldi	r27, 0x00	; 0
    2d8a:	e8 e3       	ldi	r30, 0x38	; 56
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	80 81       	ld	r24, Z
    2d90:	48 2f       	mov	r20, r24
    2d92:	8a 81       	ldd	r24, Y+2	; 0x02
    2d94:	28 2f       	mov	r18, r24
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	02 2e       	mov	r0, r18
    2d9e:	02 c0       	rjmp	.+4      	; 0x2da4 <DIO_voidTogglePinValue+0xa4>
    2da0:	88 0f       	add	r24, r24
    2da2:	99 1f       	adc	r25, r25
    2da4:	0a 94       	dec	r0
    2da6:	e2 f7       	brpl	.-8      	; 0x2da0 <DIO_voidTogglePinValue+0xa0>
    2da8:	84 27       	eor	r24, r20
    2daa:	8c 93       	st	X, r24
    2dac:	27 c0       	rjmp	.+78     	; 0x2dfc <DIO_voidTogglePinValue+0xfc>
            case PORTC :    TOGGLE_BIT( PORTC_REG, Copy_u8PinNumber );     break;
    2dae:	a5 e3       	ldi	r26, 0x35	; 53
    2db0:	b0 e0       	ldi	r27, 0x00	; 0
    2db2:	e5 e3       	ldi	r30, 0x35	; 53
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
    2db6:	80 81       	ld	r24, Z
    2db8:	48 2f       	mov	r20, r24
    2dba:	8a 81       	ldd	r24, Y+2	; 0x02
    2dbc:	28 2f       	mov	r18, r24
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	02 2e       	mov	r0, r18
    2dc6:	02 c0       	rjmp	.+4      	; 0x2dcc <DIO_voidTogglePinValue+0xcc>
    2dc8:	88 0f       	add	r24, r24
    2dca:	99 1f       	adc	r25, r25
    2dcc:	0a 94       	dec	r0
    2dce:	e2 f7       	brpl	.-8      	; 0x2dc8 <DIO_voidTogglePinValue+0xc8>
    2dd0:	84 27       	eor	r24, r20
    2dd2:	8c 93       	st	X, r24
    2dd4:	13 c0       	rjmp	.+38     	; 0x2dfc <DIO_voidTogglePinValue+0xfc>
            case PORTD :    TOGGLE_BIT( PORTD_REG, Copy_u8PinNumber );     break;
    2dd6:	a2 e3       	ldi	r26, 0x32	; 50
    2dd8:	b0 e0       	ldi	r27, 0x00	; 0
    2dda:	e2 e3       	ldi	r30, 0x32	; 50
    2ddc:	f0 e0       	ldi	r31, 0x00	; 0
    2dde:	80 81       	ld	r24, Z
    2de0:	48 2f       	mov	r20, r24
    2de2:	8a 81       	ldd	r24, Y+2	; 0x02
    2de4:	28 2f       	mov	r18, r24
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	81 e0       	ldi	r24, 0x01	; 1
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	02 2e       	mov	r0, r18
    2dee:	02 c0       	rjmp	.+4      	; 0x2df4 <DIO_voidTogglePinValue+0xf4>
    2df0:	88 0f       	add	r24, r24
    2df2:	99 1f       	adc	r25, r25
    2df4:	0a 94       	dec	r0
    2df6:	e2 f7       	brpl	.-8      	; 0x2df0 <DIO_voidTogglePinValue+0xf0>
    2df8:	84 27       	eor	r24, r20
    2dfa:	8c 93       	st	X, r24
            default :                                                      break;
        }
    }
}
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	0f 90       	pop	r0
    2e02:	0f 90       	pop	r0
    2e04:	cf 91       	pop	r28
    2e06:	df 91       	pop	r29
    2e08:	08 95       	ret

00002e0a <DIO_voidTogglePortValue>:
/* Description : Toggles pin values of the whole Port register              */
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }            */
/* Fun. Return : void                                                       */
/****************************************************************************/
void DIO_voidTogglePortValue (u8 Copy_u8PortNumber )
{
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	00 d0       	rcall	.+0      	; 0x2e10 <DIO_voidTogglePortValue+0x6>
    2e10:	0f 92       	push	r0
    2e12:	cd b7       	in	r28, 0x3d	; 61
    2e14:	de b7       	in	r29, 0x3e	; 62
    2e16:	89 83       	std	Y+1, r24	; 0x01
        /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
    2e18:	89 81       	ldd	r24, Y+1	; 0x01
    2e1a:	84 30       	cpi	r24, 0x04	; 4
    2e1c:	08 f0       	brcs	.+2      	; 0x2e20 <DIO_voidTogglePortValue+0x16>
    2e1e:	3e c0       	rjmp	.+124    	; 0x2e9c <DIO_voidTogglePortValue+0x92>
    {
        // Do Nothing
    }
    else 
    {
        switch(Copy_u8PortNumber)
    2e20:	89 81       	ldd	r24, Y+1	; 0x01
    2e22:	28 2f       	mov	r18, r24
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	3b 83       	std	Y+3, r19	; 0x03
    2e28:	2a 83       	std	Y+2, r18	; 0x02
    2e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e2e:	81 30       	cpi	r24, 0x01	; 1
    2e30:	91 05       	cpc	r25, r1
    2e32:	e9 f0       	breq	.+58     	; 0x2e6e <DIO_voidTogglePortValue+0x64>
    2e34:	2a 81       	ldd	r18, Y+2	; 0x02
    2e36:	3b 81       	ldd	r19, Y+3	; 0x03
    2e38:	22 30       	cpi	r18, 0x02	; 2
    2e3a:	31 05       	cpc	r19, r1
    2e3c:	2c f4       	brge	.+10     	; 0x2e48 <DIO_voidTogglePortValue+0x3e>
    2e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e40:	9b 81       	ldd	r25, Y+3	; 0x03
    2e42:	00 97       	sbiw	r24, 0x00	; 0
    2e44:	61 f0       	breq	.+24     	; 0x2e5e <DIO_voidTogglePortValue+0x54>
    2e46:	2a c0       	rjmp	.+84     	; 0x2e9c <DIO_voidTogglePortValue+0x92>
    2e48:	2a 81       	ldd	r18, Y+2	; 0x02
    2e4a:	3b 81       	ldd	r19, Y+3	; 0x03
    2e4c:	22 30       	cpi	r18, 0x02	; 2
    2e4e:	31 05       	cpc	r19, r1
    2e50:	b1 f0       	breq	.+44     	; 0x2e7e <DIO_voidTogglePortValue+0x74>
    2e52:	8a 81       	ldd	r24, Y+2	; 0x02
    2e54:	9b 81       	ldd	r25, Y+3	; 0x03
    2e56:	83 30       	cpi	r24, 0x03	; 3
    2e58:	91 05       	cpc	r25, r1
    2e5a:	c9 f0       	breq	.+50     	; 0x2e8e <DIO_voidTogglePortValue+0x84>
    2e5c:	1f c0       	rjmp	.+62     	; 0x2e9c <DIO_voidTogglePortValue+0x92>
        {
            case PORTA :    PORTA_REG ^= 0xff ;     break;           
    2e5e:	ab e3       	ldi	r26, 0x3B	; 59
    2e60:	b0 e0       	ldi	r27, 0x00	; 0
    2e62:	eb e3       	ldi	r30, 0x3B	; 59
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	80 81       	ld	r24, Z
    2e68:	80 95       	com	r24
    2e6a:	8c 93       	st	X, r24
    2e6c:	17 c0       	rjmp	.+46     	; 0x2e9c <DIO_voidTogglePortValue+0x92>
            case PORTB :    PORTB_REG ^= 0xff ;     break;          
    2e6e:	a8 e3       	ldi	r26, 0x38	; 56
    2e70:	b0 e0       	ldi	r27, 0x00	; 0
    2e72:	e8 e3       	ldi	r30, 0x38	; 56
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	80 81       	ld	r24, Z
    2e78:	80 95       	com	r24
    2e7a:	8c 93       	st	X, r24
    2e7c:	0f c0       	rjmp	.+30     	; 0x2e9c <DIO_voidTogglePortValue+0x92>
            case PORTC :    PORTC_REG ^= 0xff ;     break; 
    2e7e:	a5 e3       	ldi	r26, 0x35	; 53
    2e80:	b0 e0       	ldi	r27, 0x00	; 0
    2e82:	e5 e3       	ldi	r30, 0x35	; 53
    2e84:	f0 e0       	ldi	r31, 0x00	; 0
    2e86:	80 81       	ld	r24, Z
    2e88:	80 95       	com	r24
    2e8a:	8c 93       	st	X, r24
    2e8c:	07 c0       	rjmp	.+14     	; 0x2e9c <DIO_voidTogglePortValue+0x92>
            case PORTD :    PORTD_REG ^= 0xff ;     break; 
    2e8e:	a2 e3       	ldi	r26, 0x32	; 50
    2e90:	b0 e0       	ldi	r27, 0x00	; 0
    2e92:	e2 e3       	ldi	r30, 0x32	; 50
    2e94:	f0 e0       	ldi	r31, 0x00	; 0
    2e96:	80 81       	ld	r24, Z
    2e98:	80 95       	com	r24
    2e9a:	8c 93       	st	X, r24
            default    :                            break;
        }
    }
}
    2e9c:	0f 90       	pop	r0
    2e9e:	0f 90       	pop	r0
    2ea0:	0f 90       	pop	r0
    2ea2:	cf 91       	pop	r28
    2ea4:	df 91       	pop	r29
    2ea6:	08 95       	ret

00002ea8 <DIO_voidConfig_Pull_Up_Pin>:
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }                         */
/* Fun. Argument3: Copy_u8PullUpStatus { ON , OFF }                                                */
/* Fun. Return : void                                                                              */
/***************************************************************************************************/
void DIO_voidConfig_Pull_Up_Pin (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber , u8 Copy_u8PullUpStatus )
{
    2ea8:	df 93       	push	r29
    2eaa:	cf 93       	push	r28
    2eac:	00 d0       	rcall	.+0      	; 0x2eae <DIO_voidConfig_Pull_Up_Pin+0x6>
    2eae:	00 d0       	rcall	.+0      	; 0x2eb0 <DIO_voidConfig_Pull_Up_Pin+0x8>
    2eb0:	0f 92       	push	r0
    2eb2:	cd b7       	in	r28, 0x3d	; 61
    2eb4:	de b7       	in	r29, 0x3e	; 62
    2eb6:	89 83       	std	Y+1, r24	; 0x01
    2eb8:	6a 83       	std	Y+2, r22	; 0x02
    2eba:	4b 83       	std	Y+3, r20	; 0x03
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD || Copy_u8PinNumber > PIN7 )
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
    2ebe:	84 30       	cpi	r24, 0x04	; 4
    2ec0:	e0 f4       	brcc	.+56     	; 0x2efa <DIO_voidConfig_Pull_Up_Pin+0x52>
    2ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec4:	88 30       	cpi	r24, 0x08	; 8
    2ec6:	c8 f4       	brcc	.+50     	; 0x2efa <DIO_voidConfig_Pull_Up_Pin+0x52>
    {
        // Do Nothing
    }
    else
    {
       switch(Copy_u8PullUpStatus)
    2ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eca:	28 2f       	mov	r18, r24
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	3d 83       	std	Y+5, r19	; 0x05
    2ed0:	2c 83       	std	Y+4, r18	; 0x04
    2ed2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ed6:	00 97       	sbiw	r24, 0x00	; 0
    2ed8:	59 f0       	breq	.+22     	; 0x2ef0 <DIO_voidConfig_Pull_Up_Pin+0x48>
    2eda:	2c 81       	ldd	r18, Y+4	; 0x04
    2edc:	3d 81       	ldd	r19, Y+5	; 0x05
    2ede:	21 30       	cpi	r18, 0x01	; 1
    2ee0:	31 05       	cpc	r19, r1
    2ee2:	59 f4       	brne	.+22     	; 0x2efa <DIO_voidConfig_Pull_Up_Pin+0x52>
       {
            case ON  :   DIO_voidSetPinValue (Copy_u8PortNumber,Copy_u8PinNumber, HIGH );   break;
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
    2ee6:	6a 81       	ldd	r22, Y+2	; 0x02
    2ee8:	41 e0       	ldi	r20, 0x01	; 1
    2eea:	0e 94 68 14 	call	0x28d0	; 0x28d0 <DIO_voidSetPinValue>
    2eee:	05 c0       	rjmp	.+10     	; 0x2efa <DIO_voidConfig_Pull_Up_Pin+0x52>
            case OFF :   DIO_voidSetPinValue (Copy_u8PortNumber,Copy_u8PinNumber, LOW  );   break; 
    2ef0:	89 81       	ldd	r24, Y+1	; 0x01
    2ef2:	6a 81       	ldd	r22, Y+2	; 0x02
    2ef4:	40 e0       	ldi	r20, 0x00	; 0
    2ef6:	0e 94 68 14 	call	0x28d0	; 0x28d0 <DIO_voidSetPinValue>
            default  :                                                                      break; 
       }
    }    
}
    2efa:	0f 90       	pop	r0
    2efc:	0f 90       	pop	r0
    2efe:	0f 90       	pop	r0
    2f00:	0f 90       	pop	r0
    2f02:	0f 90       	pop	r0
    2f04:	cf 91       	pop	r28
    2f06:	df 91       	pop	r29
    2f08:	08 95       	ret

00002f0a <DIO_voidConfig_Pull_Up_Port>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                                   */
/* Fun. Argument2: Copy_u8PullUpStatus { ON , OFF }                                                */
/* Fun. Return : void                                                                              */
/***************************************************************************************************/
void DIO_voidConfig_Pull_Up_Port (u8 Copy_u8PortNumber, u8 Copy_u8PullUpStatus )
{
    2f0a:	df 93       	push	r29
    2f0c:	cf 93       	push	r28
    2f0e:	00 d0       	rcall	.+0      	; 0x2f10 <DIO_voidConfig_Pull_Up_Port+0x6>
    2f10:	00 d0       	rcall	.+0      	; 0x2f12 <DIO_voidConfig_Pull_Up_Port+0x8>
    2f12:	cd b7       	in	r28, 0x3d	; 61
    2f14:	de b7       	in	r29, 0x3e	; 62
    2f16:	89 83       	std	Y+1, r24	; 0x01
    2f18:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
    2f1a:	89 81       	ldd	r24, Y+1	; 0x01
    2f1c:	84 30       	cpi	r24, 0x04	; 4
    2f1e:	b8 f4       	brcc	.+46     	; 0x2f4e <DIO_voidConfig_Pull_Up_Port+0x44>
    {
        // Do Nothing
    }
    else
    {
       switch(Copy_u8PullUpStatus)
    2f20:	8a 81       	ldd	r24, Y+2	; 0x02
    2f22:	28 2f       	mov	r18, r24
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	3c 83       	std	Y+4, r19	; 0x04
    2f28:	2b 83       	std	Y+3, r18	; 0x03
    2f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f2e:	00 97       	sbiw	r24, 0x00	; 0
    2f30:	51 f0       	breq	.+20     	; 0x2f46 <DIO_voidConfig_Pull_Up_Port+0x3c>
    2f32:	2b 81       	ldd	r18, Y+3	; 0x03
    2f34:	3c 81       	ldd	r19, Y+4	; 0x04
    2f36:	21 30       	cpi	r18, 0x01	; 1
    2f38:	31 05       	cpc	r19, r1
    2f3a:	49 f4       	brne	.+18     	; 0x2f4e <DIO_voidConfig_Pull_Up_Port+0x44>
       {
            case ON :  DIO_voidSetPortValue (Copy_u8PortNumber, HIGH );  break;
    2f3c:	89 81       	ldd	r24, Y+1	; 0x01
    2f3e:	61 e0       	ldi	r22, 0x01	; 1
    2f40:	0e 94 78 15 	call	0x2af0	; 0x2af0 <DIO_voidSetPortValue>
    2f44:	04 c0       	rjmp	.+8      	; 0x2f4e <DIO_voidConfig_Pull_Up_Port+0x44>
            case OFF:  DIO_voidSetPortValue (Copy_u8PortNumber, LOW );   break;
    2f46:	89 81       	ldd	r24, Y+1	; 0x01
    2f48:	60 e0       	ldi	r22, 0x00	; 0
    2f4a:	0e 94 78 15 	call	0x2af0	; 0x2af0 <DIO_voidSetPortValue>
            default :                                                    break;
       }
    }    
}
    2f4e:	0f 90       	pop	r0
    2f50:	0f 90       	pop	r0
    2f52:	0f 90       	pop	r0
    2f54:	0f 90       	pop	r0
    2f56:	cf 91       	pop	r28
    2f58:	df 91       	pop	r29
    2f5a:	08 95       	ret

00002f5c <ADC_voidInit>:
/* Function Name : ADC_voidInit                                                                 */
/* Description : Initilization of ADC with Specific Specs accordig to Gonfigration File.h       */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void ADC_voidInit (void)
{
    2f5c:	df 93       	push	r29
    2f5e:	cf 93       	push	r28
    2f60:	cd b7       	in	r28, 0x3d	; 61
    2f62:	de b7       	in	r29, 0x3e	; 62
/*--------------------------------------*/
    #if ( REFERENCE_VOLTAGE == AREF )
        CLEAR_BIT(ADMUX_REG,6);
        CLEAR_BIT(ADMUX_REG,7);
    #elif ( REFERENCE_VOLTAGE == AVCC )
        SET_BIT(ADMUX_REG,6);
    2f64:	a7 e2       	ldi	r26, 0x27	; 39
    2f66:	b0 e0       	ldi	r27, 0x00	; 0
    2f68:	e7 e2       	ldi	r30, 0x27	; 39
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	80 81       	ld	r24, Z
    2f6e:	80 64       	ori	r24, 0x40	; 64
    2f70:	8c 93       	st	X, r24
        CLEAR_BIT(ADMUX_REG,7);
    2f72:	a7 e2       	ldi	r26, 0x27	; 39
    2f74:	b0 e0       	ldi	r27, 0x00	; 0
    2f76:	e7 e2       	ldi	r30, 0x27	; 39
    2f78:	f0 e0       	ldi	r31, 0x00	; 0
    2f7a:	80 81       	ld	r24, Z
    2f7c:	8f 77       	andi	r24, 0x7F	; 127
    2f7e:	8c 93       	st	X, r24
    #endif
/*======================================*/
/*     Select RIGHT or LEFT Adjust      */
/*--------------------------------------*/
    #if ( ADJUST == RIGHT )
        CLEAR_BIT(ADMUX_REG,5);
    2f80:	a7 e2       	ldi	r26, 0x27	; 39
    2f82:	b0 e0       	ldi	r27, 0x00	; 0
    2f84:	e7 e2       	ldi	r30, 0x27	; 39
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	80 81       	ld	r24, Z
    2f8a:	8f 7d       	andi	r24, 0xDF	; 223
    2f8c:	8c 93       	st	X, r24
    #endif
/*======================================*/
/*        ADC Enable or Disable         */
/*--------------------------------------*/
    #if ( ADEN == ENABLE )
        SET_BIT(ADCSRA_REG,7);  
    2f8e:	a6 e2       	ldi	r26, 0x26	; 38
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	e6 e2       	ldi	r30, 0x26	; 38
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	80 68       	ori	r24, 0x80	; 128
    2f9a:	8c 93       	st	X, r24
              SET_BIT(SFIOR_REG,6);
              SET_BIT(SFIOR_REG,7);
        #endif

    #elif ( ADATE == DISABLE )
        CLEAR_BIT(ADCSRA_REG,5); 
    2f9c:	a6 e2       	ldi	r26, 0x26	; 38
    2f9e:	b0 e0       	ldi	r27, 0x00	; 0
    2fa0:	e6 e2       	ldi	r30, 0x26	; 38
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	80 81       	ld	r24, Z
    2fa6:	8f 7d       	andi	r24, 0xDF	; 223
    2fa8:	8c 93       	st	X, r24
/*    ADC Interrupt Enable or Disable   */
/*--------------------------------------*/
    #if ( ADIE == ENABLE )          // work with Interrupt
        SET_BIT(ADCSRA_REG,3);  
    #elif ( ADIE == DISABLE )       // work with Polling
        CLEAR_BIT(ADCSRA_REG,3); 
    2faa:	a6 e2       	ldi	r26, 0x26	; 38
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	e6 e2       	ldi	r30, 0x26	; 38
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	80 81       	ld	r24, Z
    2fb4:	87 7f       	andi	r24, 0xF7	; 247
    2fb6:	8c 93       	st	X, r24
    #endif
/*======================================*/
/*       ADC Prescaler Selection        */
/*--------------------------------------*/
    /*     Clear Prescaler      */ 
    ADCSRA_REG = ( ADCSRA_REG & 0b11111000 );
    2fb8:	a6 e2       	ldi	r26, 0x26	; 38
    2fba:	b0 e0       	ldi	r27, 0x00	; 0
    2fbc:	e6 e2       	ldi	r30, 0x26	; 38
    2fbe:	f0 e0       	ldi	r31, 0x00	; 0
    2fc0:	80 81       	ld	r24, Z
    2fc2:	88 7f       	andi	r24, 0xF8	; 248
    2fc4:	8c 93       	st	X, r24
    #elif ( PRESCALER == PRESCALER_DIVISION_BY_64 )
        CLEAR_BIT(ADCSRA_REG,0);
          SET_BIT(ADCSRA_REG,1);
          SET_BIT(ADCSRA_REG,2);
    #elif ( PRESCALER == PRESCALER_DIVISION_BY_128 )
          SET_BIT(ADCSRA_REG,0);
    2fc6:	a6 e2       	ldi	r26, 0x26	; 38
    2fc8:	b0 e0       	ldi	r27, 0x00	; 0
    2fca:	e6 e2       	ldi	r30, 0x26	; 38
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	80 81       	ld	r24, Z
    2fd0:	81 60       	ori	r24, 0x01	; 1
    2fd2:	8c 93       	st	X, r24
          SET_BIT(ADCSRA_REG,1);
    2fd4:	a6 e2       	ldi	r26, 0x26	; 38
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	e6 e2       	ldi	r30, 0x26	; 38
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	80 81       	ld	r24, Z
    2fde:	82 60       	ori	r24, 0x02	; 2
    2fe0:	8c 93       	st	X, r24
          SET_BIT(ADCSRA_REG,2);
    2fe2:	a6 e2       	ldi	r26, 0x26	; 38
    2fe4:	b0 e0       	ldi	r27, 0x00	; 0
    2fe6:	e6 e2       	ldi	r30, 0x26	; 38
    2fe8:	f0 e0       	ldi	r31, 0x00	; 0
    2fea:	80 81       	ld	r24, Z
    2fec:	84 60       	ori	r24, 0x04	; 4
    2fee:	8c 93       	st	X, r24
    #endif
/*======================================*/
}
    2ff0:	cf 91       	pop	r28
    2ff2:	df 91       	pop	r29
    2ff4:	08 95       	ret

00002ff6 <ADC_u16ReadSynchronus>:
/* Description : Get Analog Reading From ADC                                                    */
/* Fun. Argument1: Copy_u8ChannelNumber { ADC0,ADC1,ADC2,ADC3,ADC4,ADC5,ADC6,ADC7 }             */
/* Fun. Return : u16                                                                            */
/************************************************************************************************/
u16 ADC_u16ReadSynchronus ( u8 Copy_u8ChannelNumber ) 
{
    2ff6:	df 93       	push	r29
    2ff8:	cf 93       	push	r28
    2ffa:	00 d0       	rcall	.+0      	; 0x2ffc <ADC_u16ReadSynchronus+0x6>
    2ffc:	00 d0       	rcall	.+0      	; 0x2ffe <ADC_u16ReadSynchronus+0x8>
    2ffe:	cd b7       	in	r28, 0x3d	; 61
    3000:	de b7       	in	r29, 0x3e	; 62
    3002:	8a 83       	std	Y+2, r24	; 0x02
/*===============================================================================================*/
    /*     Clear MUX      */ 
    ADMUX_REG = ( ADMUX_REG & 0b11100000 );        
    3004:	a7 e2       	ldi	r26, 0x27	; 39
    3006:	b0 e0       	ldi	r27, 0x00	; 0
    3008:	e7 e2       	ldi	r30, 0x27	; 39
    300a:	f0 e0       	ldi	r31, 0x00	; 0
    300c:	80 81       	ld	r24, Z
    300e:	80 7e       	andi	r24, 0xE0	; 224
    3010:	8c 93       	st	X, r24
/*===============================================================================================*/
    /*   Select channel   */ 
    switch ( Copy_u8ChannelNumber )
    3012:	8a 81       	ldd	r24, Y+2	; 0x02
    3014:	28 2f       	mov	r18, r24
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	3c 83       	std	Y+4, r19	; 0x04
    301a:	2b 83       	std	Y+3, r18	; 0x03
    301c:	8b 81       	ldd	r24, Y+3	; 0x03
    301e:	9c 81       	ldd	r25, Y+4	; 0x04
    3020:	83 30       	cpi	r24, 0x03	; 3
    3022:	91 05       	cpc	r25, r1
    3024:	09 f4       	brne	.+2      	; 0x3028 <ADC_u16ReadSynchronus+0x32>
    3026:	45 c0       	rjmp	.+138    	; 0x30b2 <ADC_u16ReadSynchronus+0xbc>
    3028:	2b 81       	ldd	r18, Y+3	; 0x03
    302a:	3c 81       	ldd	r19, Y+4	; 0x04
    302c:	24 30       	cpi	r18, 0x04	; 4
    302e:	31 05       	cpc	r19, r1
    3030:	7c f4       	brge	.+30     	; 0x3050 <ADC_u16ReadSynchronus+0x5a>
    3032:	8b 81       	ldd	r24, Y+3	; 0x03
    3034:	9c 81       	ldd	r25, Y+4	; 0x04
    3036:	81 30       	cpi	r24, 0x01	; 1
    3038:	91 05       	cpc	r25, r1
    303a:	49 f1       	breq	.+82     	; 0x308e <ADC_u16ReadSynchronus+0x98>
    303c:	2b 81       	ldd	r18, Y+3	; 0x03
    303e:	3c 81       	ldd	r19, Y+4	; 0x04
    3040:	22 30       	cpi	r18, 0x02	; 2
    3042:	31 05       	cpc	r19, r1
    3044:	6c f5       	brge	.+90     	; 0x30a0 <ADC_u16ReadSynchronus+0xaa>
    3046:	8b 81       	ldd	r24, Y+3	; 0x03
    3048:	9c 81       	ldd	r25, Y+4	; 0x04
    304a:	00 97       	sbiw	r24, 0x00	; 0
    304c:	c1 f0       	breq	.+48     	; 0x307e <ADC_u16ReadSynchronus+0x88>
    304e:	5d c0       	rjmp	.+186    	; 0x310a <ADC_u16ReadSynchronus+0x114>
    3050:	2b 81       	ldd	r18, Y+3	; 0x03
    3052:	3c 81       	ldd	r19, Y+4	; 0x04
    3054:	25 30       	cpi	r18, 0x05	; 5
    3056:	31 05       	cpc	r19, r1
    3058:	09 f4       	brne	.+2      	; 0x305c <ADC_u16ReadSynchronus+0x66>
    305a:	3d c0       	rjmp	.+122    	; 0x30d6 <ADC_u16ReadSynchronus+0xe0>
    305c:	8b 81       	ldd	r24, Y+3	; 0x03
    305e:	9c 81       	ldd	r25, Y+4	; 0x04
    3060:	85 30       	cpi	r24, 0x05	; 5
    3062:	91 05       	cpc	r25, r1
    3064:	7c f1       	brlt	.+94     	; 0x30c4 <ADC_u16ReadSynchronus+0xce>
    3066:	2b 81       	ldd	r18, Y+3	; 0x03
    3068:	3c 81       	ldd	r19, Y+4	; 0x04
    306a:	26 30       	cpi	r18, 0x06	; 6
    306c:	31 05       	cpc	r19, r1
    306e:	e1 f1       	breq	.+120    	; 0x30e8 <ADC_u16ReadSynchronus+0xf2>
    3070:	8b 81       	ldd	r24, Y+3	; 0x03
    3072:	9c 81       	ldd	r25, Y+4	; 0x04
    3074:	87 30       	cpi	r24, 0x07	; 7
    3076:	91 05       	cpc	r25, r1
    3078:	09 f4       	brne	.+2      	; 0x307c <ADC_u16ReadSynchronus+0x86>
    307a:	3f c0       	rjmp	.+126    	; 0x30fa <ADC_u16ReadSynchronus+0x104>
    307c:	46 c0       	rjmp	.+140    	; 0x310a <ADC_u16ReadSynchronus+0x114>
    {
        case ADC0 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000000 );     break;
    307e:	a7 e2       	ldi	r26, 0x27	; 39
    3080:	b0 e0       	ldi	r27, 0x00	; 0
    3082:	e7 e2       	ldi	r30, 0x27	; 39
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	80 81       	ld	r24, Z
    3088:	80 7e       	andi	r24, 0xE0	; 224
    308a:	8c 93       	st	X, r24
    308c:	3e c0       	rjmp	.+124    	; 0x310a <ADC_u16ReadSynchronus+0x114>
        case ADC1 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000001 );     break;
    308e:	a7 e2       	ldi	r26, 0x27	; 39
    3090:	b0 e0       	ldi	r27, 0x00	; 0
    3092:	e7 e2       	ldi	r30, 0x27	; 39
    3094:	f0 e0       	ldi	r31, 0x00	; 0
    3096:	80 81       	ld	r24, Z
    3098:	80 7e       	andi	r24, 0xE0	; 224
    309a:	81 60       	ori	r24, 0x01	; 1
    309c:	8c 93       	st	X, r24
    309e:	35 c0       	rjmp	.+106    	; 0x310a <ADC_u16ReadSynchronus+0x114>
        case ADC2 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000010 );     break;        
    30a0:	a7 e2       	ldi	r26, 0x27	; 39
    30a2:	b0 e0       	ldi	r27, 0x00	; 0
    30a4:	e7 e2       	ldi	r30, 0x27	; 39
    30a6:	f0 e0       	ldi	r31, 0x00	; 0
    30a8:	80 81       	ld	r24, Z
    30aa:	80 7e       	andi	r24, 0xE0	; 224
    30ac:	82 60       	ori	r24, 0x02	; 2
    30ae:	8c 93       	st	X, r24
    30b0:	2c c0       	rjmp	.+88     	; 0x310a <ADC_u16ReadSynchronus+0x114>
        case ADC3 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000011 );     break;
    30b2:	a7 e2       	ldi	r26, 0x27	; 39
    30b4:	b0 e0       	ldi	r27, 0x00	; 0
    30b6:	e7 e2       	ldi	r30, 0x27	; 39
    30b8:	f0 e0       	ldi	r31, 0x00	; 0
    30ba:	80 81       	ld	r24, Z
    30bc:	80 7e       	andi	r24, 0xE0	; 224
    30be:	83 60       	ori	r24, 0x03	; 3
    30c0:	8c 93       	st	X, r24
    30c2:	23 c0       	rjmp	.+70     	; 0x310a <ADC_u16ReadSynchronus+0x114>
        case ADC4 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000100 );     break;
    30c4:	a7 e2       	ldi	r26, 0x27	; 39
    30c6:	b0 e0       	ldi	r27, 0x00	; 0
    30c8:	e7 e2       	ldi	r30, 0x27	; 39
    30ca:	f0 e0       	ldi	r31, 0x00	; 0
    30cc:	80 81       	ld	r24, Z
    30ce:	80 7e       	andi	r24, 0xE0	; 224
    30d0:	84 60       	ori	r24, 0x04	; 4
    30d2:	8c 93       	st	X, r24
    30d4:	1a c0       	rjmp	.+52     	; 0x310a <ADC_u16ReadSynchronus+0x114>
        case ADC5 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000101 );     break;
    30d6:	a7 e2       	ldi	r26, 0x27	; 39
    30d8:	b0 e0       	ldi	r27, 0x00	; 0
    30da:	e7 e2       	ldi	r30, 0x27	; 39
    30dc:	f0 e0       	ldi	r31, 0x00	; 0
    30de:	80 81       	ld	r24, Z
    30e0:	80 7e       	andi	r24, 0xE0	; 224
    30e2:	85 60       	ori	r24, 0x05	; 5
    30e4:	8c 93       	st	X, r24
    30e6:	11 c0       	rjmp	.+34     	; 0x310a <ADC_u16ReadSynchronus+0x114>
        case ADC6 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000110 );     break;
    30e8:	a7 e2       	ldi	r26, 0x27	; 39
    30ea:	b0 e0       	ldi	r27, 0x00	; 0
    30ec:	e7 e2       	ldi	r30, 0x27	; 39
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	80 81       	ld	r24, Z
    30f2:	80 7e       	andi	r24, 0xE0	; 224
    30f4:	86 60       	ori	r24, 0x06	; 6
    30f6:	8c 93       	st	X, r24
    30f8:	08 c0       	rjmp	.+16     	; 0x310a <ADC_u16ReadSynchronus+0x114>
        case ADC7 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000111 );     break;
    30fa:	a7 e2       	ldi	r26, 0x27	; 39
    30fc:	b0 e0       	ldi	r27, 0x00	; 0
    30fe:	e7 e2       	ldi	r30, 0x27	; 39
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	80 81       	ld	r24, Z
    3104:	80 7e       	andi	r24, 0xE0	; 224
    3106:	87 60       	ori	r24, 0x07	; 7
    3108:	8c 93       	st	X, r24
/*===============================================================================================*/  
    /*    Start Conversion    */ 
    #if ( ADATE == ENABLE )
        // Start Conversion When Triggering Occures.
    #elif ( ADATE == DISABLE )
        SET_BIT(ADCSRA_REG,6);  
    310a:	a6 e2       	ldi	r26, 0x26	; 38
    310c:	b0 e0       	ldi	r27, 0x00	; 0
    310e:	e6 e2       	ldi	r30, 0x26	; 38
    3110:	f0 e0       	ldi	r31, 0x00	; 0
    3112:	80 81       	ld	r24, Z
    3114:	80 64       	ori	r24, 0x40	; 64
    3116:	8c 93       	st	X, r24
/*===============================================================================================*/    
    #if ( ADIE == ENABLE )                        // work with Interrupt
        // When ADC Finish conversion will Raising Interrupt Flag and Jump to ADC_ISR Function.    
    #elif ( ADIE == DISABLE )                     // work with Polling
        /* GET FLAG and Polling the Flag */
        u8 ADIF=0 ;
    3118:	19 82       	std	Y+1, r1	; 0x01
    311a:	05 c0       	rjmp	.+10     	; 0x3126 <ADC_u16ReadSynchronus+0x130>
        while( ADIF == 0 )
        {
            ADIF = GET_BIT(ADCSRA_REG,4);    // Stuck on while untill Flag Raising 1 .
    311c:	e6 e2       	ldi	r30, 0x26	; 38
    311e:	f0 e0       	ldi	r31, 0x00	; 0
    3120:	80 81       	ld	r24, Z
    3122:	80 71       	andi	r24, 0x10	; 16
    3124:	89 83       	std	Y+1, r24	; 0x01
    #if ( ADIE == ENABLE )                        // work with Interrupt
        // When ADC Finish conversion will Raising Interrupt Flag and Jump to ADC_ISR Function.    
    #elif ( ADIE == DISABLE )                     // work with Polling
        /* GET FLAG and Polling the Flag */
        u8 ADIF=0 ;
        while( ADIF == 0 )
    3126:	89 81       	ldd	r24, Y+1	; 0x01
    3128:	88 23       	and	r24, r24
    312a:	c1 f3       	breq	.-16     	; 0x311c <ADC_u16ReadSynchronus+0x126>
/*===============================================================================================*/
    #if ( ADIE == ENABLE )          // work with Interrupt
        // Interrupt Flag Will Cleared Automaticlly.    
    #elif ( ADIE == DISABLE )       // work with Polling
        /* Clear Flag */
        SET_BIT(ADCSRA_REG,4);
    312c:	a6 e2       	ldi	r26, 0x26	; 38
    312e:	b0 e0       	ldi	r27, 0x00	; 0
    3130:	e6 e2       	ldi	r30, 0x26	; 38
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	80 81       	ld	r24, Z
    3136:	80 61       	ori	r24, 0x10	; 16
    3138:	8c 93       	st	X, r24
/*********************************************************     Get Reading      *********************************************/
/*        Get Reading from 16 Bit ADC_REG  if we used RIGHT Adjust and Resoluotion 10 BIT  Return Value From { 0 -> 1023 }  */
/*        Get Reading from 8 Bit ADCH_REG  if we used LEFT Adjust and Resoluotion  8 BIT   Return Value From { 0 -> 255  }  */
/*--------------------------------------------------------------------------------------------------------------------------*/
    #if ( ADJUST == RIGHT )
        return ADC_REG ;      
    313a:	e4 e2       	ldi	r30, 0x24	; 36
    313c:	f0 e0       	ldi	r31, 0x00	; 0
    313e:	80 81       	ld	r24, Z
    3140:	91 81       	ldd	r25, Z+1	; 0x01
/*********************************     This Equation Used in App      ****************************/
        //  Analog_Signal =   Digital_Signal *  Step Size
        //  Analog_Signal = ( Digital_Signal * V max )  / 2^Rsolution   // Rsolution =10 BIT & Vmax = 5v = 5000 mv 
        //  Analog_Signal = ( Digital_Signal * 5000UL ) / 1024  
/*===============================================================================================*/
}
    3142:	0f 90       	pop	r0
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	0f 90       	pop	r0
    314a:	cf 91       	pop	r28
    314c:	df 91       	pop	r29
    314e:	08 95       	ret

00003150 <ADC_u16ReadASynchronus>:
/* Fun. Argument2:{ void (*Local_PvoidCallBackFunctionPtr) (void) }                             */
/*                Pointer to function that = Address of application function                    */
/* Fun. Return : u16                                                                            */
/************************************************************************************************/
u16 ADC_u16ReadASynchronus ( u8 Copy_u8ChannelNumber ,  void (*Local_PvoidCallBackFunctionPtr) (void) ) 
{
    3150:	df 93       	push	r29
    3152:	cf 93       	push	r28
    3154:	cd b7       	in	r28, 0x3d	; 61
    3156:	de b7       	in	r29, 0x3e	; 62
    3158:	27 97       	sbiw	r28, 0x07	; 7
    315a:	0f b6       	in	r0, 0x3f	; 63
    315c:	f8 94       	cli
    315e:	de bf       	out	0x3e, r29	; 62
    3160:	0f be       	out	0x3f, r0	; 63
    3162:	cd bf       	out	0x3d, r28	; 61
    3164:	89 83       	std	Y+1, r24	; 0x01
    3166:	7b 83       	std	Y+3, r23	; 0x03
    3168:	6a 83       	std	Y+2, r22	; 0x02
    if ( (ADC_u18BusyFlag == BUSY) ||  (Local_PvoidCallBackFunctionPtr == NULL) )
    316a:	80 91 e2 02 	lds	r24, 0x02E2
    316e:	88 23       	and	r24, r24
    3170:	21 f0       	breq	.+8      	; 0x317a <ADC_u16ReadASynchronus+0x2a>
    3172:	8a 81       	ldd	r24, Y+2	; 0x02
    3174:	9b 81       	ldd	r25, Y+3	; 0x03
    3176:	00 97       	sbiw	r24, 0x00	; 0
    3178:	19 f4       	brne	.+6      	; 0x3180 <ADC_u16ReadASynchronus+0x30>
    {
        return 0;
    317a:	1f 82       	std	Y+7, r1	; 0x07
    317c:	1e 82       	std	Y+6, r1	; 0x06
    317e:	9f c0       	rjmp	.+318    	; 0x32be <ADC_u16ReadASynchronus+0x16e>
    }
    else
    {
        /*   Make the ADC State is Busy   */
            ADC_u18BusyFlag = BUSY ;
    3180:	10 92 e2 02 	sts	0x02E2, r1
        /*===============================================================================================*/
            /*     Clear MUX      */ 
            ADMUX_REG = ( ADMUX_REG & 0b11100000 );        
    3184:	a7 e2       	ldi	r26, 0x27	; 39
    3186:	b0 e0       	ldi	r27, 0x00	; 0
    3188:	e7 e2       	ldi	r30, 0x27	; 39
    318a:	f0 e0       	ldi	r31, 0x00	; 0
    318c:	80 81       	ld	r24, Z
    318e:	80 7e       	andi	r24, 0xE0	; 224
    3190:	8c 93       	st	X, r24
        /*===============================================================================================*/
            /*   Select channel   */ 
            switch ( Copy_u8ChannelNumber )
    3192:	89 81       	ldd	r24, Y+1	; 0x01
    3194:	28 2f       	mov	r18, r24
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	3d 83       	std	Y+5, r19	; 0x05
    319a:	2c 83       	std	Y+4, r18	; 0x04
    319c:	8c 81       	ldd	r24, Y+4	; 0x04
    319e:	9d 81       	ldd	r25, Y+5	; 0x05
    31a0:	83 30       	cpi	r24, 0x03	; 3
    31a2:	91 05       	cpc	r25, r1
    31a4:	09 f4       	brne	.+2      	; 0x31a8 <ADC_u16ReadASynchronus+0x58>
    31a6:	45 c0       	rjmp	.+138    	; 0x3232 <ADC_u16ReadASynchronus+0xe2>
    31a8:	2c 81       	ldd	r18, Y+4	; 0x04
    31aa:	3d 81       	ldd	r19, Y+5	; 0x05
    31ac:	24 30       	cpi	r18, 0x04	; 4
    31ae:	31 05       	cpc	r19, r1
    31b0:	7c f4       	brge	.+30     	; 0x31d0 <ADC_u16ReadASynchronus+0x80>
    31b2:	8c 81       	ldd	r24, Y+4	; 0x04
    31b4:	9d 81       	ldd	r25, Y+5	; 0x05
    31b6:	81 30       	cpi	r24, 0x01	; 1
    31b8:	91 05       	cpc	r25, r1
    31ba:	49 f1       	breq	.+82     	; 0x320e <ADC_u16ReadASynchronus+0xbe>
    31bc:	2c 81       	ldd	r18, Y+4	; 0x04
    31be:	3d 81       	ldd	r19, Y+5	; 0x05
    31c0:	22 30       	cpi	r18, 0x02	; 2
    31c2:	31 05       	cpc	r19, r1
    31c4:	6c f5       	brge	.+90     	; 0x3220 <ADC_u16ReadASynchronus+0xd0>
    31c6:	8c 81       	ldd	r24, Y+4	; 0x04
    31c8:	9d 81       	ldd	r25, Y+5	; 0x05
    31ca:	00 97       	sbiw	r24, 0x00	; 0
    31cc:	c1 f0       	breq	.+48     	; 0x31fe <ADC_u16ReadASynchronus+0xae>
    31ce:	5d c0       	rjmp	.+186    	; 0x328a <ADC_u16ReadASynchronus+0x13a>
    31d0:	2c 81       	ldd	r18, Y+4	; 0x04
    31d2:	3d 81       	ldd	r19, Y+5	; 0x05
    31d4:	25 30       	cpi	r18, 0x05	; 5
    31d6:	31 05       	cpc	r19, r1
    31d8:	09 f4       	brne	.+2      	; 0x31dc <ADC_u16ReadASynchronus+0x8c>
    31da:	3d c0       	rjmp	.+122    	; 0x3256 <ADC_u16ReadASynchronus+0x106>
    31dc:	8c 81       	ldd	r24, Y+4	; 0x04
    31de:	9d 81       	ldd	r25, Y+5	; 0x05
    31e0:	85 30       	cpi	r24, 0x05	; 5
    31e2:	91 05       	cpc	r25, r1
    31e4:	7c f1       	brlt	.+94     	; 0x3244 <ADC_u16ReadASynchronus+0xf4>
    31e6:	2c 81       	ldd	r18, Y+4	; 0x04
    31e8:	3d 81       	ldd	r19, Y+5	; 0x05
    31ea:	26 30       	cpi	r18, 0x06	; 6
    31ec:	31 05       	cpc	r19, r1
    31ee:	e1 f1       	breq	.+120    	; 0x3268 <ADC_u16ReadASynchronus+0x118>
    31f0:	8c 81       	ldd	r24, Y+4	; 0x04
    31f2:	9d 81       	ldd	r25, Y+5	; 0x05
    31f4:	87 30       	cpi	r24, 0x07	; 7
    31f6:	91 05       	cpc	r25, r1
    31f8:	09 f4       	brne	.+2      	; 0x31fc <ADC_u16ReadASynchronus+0xac>
    31fa:	3f c0       	rjmp	.+126    	; 0x327a <ADC_u16ReadASynchronus+0x12a>
    31fc:	46 c0       	rjmp	.+140    	; 0x328a <ADC_u16ReadASynchronus+0x13a>
            {
                case ADC0 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000000 );     break;
    31fe:	a7 e2       	ldi	r26, 0x27	; 39
    3200:	b0 e0       	ldi	r27, 0x00	; 0
    3202:	e7 e2       	ldi	r30, 0x27	; 39
    3204:	f0 e0       	ldi	r31, 0x00	; 0
    3206:	80 81       	ld	r24, Z
    3208:	80 7e       	andi	r24, 0xE0	; 224
    320a:	8c 93       	st	X, r24
    320c:	3e c0       	rjmp	.+124    	; 0x328a <ADC_u16ReadASynchronus+0x13a>
                case ADC1 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000001 );     break;
    320e:	a7 e2       	ldi	r26, 0x27	; 39
    3210:	b0 e0       	ldi	r27, 0x00	; 0
    3212:	e7 e2       	ldi	r30, 0x27	; 39
    3214:	f0 e0       	ldi	r31, 0x00	; 0
    3216:	80 81       	ld	r24, Z
    3218:	80 7e       	andi	r24, 0xE0	; 224
    321a:	81 60       	ori	r24, 0x01	; 1
    321c:	8c 93       	st	X, r24
    321e:	35 c0       	rjmp	.+106    	; 0x328a <ADC_u16ReadASynchronus+0x13a>
                case ADC2 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000010 );     break;        
    3220:	a7 e2       	ldi	r26, 0x27	; 39
    3222:	b0 e0       	ldi	r27, 0x00	; 0
    3224:	e7 e2       	ldi	r30, 0x27	; 39
    3226:	f0 e0       	ldi	r31, 0x00	; 0
    3228:	80 81       	ld	r24, Z
    322a:	80 7e       	andi	r24, 0xE0	; 224
    322c:	82 60       	ori	r24, 0x02	; 2
    322e:	8c 93       	st	X, r24
    3230:	2c c0       	rjmp	.+88     	; 0x328a <ADC_u16ReadASynchronus+0x13a>
                case ADC3 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000011 );     break;
    3232:	a7 e2       	ldi	r26, 0x27	; 39
    3234:	b0 e0       	ldi	r27, 0x00	; 0
    3236:	e7 e2       	ldi	r30, 0x27	; 39
    3238:	f0 e0       	ldi	r31, 0x00	; 0
    323a:	80 81       	ld	r24, Z
    323c:	80 7e       	andi	r24, 0xE0	; 224
    323e:	83 60       	ori	r24, 0x03	; 3
    3240:	8c 93       	st	X, r24
    3242:	23 c0       	rjmp	.+70     	; 0x328a <ADC_u16ReadASynchronus+0x13a>
                case ADC4 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000100 );     break;
    3244:	a7 e2       	ldi	r26, 0x27	; 39
    3246:	b0 e0       	ldi	r27, 0x00	; 0
    3248:	e7 e2       	ldi	r30, 0x27	; 39
    324a:	f0 e0       	ldi	r31, 0x00	; 0
    324c:	80 81       	ld	r24, Z
    324e:	80 7e       	andi	r24, 0xE0	; 224
    3250:	84 60       	ori	r24, 0x04	; 4
    3252:	8c 93       	st	X, r24
    3254:	1a c0       	rjmp	.+52     	; 0x328a <ADC_u16ReadASynchronus+0x13a>
                case ADC5 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000101 );     break;
    3256:	a7 e2       	ldi	r26, 0x27	; 39
    3258:	b0 e0       	ldi	r27, 0x00	; 0
    325a:	e7 e2       	ldi	r30, 0x27	; 39
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	80 81       	ld	r24, Z
    3260:	80 7e       	andi	r24, 0xE0	; 224
    3262:	85 60       	ori	r24, 0x05	; 5
    3264:	8c 93       	st	X, r24
    3266:	11 c0       	rjmp	.+34     	; 0x328a <ADC_u16ReadASynchronus+0x13a>
                case ADC6 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000110 );     break;
    3268:	a7 e2       	ldi	r26, 0x27	; 39
    326a:	b0 e0       	ldi	r27, 0x00	; 0
    326c:	e7 e2       	ldi	r30, 0x27	; 39
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	80 81       	ld	r24, Z
    3272:	80 7e       	andi	r24, 0xE0	; 224
    3274:	86 60       	ori	r24, 0x06	; 6
    3276:	8c 93       	st	X, r24
    3278:	08 c0       	rjmp	.+16     	; 0x328a <ADC_u16ReadASynchronus+0x13a>
                case ADC7 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000111 );     break;
    327a:	a7 e2       	ldi	r26, 0x27	; 39
    327c:	b0 e0       	ldi	r27, 0x00	; 0
    327e:	e7 e2       	ldi	r30, 0x27	; 39
    3280:	f0 e0       	ldi	r31, 0x00	; 0
    3282:	80 81       	ld	r24, Z
    3284:	80 7e       	andi	r24, 0xE0	; 224
    3286:	87 60       	ori	r24, 0x07	; 7
    3288:	8c 93       	st	X, r24
                default   :                                                                 break;
            }
        /*===============================================================================================*/
            /*    Set The Call Back Function    */ 
            Global_PF_Vector_16 = Local_PvoidCallBackFunctionPtr ;
    328a:	8a 81       	ldd	r24, Y+2	; 0x02
    328c:	9b 81       	ldd	r25, Y+3	; 0x03
    328e:	90 93 df 02 	sts	0x02DF, r25
    3292:	80 93 de 02 	sts	0x02DE, r24
        /*===============================================================================================*/   
            /*    Start Conversion    */ 
            #if ( ADATE == ENABLE )
                // Start Conversion When Triggering Occures.
            #elif ( ADATE == DISABLE )
                SET_BIT(ADCSRA_REG,6);  
    3296:	a6 e2       	ldi	r26, 0x26	; 38
    3298:	b0 e0       	ldi	r27, 0x00	; 0
    329a:	e6 e2       	ldi	r30, 0x26	; 38
    329c:	f0 e0       	ldi	r31, 0x00	; 0
    329e:	80 81       	ld	r24, Z
    32a0:	80 64       	ori	r24, 0x40	; 64
    32a2:	8c 93       	st	X, r24
            #endif
        /*===============================================================================================*/   
            /*     Enable ADIE  AD Interrupt Enable  and Interrupt Flag Will Cleared Automaticlly.       */   
            SET_BIT(ADCSRA_REG,3);
    32a4:	a6 e2       	ldi	r26, 0x26	; 38
    32a6:	b0 e0       	ldi	r27, 0x00	; 0
    32a8:	e6 e2       	ldi	r30, 0x26	; 38
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	80 81       	ld	r24, Z
    32ae:	88 60       	ori	r24, 0x08	; 8
    32b0:	8c 93       	st	X, r24
        /*==========================================================================================================================*/
           return ADC_u16Result ; 
    32b2:	20 91 e0 02 	lds	r18, 0x02E0
    32b6:	30 91 e1 02 	lds	r19, 0x02E1
    32ba:	3f 83       	std	Y+7, r19	; 0x07
    32bc:	2e 83       	std	Y+6, r18	; 0x06
    32be:	8e 81       	ldd	r24, Y+6	; 0x06
    32c0:	9f 81       	ldd	r25, Y+7	; 0x07
        /*===============================================================================================*/
    }
}
    32c2:	27 96       	adiw	r28, 0x07	; 7
    32c4:	0f b6       	in	r0, 0x3f	; 63
    32c6:	f8 94       	cli
    32c8:	de bf       	out	0x3e, r29	; 62
    32ca:	0f be       	out	0x3f, r0	; 63
    32cc:	cd bf       	out	0x3d, r28	; 61
    32ce:	cf 91       	pop	r28
    32d0:	df 91       	pop	r29
    32d2:	08 95       	ret

000032d4 <__vector_16>:
void __vector_16 (void)




{
    32d4:	1f 92       	push	r1
    32d6:	0f 92       	push	r0
    32d8:	0f b6       	in	r0, 0x3f	; 63
    32da:	0f 92       	push	r0
    32dc:	11 24       	eor	r1, r1
    32de:	2f 93       	push	r18
    32e0:	3f 93       	push	r19
    32e2:	4f 93       	push	r20
    32e4:	5f 93       	push	r21
    32e6:	6f 93       	push	r22
    32e8:	7f 93       	push	r23
    32ea:	8f 93       	push	r24
    32ec:	9f 93       	push	r25
    32ee:	af 93       	push	r26
    32f0:	bf 93       	push	r27
    32f2:	ef 93       	push	r30
    32f4:	ff 93       	push	r31
    32f6:	df 93       	push	r29
    32f8:	cf 93       	push	r28
    32fa:	cd b7       	in	r28, 0x3d	; 61
    32fc:	de b7       	in	r29, 0x3e	; 62
/*********************************************************     Read ADC Result      *****************************************/
/*        Get Reading from 16 Bit ADC_REG  if we used RIGHT Adjust and Resoluotion 10 BIT  Return Value From { 0 -> 1023 }  */
/*        Get Reading from 8 Bit ADCH_REG  if we used LEFT Adjust and Resoluotion  8 BIT   Return Value From { 0 -> 255  }  */
/*--------------------------------------------------------------------------------------------------------------------------*/
    #if ( ADJUST == RIGHT )
    ADC_u16Result = ADC_REG ;      
    32fe:	e4 e2       	ldi	r30, 0x24	; 36
    3300:	f0 e0       	ldi	r31, 0x00	; 0
    3302:	80 81       	ld	r24, Z
    3304:	91 81       	ldd	r25, Z+1	; 0x01
    3306:	90 93 e1 02 	sts	0x02E1, r25
    330a:	80 93 e0 02 	sts	0x02E0, r24
    #elif ( ADJUST == LEFT )
    ADC_u16Result = ADCH_REG ;
    #endif

/*   Make the ADC State is NOT Busy because it's Completed   */
    ADC_u18BusyFlag = NOT_BUSY ;
    330e:	81 e0       	ldi	r24, 0x01	; 1
    3310:	80 93 e2 02 	sts	0x02E2, r24

/*   Call Call Back Function br Global PTR   */
    Global_PF_Vector_16 ();
    3314:	e0 91 de 02 	lds	r30, 0x02DE
    3318:	f0 91 df 02 	lds	r31, 0x02DF
    331c:	09 95       	icall

/*     Disable ADIE  AD Interrupt Enable     */   
    CLEAR_BIT(ADCSRA_REG,3);   
    331e:	a6 e2       	ldi	r26, 0x26	; 38
    3320:	b0 e0       	ldi	r27, 0x00	; 0
    3322:	e6 e2       	ldi	r30, 0x26	; 38
    3324:	f0 e0       	ldi	r31, 0x00	; 0
    3326:	80 81       	ld	r24, Z
    3328:	87 7f       	andi	r24, 0xF7	; 247
    332a:	8c 93       	st	X, r24
    332c:	cf 91       	pop	r28
    332e:	df 91       	pop	r29
    3330:	ff 91       	pop	r31
    3332:	ef 91       	pop	r30
    3334:	bf 91       	pop	r27
    3336:	af 91       	pop	r26
    3338:	9f 91       	pop	r25
    333a:	8f 91       	pop	r24
    333c:	7f 91       	pop	r23
    333e:	6f 91       	pop	r22
    3340:	5f 91       	pop	r21
    3342:	4f 91       	pop	r20
    3344:	3f 91       	pop	r19
    3346:	2f 91       	pop	r18
    3348:	0f 90       	pop	r0
    334a:	0f be       	out	0x3f, r0	; 63
    334c:	0f 90       	pop	r0
    334e:	1f 90       	pop	r1
    3350:	18 95       	reti

00003352 <SERVO_voidRotateSpecificAngle_OC1A>:
/* Description : Rotate Servo Motor with Specific Angle by PWM TIMER1 at PIN  OCA1   (PD5)      */                                         
/* Fun. Argument1:  Copy_u16Angle      Angle From [ 0  To  180 ] Degree                         */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void SERVO_voidRotateSpecificAngle_OC1A ( u16 Copy_u16Angle )
{
    3352:	df 93       	push	r29
    3354:	cf 93       	push	r28
    3356:	00 d0       	rcall	.+0      	; 0x3358 <SERVO_voidRotateSpecificAngle_OC1A+0x6>
    3358:	00 d0       	rcall	.+0      	; 0x335a <SERVO_voidRotateSpecificAngle_OC1A+0x8>
    335a:	00 d0       	rcall	.+0      	; 0x335c <SERVO_voidRotateSpecificAngle_OC1A+0xa>
    335c:	cd b7       	in	r28, 0x3d	; 61
    335e:	de b7       	in	r29, 0x3e	; 62
    3360:	9e 83       	std	Y+6, r25	; 0x06
    3362:	8d 83       	std	Y+5, r24	; 0x05
    DIO_voidSetPinDirection(PORTD,PIN5,OUTPUT);
    3364:	83 e0       	ldi	r24, 0x03	; 3
    3366:	65 e0       	ldi	r22, 0x05	; 5
    3368:	41 e0       	ldi	r20, 0x01	; 1
    336a:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_voidSetPinDirection>
    u32 Local_u32Variable ;
    Local_u32Variable = ((Copy_u16Angle*1000UL)+179820) / (180) ;
    336e:	8d 81       	ldd	r24, Y+5	; 0x05
    3370:	9e 81       	ldd	r25, Y+6	; 0x06
    3372:	cc 01       	movw	r24, r24
    3374:	a0 e0       	ldi	r26, 0x00	; 0
    3376:	b0 e0       	ldi	r27, 0x00	; 0
    3378:	28 ee       	ldi	r18, 0xE8	; 232
    337a:	33 e0       	ldi	r19, 0x03	; 3
    337c:	40 e0       	ldi	r20, 0x00	; 0
    337e:	50 e0       	ldi	r21, 0x00	; 0
    3380:	bc 01       	movw	r22, r24
    3382:	cd 01       	movw	r24, r26
    3384:	0e 94 de 2b 	call	0x57bc	; 0x57bc <__mulsi3>
    3388:	dc 01       	movw	r26, r24
    338a:	cb 01       	movw	r24, r22
    338c:	84 59       	subi	r24, 0x94	; 148
    338e:	91 44       	sbci	r25, 0x41	; 65
    3390:	ad 4f       	sbci	r26, 0xFD	; 253
    3392:	bf 4f       	sbci	r27, 0xFF	; 255
    3394:	24 eb       	ldi	r18, 0xB4	; 180
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	40 e0       	ldi	r20, 0x00	; 0
    339a:	50 e0       	ldi	r21, 0x00	; 0
    339c:	bc 01       	movw	r22, r24
    339e:	cd 01       	movw	r24, r26
    33a0:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__udivmodsi4>
    33a4:	da 01       	movw	r26, r20
    33a6:	c9 01       	movw	r24, r18
    33a8:	89 83       	std	Y+1, r24	; 0x01
    33aa:	9a 83       	std	Y+2, r25	; 0x02
    33ac:	ab 83       	std	Y+3, r26	; 0x03
    33ae:	bc 83       	std	Y+4, r27	; 0x04
    TIMER1_voidBahaa_u16PWM_T1A ( Local_u32Variable ,19999);
    33b0:	89 81       	ldd	r24, Y+1	; 0x01
    33b2:	9a 81       	ldd	r25, Y+2	; 0x02
    33b4:	6f e1       	ldi	r22, 0x1F	; 31
    33b6:	7e e4       	ldi	r23, 0x4E	; 78
    33b8:	0e 94 ed 07 	call	0xfda	; 0xfda <TIMER1_voidBahaa_u16PWM_T1A>
}
    33bc:	26 96       	adiw	r28, 0x06	; 6
    33be:	0f b6       	in	r0, 0x3f	; 63
    33c0:	f8 94       	cli
    33c2:	de bf       	out	0x3e, r29	; 62
    33c4:	0f be       	out	0x3f, r0	; 63
    33c6:	cd bf       	out	0x3d, r28	; 61
    33c8:	cf 91       	pop	r28
    33ca:	df 91       	pop	r29
    33cc:	08 95       	ret

000033ce <SERVO_voidRotateSpecificAngle_OC1B>:
/* Description : Rotate Servo Motor with Specific Angle by PWM TIMER1 at PIN  OCB1 (PD4)        */                                         
/* Fun. Argument1:  Copy_u16Angle      Angle From [ 0  To  180 ] Degree                         */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void SERVO_voidRotateSpecificAngle_OC1B ( u16 Copy_u16Angle )
{
    33ce:	df 93       	push	r29
    33d0:	cf 93       	push	r28
    33d2:	00 d0       	rcall	.+0      	; 0x33d4 <SERVO_voidRotateSpecificAngle_OC1B+0x6>
    33d4:	00 d0       	rcall	.+0      	; 0x33d6 <SERVO_voidRotateSpecificAngle_OC1B+0x8>
    33d6:	00 d0       	rcall	.+0      	; 0x33d8 <SERVO_voidRotateSpecificAngle_OC1B+0xa>
    33d8:	cd b7       	in	r28, 0x3d	; 61
    33da:	de b7       	in	r29, 0x3e	; 62
    33dc:	9e 83       	std	Y+6, r25	; 0x06
    33de:	8d 83       	std	Y+5, r24	; 0x05
    DIO_voidSetPinDirection(PORTD,PIN4,OUTPUT);
    33e0:	83 e0       	ldi	r24, 0x03	; 3
    33e2:	64 e0       	ldi	r22, 0x04	; 4
    33e4:	41 e0       	ldi	r20, 0x01	; 1
    33e6:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_voidSetPinDirection>
    u32 Local_u32Variable ;
    Local_u32Variable = ((Copy_u16Angle*1000UL)+179820) / (180) ;
    33ea:	8d 81       	ldd	r24, Y+5	; 0x05
    33ec:	9e 81       	ldd	r25, Y+6	; 0x06
    33ee:	cc 01       	movw	r24, r24
    33f0:	a0 e0       	ldi	r26, 0x00	; 0
    33f2:	b0 e0       	ldi	r27, 0x00	; 0
    33f4:	28 ee       	ldi	r18, 0xE8	; 232
    33f6:	33 e0       	ldi	r19, 0x03	; 3
    33f8:	40 e0       	ldi	r20, 0x00	; 0
    33fa:	50 e0       	ldi	r21, 0x00	; 0
    33fc:	bc 01       	movw	r22, r24
    33fe:	cd 01       	movw	r24, r26
    3400:	0e 94 de 2b 	call	0x57bc	; 0x57bc <__mulsi3>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	84 59       	subi	r24, 0x94	; 148
    340a:	91 44       	sbci	r25, 0x41	; 65
    340c:	ad 4f       	sbci	r26, 0xFD	; 253
    340e:	bf 4f       	sbci	r27, 0xFF	; 255
    3410:	24 eb       	ldi	r18, 0xB4	; 180
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	40 e0       	ldi	r20, 0x00	; 0
    3416:	50 e0       	ldi	r21, 0x00	; 0
    3418:	bc 01       	movw	r22, r24
    341a:	cd 01       	movw	r24, r26
    341c:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__udivmodsi4>
    3420:	da 01       	movw	r26, r20
    3422:	c9 01       	movw	r24, r18
    3424:	89 83       	std	Y+1, r24	; 0x01
    3426:	9a 83       	std	Y+2, r25	; 0x02
    3428:	ab 83       	std	Y+3, r26	; 0x03
    342a:	bc 83       	std	Y+4, r27	; 0x04
    TIMER1_voidBahaa_u16PWM_T1B ( Local_u32Variable ,19999);
    342c:	89 81       	ldd	r24, Y+1	; 0x01
    342e:	9a 81       	ldd	r25, Y+2	; 0x02
    3430:	6f e1       	ldi	r22, 0x1F	; 31
    3432:	7e e4       	ldi	r23, 0x4E	; 78
    3434:	0e 94 08 08 	call	0x1010	; 0x1010 <TIMER1_voidBahaa_u16PWM_T1B>
    3438:	26 96       	adiw	r28, 0x06	; 6
    343a:	0f b6       	in	r0, 0x3f	; 63
    343c:	f8 94       	cli
    343e:	de bf       	out	0x3e, r29	; 62
    3440:	0f be       	out	0x3f, r0	; 63
    3442:	cd bf       	out	0x3d, r28	; 61
    3444:	cf 91       	pop	r28
    3446:	df 91       	pop	r29
    3448:	08 95       	ret

0000344a <LED_voidInit_Led_Pin>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                  */
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }        */
/* Fun. Return : void                                                             */
/**********************************************************************************/
void LED_voidInit_Led_Pin ( u8 Copy_u8PortNumber, u8 Copy_u8PinNumber )
{
    344a:	df 93       	push	r29
    344c:	cf 93       	push	r28
    344e:	00 d0       	rcall	.+0      	; 0x3450 <LED_voidInit_Led_Pin+0x6>
    3450:	cd b7       	in	r28, 0x3d	; 61
    3452:	de b7       	in	r29, 0x3e	; 62
    3454:	89 83       	std	Y+1, r24	; 0x01
    3456:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD  || Copy_u8PinNumber > PIN7 )
    3458:	89 81       	ldd	r24, Y+1	; 0x01
    345a:	84 30       	cpi	r24, 0x04	; 4
    345c:	40 f4       	brcc	.+16     	; 0x346e <LED_voidInit_Led_Pin+0x24>
    345e:	8a 81       	ldd	r24, Y+2	; 0x02
    3460:	88 30       	cpi	r24, 0x08	; 8
    3462:	28 f4       	brcc	.+10     	; 0x346e <LED_voidInit_Led_Pin+0x24>
    {
        // Do Nothing
    }
    else
    {
        DIO_voidSetPinDirection (Copy_u8PortNumber,Copy_u8PinNumber,OUTPUT);
    3464:	89 81       	ldd	r24, Y+1	; 0x01
    3466:	6a 81       	ldd	r22, Y+2	; 0x02
    3468:	41 e0       	ldi	r20, 0x01	; 1
    346a:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_voidSetPinDirection>
    }
}
    346e:	0f 90       	pop	r0
    3470:	0f 90       	pop	r0
    3472:	cf 91       	pop	r28
    3474:	df 91       	pop	r29
    3476:	08 95       	ret

00003478 <LED_voidInit_8Leds_Port>:
/* Description : Initialize string of 8 LEDs on specific Port                     */
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                  */
/* Fun. Return : void                                                             */
/**********************************************************************************/
void LED_voidInit_8Leds_Port ( u8 Copy_u8PortNumber)
{
    3478:	df 93       	push	r29
    347a:	cf 93       	push	r28
    347c:	0f 92       	push	r0
    347e:	cd b7       	in	r28, 0x3d	; 61
    3480:	de b7       	in	r29, 0x3e	; 62
    3482:	89 83       	std	Y+1, r24	; 0x01
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
    3484:	89 81       	ldd	r24, Y+1	; 0x01
    3486:	84 30       	cpi	r24, 0x04	; 4
    3488:	20 f4       	brcc	.+8      	; 0x3492 <LED_voidInit_8Leds_Port+0x1a>
    {
        // Do Nothing
    }
    else
    {
        DIO_voidSetPortDirection ( Copy_u8PortNumber, OUTPUT );
    348a:	89 81       	ldd	r24, Y+1	; 0x01
    348c:	61 e0       	ldi	r22, 0x01	; 1
    348e:	0e 94 df 13 	call	0x27be	; 0x27be <DIO_voidSetPortDirection>
    }
}
    3492:	0f 90       	pop	r0
    3494:	cf 91       	pop	r28
    3496:	df 91       	pop	r29
    3498:	08 95       	ret

0000349a <LED_voidStatus_Led_Pin>:
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }                           */
/* Fun. Argument3: Copy_u8Status { ON ,OFF }                                                         */
/* Fun. Return : void                                                                                */
/*****************************************************************************************************/
void LED_voidStatus_Led_Pin ( u8 Copy_u8PortNumber, u8 Copy_u8PinNumber, u8 Copy_u8Status )
{
    349a:	df 93       	push	r29
    349c:	cf 93       	push	r28
    349e:	00 d0       	rcall	.+0      	; 0x34a0 <LED_voidStatus_Led_Pin+0x6>
    34a0:	00 d0       	rcall	.+0      	; 0x34a2 <LED_voidStatus_Led_Pin+0x8>
    34a2:	0f 92       	push	r0
    34a4:	cd b7       	in	r28, 0x3d	; 61
    34a6:	de b7       	in	r29, 0x3e	; 62
    34a8:	89 83       	std	Y+1, r24	; 0x01
    34aa:	6a 83       	std	Y+2, r22	; 0x02
    34ac:	4b 83       	std	Y+3, r20	; 0x03
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD  || Copy_u8PinNumber > PIN7 )
    34ae:	89 81       	ldd	r24, Y+1	; 0x01
    34b0:	84 30       	cpi	r24, 0x04	; 4
    34b2:	e0 f4       	brcc	.+56     	; 0x34ec <LED_voidStatus_Led_Pin+0x52>
    34b4:	8a 81       	ldd	r24, Y+2	; 0x02
    34b6:	88 30       	cpi	r24, 0x08	; 8
    34b8:	c8 f4       	brcc	.+50     	; 0x34ec <LED_voidStatus_Led_Pin+0x52>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Status)
    34ba:	8b 81       	ldd	r24, Y+3	; 0x03
    34bc:	28 2f       	mov	r18, r24
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	3d 83       	std	Y+5, r19	; 0x05
    34c2:	2c 83       	std	Y+4, r18	; 0x04
    34c4:	8c 81       	ldd	r24, Y+4	; 0x04
    34c6:	9d 81       	ldd	r25, Y+5	; 0x05
    34c8:	00 97       	sbiw	r24, 0x00	; 0
    34ca:	59 f0       	breq	.+22     	; 0x34e2 <LED_voidStatus_Led_Pin+0x48>
    34cc:	2c 81       	ldd	r18, Y+4	; 0x04
    34ce:	3d 81       	ldd	r19, Y+5	; 0x05
    34d0:	21 30       	cpi	r18, 0x01	; 1
    34d2:	31 05       	cpc	r19, r1
    34d4:	59 f4       	brne	.+22     	; 0x34ec <LED_voidStatus_Led_Pin+0x52>
        {
            case ON  :   DIO_voidSetPinValue ( Copy_u8PortNumber, Copy_u8PinNumber, HIGH );     break;
    34d6:	89 81       	ldd	r24, Y+1	; 0x01
    34d8:	6a 81       	ldd	r22, Y+2	; 0x02
    34da:	41 e0       	ldi	r20, 0x01	; 1
    34dc:	0e 94 68 14 	call	0x28d0	; 0x28d0 <DIO_voidSetPinValue>
    34e0:	05 c0       	rjmp	.+10     	; 0x34ec <LED_voidStatus_Led_Pin+0x52>
            case OFF :   DIO_voidSetPinValue ( Copy_u8PortNumber, Copy_u8PinNumber, LOW  );     break;
    34e2:	89 81       	ldd	r24, Y+1	; 0x01
    34e4:	6a 81       	ldd	r22, Y+2	; 0x02
    34e6:	40 e0       	ldi	r20, 0x00	; 0
    34e8:	0e 94 68 14 	call	0x28d0	; 0x28d0 <DIO_voidSetPinValue>
            default  :                                                                          break;
        }
    }
}
    34ec:	0f 90       	pop	r0
    34ee:	0f 90       	pop	r0
    34f0:	0f 90       	pop	r0
    34f2:	0f 90       	pop	r0
    34f4:	0f 90       	pop	r0
    34f6:	cf 91       	pop	r28
    34f8:	df 91       	pop	r29
    34fa:	08 95       	ret

000034fc <LED_voidStatus_8Leds_Port>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                                     */
/* Fun. Argument3: Copy_u8Status { ON ,OFF }                                                         */
/* Fun. Return : void                                                                                */
/*****************************************************************************************************/
void LED_voidStatus_8Leds_Port ( u8 Copy_u8PortNumber, u8 Copy_u8Status )
{
    34fc:	df 93       	push	r29
    34fe:	cf 93       	push	r28
    3500:	00 d0       	rcall	.+0      	; 0x3502 <LED_voidStatus_8Leds_Port+0x6>
    3502:	00 d0       	rcall	.+0      	; 0x3504 <LED_voidStatus_8Leds_Port+0x8>
    3504:	cd b7       	in	r28, 0x3d	; 61
    3506:	de b7       	in	r29, 0x3e	; 62
    3508:	89 83       	std	Y+1, r24	; 0x01
    350a:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD  )
    350c:	89 81       	ldd	r24, Y+1	; 0x01
    350e:	84 30       	cpi	r24, 0x04	; 4
    3510:	b8 f4       	brcc	.+46     	; 0x3540 <LED_voidStatus_8Leds_Port+0x44>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Status)
    3512:	8a 81       	ldd	r24, Y+2	; 0x02
    3514:	28 2f       	mov	r18, r24
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	3c 83       	std	Y+4, r19	; 0x04
    351a:	2b 83       	std	Y+3, r18	; 0x03
    351c:	8b 81       	ldd	r24, Y+3	; 0x03
    351e:	9c 81       	ldd	r25, Y+4	; 0x04
    3520:	00 97       	sbiw	r24, 0x00	; 0
    3522:	51 f0       	breq	.+20     	; 0x3538 <LED_voidStatus_8Leds_Port+0x3c>
    3524:	2b 81       	ldd	r18, Y+3	; 0x03
    3526:	3c 81       	ldd	r19, Y+4	; 0x04
    3528:	21 30       	cpi	r18, 0x01	; 1
    352a:	31 05       	cpc	r19, r1
    352c:	49 f4       	brne	.+18     	; 0x3540 <LED_voidStatus_8Leds_Port+0x44>
        {
            case ON  :   DIO_voidSetPortValue ( Copy_u8PortNumber, HIGH );     break;
    352e:	89 81       	ldd	r24, Y+1	; 0x01
    3530:	61 e0       	ldi	r22, 0x01	; 1
    3532:	0e 94 78 15 	call	0x2af0	; 0x2af0 <DIO_voidSetPortValue>
    3536:	04 c0       	rjmp	.+8      	; 0x3540 <LED_voidStatus_8Leds_Port+0x44>
            case OFF :   DIO_voidSetPortValue ( Copy_u8PortNumber, LOW  );     break;
    3538:	89 81       	ldd	r24, Y+1	; 0x01
    353a:	60 e0       	ldi	r22, 0x00	; 0
    353c:	0e 94 78 15 	call	0x2af0	; 0x2af0 <DIO_voidSetPortValue>
            default  :                                                         break;
        }
    }
}
    3540:	0f 90       	pop	r0
    3542:	0f 90       	pop	r0
    3544:	0f 90       	pop	r0
    3546:	0f 90       	pop	r0
    3548:	cf 91       	pop	r28
    354a:	df 91       	pop	r29
    354c:	08 95       	ret

0000354e <LED_voidToggle_Led_Pin>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                      */
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }            */
/* Fun. Return : void                                                                 */
/**************************************************************************************/
void LED_voidToggle_Led_Pin ( u8 Copy_u8PortNumber, u8 Copy_u8PinNumber )
{
    354e:	df 93       	push	r29
    3550:	cf 93       	push	r28
    3552:	00 d0       	rcall	.+0      	; 0x3554 <LED_voidToggle_Led_Pin+0x6>
    3554:	cd b7       	in	r28, 0x3d	; 61
    3556:	de b7       	in	r29, 0x3e	; 62
    3558:	89 83       	std	Y+1, r24	; 0x01
    355a:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD  || Copy_u8PinNumber > PIN7 )
    355c:	89 81       	ldd	r24, Y+1	; 0x01
    355e:	84 30       	cpi	r24, 0x04	; 4
    3560:	38 f4       	brcc	.+14     	; 0x3570 <LED_voidToggle_Led_Pin+0x22>
    3562:	8a 81       	ldd	r24, Y+2	; 0x02
    3564:	88 30       	cpi	r24, 0x08	; 8
    3566:	20 f4       	brcc	.+8      	; 0x3570 <LED_voidToggle_Led_Pin+0x22>
    {
        // Do Nothing
    }
    else
    {
        DIO_voidTogglePinValue ( Copy_u8PortNumber, Copy_u8PinNumber );
    3568:	89 81       	ldd	r24, Y+1	; 0x01
    356a:	6a 81       	ldd	r22, Y+2	; 0x02
    356c:	0e 94 80 16 	call	0x2d00	; 0x2d00 <DIO_voidTogglePinValue>
    }
}
    3570:	0f 90       	pop	r0
    3572:	0f 90       	pop	r0
    3574:	cf 91       	pop	r28
    3576:	df 91       	pop	r29
    3578:	08 95       	ret

0000357a <LED_voidToggle_8Leds_Port>:
/* Description : Toggle Status of String 8 leds from Turn ON to OFF & from OFF to ON  */
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                      */
/* Fun. Return : void                                                                 */
/**************************************************************************************/
void LED_voidToggle_8Leds_Port ( u8 Copy_u8PortNumber )
{
    357a:	df 93       	push	r29
    357c:	cf 93       	push	r28
    357e:	0f 92       	push	r0
    3580:	cd b7       	in	r28, 0x3d	; 61
    3582:	de b7       	in	r29, 0x3e	; 62
    3584:	89 83       	std	Y+1, r24	; 0x01
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
    3586:	89 81       	ldd	r24, Y+1	; 0x01
    3588:	84 30       	cpi	r24, 0x04	; 4
    358a:	18 f4       	brcc	.+6      	; 0x3592 <LED_voidToggle_8Leds_Port+0x18>
    {
        // Do Nothing
    }
    else
    {
        DIO_voidTogglePortValue ( Copy_u8PortNumber );
    358c:	89 81       	ldd	r24, Y+1	; 0x01
    358e:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <DIO_voidTogglePortValue>
    }
}
    3592:	0f 90       	pop	r0
    3594:	cf 91       	pop	r28
    3596:	df 91       	pop	r29
    3598:	08 95       	ret

0000359a <LCD_voidInit>:
/* Function Name : [1] LCD_voidInit                                                      */
/* Description : Initialized the LCD                                                     */
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidInit (void)
{
    359a:	0f 93       	push	r16
    359c:	1f 93       	push	r17
    359e:	df 93       	push	r29
    35a0:	cf 93       	push	r28
    35a2:	cd b7       	in	r28, 0x3d	; 61
    35a4:	de b7       	in	r29, 0x3e	; 62
    35a6:	c6 54       	subi	r28, 0x46	; 70
    35a8:	d0 40       	sbci	r29, 0x00	; 0
    35aa:	0f b6       	in	r0, 0x3f	; 63
    35ac:	f8 94       	cli
    35ae:	de bf       	out	0x3e, r29	; 62
    35b0:	0f be       	out	0x3f, r0	; 63
    35b2:	cd bf       	out	0x3d, r28	; 61
    /* Control Pins Directions */
    DIO_voidSetPortDirection(LCD_DATA_PORT , OUTPUT);
    35b4:	81 e0       	ldi	r24, 0x01	; 1
    35b6:	61 e0       	ldi	r22, 0x01	; 1
    35b8:	0e 94 df 13 	call	0x27be	; 0x27be <DIO_voidSetPortDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT,RS_PIN,OUTPUT);
    35bc:	83 e0       	ldi	r24, 0x03	; 3
    35be:	62 e0       	ldi	r22, 0x02	; 2
    35c0:	41 e0       	ldi	r20, 0x01	; 1
    35c2:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT,RW_PIN,OUTPUT);
    35c6:	83 e0       	ldi	r24, 0x03	; 3
    35c8:	63 e0       	ldi	r22, 0x03	; 3
    35ca:	41 e0       	ldi	r20, 0x01	; 1
    35cc:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT,E_PIN,OUTPUT);
    35d0:	83 e0       	ldi	r24, 0x03	; 3
    35d2:	64 e0       	ldi	r22, 0x04	; 4
    35d4:	41 e0       	ldi	r20, 0x01	; 1
    35d6:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_voidSetPinDirection>
    35da:	fe 01       	movw	r30, r28
    35dc:	ed 5b       	subi	r30, 0xBD	; 189
    35de:	ff 4f       	sbci	r31, 0xFF	; 255
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	ac e0       	ldi	r26, 0x0C	; 12
    35e6:	b2 e4       	ldi	r27, 0x42	; 66
    35e8:	80 83       	st	Z, r24
    35ea:	91 83       	std	Z+1, r25	; 0x01
    35ec:	a2 83       	std	Z+2, r26	; 0x02
    35ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35f0:	8e 01       	movw	r16, r28
    35f2:	01 5c       	subi	r16, 0xC1	; 193
    35f4:	1f 4f       	sbci	r17, 0xFF	; 255
    35f6:	fe 01       	movw	r30, r28
    35f8:	ed 5b       	subi	r30, 0xBD	; 189
    35fa:	ff 4f       	sbci	r31, 0xFF	; 255
    35fc:	60 81       	ld	r22, Z
    35fe:	71 81       	ldd	r23, Z+1	; 0x01
    3600:	82 81       	ldd	r24, Z+2	; 0x02
    3602:	93 81       	ldd	r25, Z+3	; 0x03
    3604:	20 e0       	ldi	r18, 0x00	; 0
    3606:	30 e0       	ldi	r19, 0x00	; 0
    3608:	4a ef       	ldi	r20, 0xFA	; 250
    360a:	54 e4       	ldi	r21, 0x44	; 68
    360c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3610:	dc 01       	movw	r26, r24
    3612:	cb 01       	movw	r24, r22
    3614:	f8 01       	movw	r30, r16
    3616:	80 83       	st	Z, r24
    3618:	91 83       	std	Z+1, r25	; 0x01
    361a:	a2 83       	std	Z+2, r26	; 0x02
    361c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    361e:	fe 01       	movw	r30, r28
    3620:	ff 96       	adiw	r30, 0x3f	; 63
    3622:	60 81       	ld	r22, Z
    3624:	71 81       	ldd	r23, Z+1	; 0x01
    3626:	82 81       	ldd	r24, Z+2	; 0x02
    3628:	93 81       	ldd	r25, Z+3	; 0x03
    362a:	20 e0       	ldi	r18, 0x00	; 0
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	40 e8       	ldi	r20, 0x80	; 128
    3630:	5f e3       	ldi	r21, 0x3F	; 63
    3632:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3636:	88 23       	and	r24, r24
    3638:	2c f4       	brge	.+10     	; 0x3644 <LCD_voidInit+0xaa>
		__ticks = 1;
    363a:	81 e0       	ldi	r24, 0x01	; 1
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	9e af       	std	Y+62, r25	; 0x3e
    3640:	8d af       	std	Y+61, r24	; 0x3d
    3642:	46 c0       	rjmp	.+140    	; 0x36d0 <LCD_voidInit+0x136>
	else if (__tmp > 65535)
    3644:	fe 01       	movw	r30, r28
    3646:	ff 96       	adiw	r30, 0x3f	; 63
    3648:	60 81       	ld	r22, Z
    364a:	71 81       	ldd	r23, Z+1	; 0x01
    364c:	82 81       	ldd	r24, Z+2	; 0x02
    364e:	93 81       	ldd	r25, Z+3	; 0x03
    3650:	20 e0       	ldi	r18, 0x00	; 0
    3652:	3f ef       	ldi	r19, 0xFF	; 255
    3654:	4f e7       	ldi	r20, 0x7F	; 127
    3656:	57 e4       	ldi	r21, 0x47	; 71
    3658:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    365c:	18 16       	cp	r1, r24
    365e:	64 f5       	brge	.+88     	; 0x36b8 <LCD_voidInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3660:	fe 01       	movw	r30, r28
    3662:	ed 5b       	subi	r30, 0xBD	; 189
    3664:	ff 4f       	sbci	r31, 0xFF	; 255
    3666:	60 81       	ld	r22, Z
    3668:	71 81       	ldd	r23, Z+1	; 0x01
    366a:	82 81       	ldd	r24, Z+2	; 0x02
    366c:	93 81       	ldd	r25, Z+3	; 0x03
    366e:	20 e0       	ldi	r18, 0x00	; 0
    3670:	30 e0       	ldi	r19, 0x00	; 0
    3672:	40 e2       	ldi	r20, 0x20	; 32
    3674:	51 e4       	ldi	r21, 0x41	; 65
    3676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    367a:	dc 01       	movw	r26, r24
    367c:	cb 01       	movw	r24, r22
    367e:	bc 01       	movw	r22, r24
    3680:	cd 01       	movw	r24, r26
    3682:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3686:	dc 01       	movw	r26, r24
    3688:	cb 01       	movw	r24, r22
    368a:	9e af       	std	Y+62, r25	; 0x3e
    368c:	8d af       	std	Y+61, r24	; 0x3d
    368e:	0f c0       	rjmp	.+30     	; 0x36ae <LCD_voidInit+0x114>
    3690:	88 ec       	ldi	r24, 0xC8	; 200
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	9c af       	std	Y+60, r25	; 0x3c
    3696:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3698:	8b ad       	ldd	r24, Y+59	; 0x3b
    369a:	9c ad       	ldd	r25, Y+60	; 0x3c
    369c:	01 97       	sbiw	r24, 0x01	; 1
    369e:	f1 f7       	brne	.-4      	; 0x369c <LCD_voidInit+0x102>
    36a0:	9c af       	std	Y+60, r25	; 0x3c
    36a2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    36a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    36a8:	01 97       	sbiw	r24, 0x01	; 1
    36aa:	9e af       	std	Y+62, r25	; 0x3e
    36ac:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    36b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    36b2:	00 97       	sbiw	r24, 0x00	; 0
    36b4:	69 f7       	brne	.-38     	; 0x3690 <LCD_voidInit+0xf6>
    36b6:	16 c0       	rjmp	.+44     	; 0x36e4 <LCD_voidInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36b8:	fe 01       	movw	r30, r28
    36ba:	ff 96       	adiw	r30, 0x3f	; 63
    36bc:	60 81       	ld	r22, Z
    36be:	71 81       	ldd	r23, Z+1	; 0x01
    36c0:	82 81       	ldd	r24, Z+2	; 0x02
    36c2:	93 81       	ldd	r25, Z+3	; 0x03
    36c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c8:	dc 01       	movw	r26, r24
    36ca:	cb 01       	movw	r24, r22
    36cc:	9e af       	std	Y+62, r25	; 0x3e
    36ce:	8d af       	std	Y+61, r24	; 0x3d
    36d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    36d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    36d4:	9a af       	std	Y+58, r25	; 0x3a
    36d6:	89 af       	std	Y+57, r24	; 0x39
    36d8:	89 ad       	ldd	r24, Y+57	; 0x39
    36da:	9a ad       	ldd	r25, Y+58	; 0x3a
    36dc:	01 97       	sbiw	r24, 0x01	; 1
    36de:	f1 f7       	brne	.-4      	; 0x36dc <LCD_voidInit+0x142>
    36e0:	9a af       	std	Y+58, r25	; 0x3a
    36e2:	89 af       	std	Y+57, r24	; 0x39

    _delay_ms(35);    //TIMER0_voidSetBusyWait_ms(35);

    /* Send Command Function Set */
    LCD_voidWriteCommand ( FS_8BIT_2LINES_5x10 );
    36e4:	8c e3       	ldi	r24, 0x3C	; 60
    36e6:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <LCD_voidWriteCommand>
    36ea:	80 e0       	ldi	r24, 0x00	; 0
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	a0 e8       	ldi	r26, 0x80	; 128
    36f0:	bf e3       	ldi	r27, 0x3F	; 63
    36f2:	8d ab       	std	Y+53, r24	; 0x35
    36f4:	9e ab       	std	Y+54, r25	; 0x36
    36f6:	af ab       	std	Y+55, r26	; 0x37
    36f8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36fa:	6d a9       	ldd	r22, Y+53	; 0x35
    36fc:	7e a9       	ldd	r23, Y+54	; 0x36
    36fe:	8f a9       	ldd	r24, Y+55	; 0x37
    3700:	98 ad       	ldd	r25, Y+56	; 0x38
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	4a ef       	ldi	r20, 0xFA	; 250
    3708:	54 e4       	ldi	r21, 0x44	; 68
    370a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    370e:	dc 01       	movw	r26, r24
    3710:	cb 01       	movw	r24, r22
    3712:	89 ab       	std	Y+49, r24	; 0x31
    3714:	9a ab       	std	Y+50, r25	; 0x32
    3716:	ab ab       	std	Y+51, r26	; 0x33
    3718:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    371a:	69 a9       	ldd	r22, Y+49	; 0x31
    371c:	7a a9       	ldd	r23, Y+50	; 0x32
    371e:	8b a9       	ldd	r24, Y+51	; 0x33
    3720:	9c a9       	ldd	r25, Y+52	; 0x34
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	40 e8       	ldi	r20, 0x80	; 128
    3728:	5f e3       	ldi	r21, 0x3F	; 63
    372a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    372e:	88 23       	and	r24, r24
    3730:	2c f4       	brge	.+10     	; 0x373c <LCD_voidInit+0x1a2>
		__ticks = 1;
    3732:	81 e0       	ldi	r24, 0x01	; 1
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	98 ab       	std	Y+48, r25	; 0x30
    3738:	8f a7       	std	Y+47, r24	; 0x2f
    373a:	3f c0       	rjmp	.+126    	; 0x37ba <LCD_voidInit+0x220>
	else if (__tmp > 65535)
    373c:	69 a9       	ldd	r22, Y+49	; 0x31
    373e:	7a a9       	ldd	r23, Y+50	; 0x32
    3740:	8b a9       	ldd	r24, Y+51	; 0x33
    3742:	9c a9       	ldd	r25, Y+52	; 0x34
    3744:	20 e0       	ldi	r18, 0x00	; 0
    3746:	3f ef       	ldi	r19, 0xFF	; 255
    3748:	4f e7       	ldi	r20, 0x7F	; 127
    374a:	57 e4       	ldi	r21, 0x47	; 71
    374c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3750:	18 16       	cp	r1, r24
    3752:	4c f5       	brge	.+82     	; 0x37a6 <LCD_voidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3754:	6d a9       	ldd	r22, Y+53	; 0x35
    3756:	7e a9       	ldd	r23, Y+54	; 0x36
    3758:	8f a9       	ldd	r24, Y+55	; 0x37
    375a:	98 ad       	ldd	r25, Y+56	; 0x38
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	40 e2       	ldi	r20, 0x20	; 32
    3762:	51 e4       	ldi	r21, 0x41	; 65
    3764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	bc 01       	movw	r22, r24
    376e:	cd 01       	movw	r24, r26
    3770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3774:	dc 01       	movw	r26, r24
    3776:	cb 01       	movw	r24, r22
    3778:	98 ab       	std	Y+48, r25	; 0x30
    377a:	8f a7       	std	Y+47, r24	; 0x2f
    377c:	0f c0       	rjmp	.+30     	; 0x379c <LCD_voidInit+0x202>
    377e:	88 ec       	ldi	r24, 0xC8	; 200
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	9e a7       	std	Y+46, r25	; 0x2e
    3784:	8d a7       	std	Y+45, r24	; 0x2d
    3786:	8d a5       	ldd	r24, Y+45	; 0x2d
    3788:	9e a5       	ldd	r25, Y+46	; 0x2e
    378a:	01 97       	sbiw	r24, 0x01	; 1
    378c:	f1 f7       	brne	.-4      	; 0x378a <LCD_voidInit+0x1f0>
    378e:	9e a7       	std	Y+46, r25	; 0x2e
    3790:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3792:	8f a5       	ldd	r24, Y+47	; 0x2f
    3794:	98 a9       	ldd	r25, Y+48	; 0x30
    3796:	01 97       	sbiw	r24, 0x01	; 1
    3798:	98 ab       	std	Y+48, r25	; 0x30
    379a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    379c:	8f a5       	ldd	r24, Y+47	; 0x2f
    379e:	98 a9       	ldd	r25, Y+48	; 0x30
    37a0:	00 97       	sbiw	r24, 0x00	; 0
    37a2:	69 f7       	brne	.-38     	; 0x377e <LCD_voidInit+0x1e4>
    37a4:	14 c0       	rjmp	.+40     	; 0x37ce <LCD_voidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a6:	69 a9       	ldd	r22, Y+49	; 0x31
    37a8:	7a a9       	ldd	r23, Y+50	; 0x32
    37aa:	8b a9       	ldd	r24, Y+51	; 0x33
    37ac:	9c a9       	ldd	r25, Y+52	; 0x34
    37ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b2:	dc 01       	movw	r26, r24
    37b4:	cb 01       	movw	r24, r22
    37b6:	98 ab       	std	Y+48, r25	; 0x30
    37b8:	8f a7       	std	Y+47, r24	; 0x2f
    37ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    37bc:	98 a9       	ldd	r25, Y+48	; 0x30
    37be:	9c a7       	std	Y+44, r25	; 0x2c
    37c0:	8b a7       	std	Y+43, r24	; 0x2b
    37c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    37c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    37c6:	01 97       	sbiw	r24, 0x01	; 1
    37c8:	f1 f7       	brne	.-4      	; 0x37c6 <LCD_voidInit+0x22c>
    37ca:	9c a7       	std	Y+44, r25	; 0x2c
    37cc:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);     // TIMER0_voidSetBusyWait_ms(1);

    /* Send Command Display ON-OFF Control */
    LCD_voidWriteCommand ( DIS_ON_NO_CURSER );
    37ce:	8c e0       	ldi	r24, 0x0C	; 12
    37d0:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <LCD_voidWriteCommand>
    37d4:	80 e0       	ldi	r24, 0x00	; 0
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	a0 e8       	ldi	r26, 0x80	; 128
    37da:	bf e3       	ldi	r27, 0x3F	; 63
    37dc:	8f a3       	std	Y+39, r24	; 0x27
    37de:	98 a7       	std	Y+40, r25	; 0x28
    37e0:	a9 a7       	std	Y+41, r26	; 0x29
    37e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37e4:	6f a1       	ldd	r22, Y+39	; 0x27
    37e6:	78 a5       	ldd	r23, Y+40	; 0x28
    37e8:	89 a5       	ldd	r24, Y+41	; 0x29
    37ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    37ec:	20 e0       	ldi	r18, 0x00	; 0
    37ee:	30 e0       	ldi	r19, 0x00	; 0
    37f0:	4a ef       	ldi	r20, 0xFA	; 250
    37f2:	54 e4       	ldi	r21, 0x44	; 68
    37f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f8:	dc 01       	movw	r26, r24
    37fa:	cb 01       	movw	r24, r22
    37fc:	8b a3       	std	Y+35, r24	; 0x23
    37fe:	9c a3       	std	Y+36, r25	; 0x24
    3800:	ad a3       	std	Y+37, r26	; 0x25
    3802:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3804:	6b a1       	ldd	r22, Y+35	; 0x23
    3806:	7c a1       	ldd	r23, Y+36	; 0x24
    3808:	8d a1       	ldd	r24, Y+37	; 0x25
    380a:	9e a1       	ldd	r25, Y+38	; 0x26
    380c:	20 e0       	ldi	r18, 0x00	; 0
    380e:	30 e0       	ldi	r19, 0x00	; 0
    3810:	40 e8       	ldi	r20, 0x80	; 128
    3812:	5f e3       	ldi	r21, 0x3F	; 63
    3814:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3818:	88 23       	and	r24, r24
    381a:	2c f4       	brge	.+10     	; 0x3826 <LCD_voidInit+0x28c>
		__ticks = 1;
    381c:	81 e0       	ldi	r24, 0x01	; 1
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	9a a3       	std	Y+34, r25	; 0x22
    3822:	89 a3       	std	Y+33, r24	; 0x21
    3824:	3f c0       	rjmp	.+126    	; 0x38a4 <LCD_voidInit+0x30a>
	else if (__tmp > 65535)
    3826:	6b a1       	ldd	r22, Y+35	; 0x23
    3828:	7c a1       	ldd	r23, Y+36	; 0x24
    382a:	8d a1       	ldd	r24, Y+37	; 0x25
    382c:	9e a1       	ldd	r25, Y+38	; 0x26
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	3f ef       	ldi	r19, 0xFF	; 255
    3832:	4f e7       	ldi	r20, 0x7F	; 127
    3834:	57 e4       	ldi	r21, 0x47	; 71
    3836:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    383a:	18 16       	cp	r1, r24
    383c:	4c f5       	brge	.+82     	; 0x3890 <LCD_voidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    383e:	6f a1       	ldd	r22, Y+39	; 0x27
    3840:	78 a5       	ldd	r23, Y+40	; 0x28
    3842:	89 a5       	ldd	r24, Y+41	; 0x29
    3844:	9a a5       	ldd	r25, Y+42	; 0x2a
    3846:	20 e0       	ldi	r18, 0x00	; 0
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	40 e2       	ldi	r20, 0x20	; 32
    384c:	51 e4       	ldi	r21, 0x41	; 65
    384e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3852:	dc 01       	movw	r26, r24
    3854:	cb 01       	movw	r24, r22
    3856:	bc 01       	movw	r22, r24
    3858:	cd 01       	movw	r24, r26
    385a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    385e:	dc 01       	movw	r26, r24
    3860:	cb 01       	movw	r24, r22
    3862:	9a a3       	std	Y+34, r25	; 0x22
    3864:	89 a3       	std	Y+33, r24	; 0x21
    3866:	0f c0       	rjmp	.+30     	; 0x3886 <LCD_voidInit+0x2ec>
    3868:	88 ec       	ldi	r24, 0xC8	; 200
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	98 a3       	std	Y+32, r25	; 0x20
    386e:	8f 8f       	std	Y+31, r24	; 0x1f
    3870:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3872:	98 a1       	ldd	r25, Y+32	; 0x20
    3874:	01 97       	sbiw	r24, 0x01	; 1
    3876:	f1 f7       	brne	.-4      	; 0x3874 <LCD_voidInit+0x2da>
    3878:	98 a3       	std	Y+32, r25	; 0x20
    387a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    387c:	89 a1       	ldd	r24, Y+33	; 0x21
    387e:	9a a1       	ldd	r25, Y+34	; 0x22
    3880:	01 97       	sbiw	r24, 0x01	; 1
    3882:	9a a3       	std	Y+34, r25	; 0x22
    3884:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3886:	89 a1       	ldd	r24, Y+33	; 0x21
    3888:	9a a1       	ldd	r25, Y+34	; 0x22
    388a:	00 97       	sbiw	r24, 0x00	; 0
    388c:	69 f7       	brne	.-38     	; 0x3868 <LCD_voidInit+0x2ce>
    388e:	14 c0       	rjmp	.+40     	; 0x38b8 <LCD_voidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3890:	6b a1       	ldd	r22, Y+35	; 0x23
    3892:	7c a1       	ldd	r23, Y+36	; 0x24
    3894:	8d a1       	ldd	r24, Y+37	; 0x25
    3896:	9e a1       	ldd	r25, Y+38	; 0x26
    3898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    389c:	dc 01       	movw	r26, r24
    389e:	cb 01       	movw	r24, r22
    38a0:	9a a3       	std	Y+34, r25	; 0x22
    38a2:	89 a3       	std	Y+33, r24	; 0x21
    38a4:	89 a1       	ldd	r24, Y+33	; 0x21
    38a6:	9a a1       	ldd	r25, Y+34	; 0x22
    38a8:	9e 8f       	std	Y+30, r25	; 0x1e
    38aa:	8d 8f       	std	Y+29, r24	; 0x1d
    38ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38b0:	01 97       	sbiw	r24, 0x01	; 1
    38b2:	f1 f7       	brne	.-4      	; 0x38b0 <LCD_voidInit+0x316>
    38b4:	9e 8f       	std	Y+30, r25	; 0x1e
    38b6:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);     //TIMER0_voidSetBusyWait_ms(1);

    /* Send Command Display Clear */
    LCD_voidWriteCommand ( DIS_CLEAR );
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <LCD_voidWriteCommand>
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	a0 e0       	ldi	r26, 0x00	; 0
    38c4:	b0 e4       	ldi	r27, 0x40	; 64
    38c6:	89 8f       	std	Y+25, r24	; 0x19
    38c8:	9a 8f       	std	Y+26, r25	; 0x1a
    38ca:	ab 8f       	std	Y+27, r26	; 0x1b
    38cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38ce:	69 8d       	ldd	r22, Y+25	; 0x19
    38d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38d6:	20 e0       	ldi	r18, 0x00	; 0
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	4a ef       	ldi	r20, 0xFA	; 250
    38dc:	54 e4       	ldi	r21, 0x44	; 68
    38de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38e2:	dc 01       	movw	r26, r24
    38e4:	cb 01       	movw	r24, r22
    38e6:	8d 8b       	std	Y+21, r24	; 0x15
    38e8:	9e 8b       	std	Y+22, r25	; 0x16
    38ea:	af 8b       	std	Y+23, r26	; 0x17
    38ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38ee:	6d 89       	ldd	r22, Y+21	; 0x15
    38f0:	7e 89       	ldd	r23, Y+22	; 0x16
    38f2:	8f 89       	ldd	r24, Y+23	; 0x17
    38f4:	98 8d       	ldd	r25, Y+24	; 0x18
    38f6:	20 e0       	ldi	r18, 0x00	; 0
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	40 e8       	ldi	r20, 0x80	; 128
    38fc:	5f e3       	ldi	r21, 0x3F	; 63
    38fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3902:	88 23       	and	r24, r24
    3904:	2c f4       	brge	.+10     	; 0x3910 <LCD_voidInit+0x376>
		__ticks = 1;
    3906:	81 e0       	ldi	r24, 0x01	; 1
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	9c 8b       	std	Y+20, r25	; 0x14
    390c:	8b 8b       	std	Y+19, r24	; 0x13
    390e:	3f c0       	rjmp	.+126    	; 0x398e <LCD_voidInit+0x3f4>
	else if (__tmp > 65535)
    3910:	6d 89       	ldd	r22, Y+21	; 0x15
    3912:	7e 89       	ldd	r23, Y+22	; 0x16
    3914:	8f 89       	ldd	r24, Y+23	; 0x17
    3916:	98 8d       	ldd	r25, Y+24	; 0x18
    3918:	20 e0       	ldi	r18, 0x00	; 0
    391a:	3f ef       	ldi	r19, 0xFF	; 255
    391c:	4f e7       	ldi	r20, 0x7F	; 127
    391e:	57 e4       	ldi	r21, 0x47	; 71
    3920:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3924:	18 16       	cp	r1, r24
    3926:	4c f5       	brge	.+82     	; 0x397a <LCD_voidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3928:	69 8d       	ldd	r22, Y+25	; 0x19
    392a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    392c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    392e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	40 e2       	ldi	r20, 0x20	; 32
    3936:	51 e4       	ldi	r21, 0x41	; 65
    3938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    393c:	dc 01       	movw	r26, r24
    393e:	cb 01       	movw	r24, r22
    3940:	bc 01       	movw	r22, r24
    3942:	cd 01       	movw	r24, r26
    3944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3948:	dc 01       	movw	r26, r24
    394a:	cb 01       	movw	r24, r22
    394c:	9c 8b       	std	Y+20, r25	; 0x14
    394e:	8b 8b       	std	Y+19, r24	; 0x13
    3950:	0f c0       	rjmp	.+30     	; 0x3970 <LCD_voidInit+0x3d6>
    3952:	88 ec       	ldi	r24, 0xC8	; 200
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	9a 8b       	std	Y+18, r25	; 0x12
    3958:	89 8b       	std	Y+17, r24	; 0x11
    395a:	89 89       	ldd	r24, Y+17	; 0x11
    395c:	9a 89       	ldd	r25, Y+18	; 0x12
    395e:	01 97       	sbiw	r24, 0x01	; 1
    3960:	f1 f7       	brne	.-4      	; 0x395e <LCD_voidInit+0x3c4>
    3962:	9a 8b       	std	Y+18, r25	; 0x12
    3964:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3966:	8b 89       	ldd	r24, Y+19	; 0x13
    3968:	9c 89       	ldd	r25, Y+20	; 0x14
    396a:	01 97       	sbiw	r24, 0x01	; 1
    396c:	9c 8b       	std	Y+20, r25	; 0x14
    396e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3970:	8b 89       	ldd	r24, Y+19	; 0x13
    3972:	9c 89       	ldd	r25, Y+20	; 0x14
    3974:	00 97       	sbiw	r24, 0x00	; 0
    3976:	69 f7       	brne	.-38     	; 0x3952 <LCD_voidInit+0x3b8>
    3978:	14 c0       	rjmp	.+40     	; 0x39a2 <LCD_voidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    397a:	6d 89       	ldd	r22, Y+21	; 0x15
    397c:	7e 89       	ldd	r23, Y+22	; 0x16
    397e:	8f 89       	ldd	r24, Y+23	; 0x17
    3980:	98 8d       	ldd	r25, Y+24	; 0x18
    3982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3986:	dc 01       	movw	r26, r24
    3988:	cb 01       	movw	r24, r22
    398a:	9c 8b       	std	Y+20, r25	; 0x14
    398c:	8b 8b       	std	Y+19, r24	; 0x13
    398e:	8b 89       	ldd	r24, Y+19	; 0x13
    3990:	9c 89       	ldd	r25, Y+20	; 0x14
    3992:	98 8b       	std	Y+16, r25	; 0x10
    3994:	8f 87       	std	Y+15, r24	; 0x0f
    3996:	8f 85       	ldd	r24, Y+15	; 0x0f
    3998:	98 89       	ldd	r25, Y+16	; 0x10
    399a:	01 97       	sbiw	r24, 0x01	; 1
    399c:	f1 f7       	brne	.-4      	; 0x399a <LCD_voidInit+0x400>
    399e:	98 8b       	std	Y+16, r25	; 0x10
    39a0:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);     //TIMER0_voidSetBusyWait_ms(2);

    /* Send Command Entry Mode */
    LCD_voidWriteCommand ( ENTRY_MODE_INCREASE_NO_SHIFT );
    39a2:	86 e0       	ldi	r24, 0x06	; 6
    39a4:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <LCD_voidWriteCommand>
    39a8:	80 e0       	ldi	r24, 0x00	; 0
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	a0 e8       	ldi	r26, 0x80	; 128
    39ae:	bf e3       	ldi	r27, 0x3F	; 63
    39b0:	8b 87       	std	Y+11, r24	; 0x0b
    39b2:	9c 87       	std	Y+12, r25	; 0x0c
    39b4:	ad 87       	std	Y+13, r26	; 0x0d
    39b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    39ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    39bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    39be:	9e 85       	ldd	r25, Y+14	; 0x0e
    39c0:	20 e0       	ldi	r18, 0x00	; 0
    39c2:	30 e0       	ldi	r19, 0x00	; 0
    39c4:	4a ef       	ldi	r20, 0xFA	; 250
    39c6:	54 e4       	ldi	r21, 0x44	; 68
    39c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39cc:	dc 01       	movw	r26, r24
    39ce:	cb 01       	movw	r24, r22
    39d0:	8f 83       	std	Y+7, r24	; 0x07
    39d2:	98 87       	std	Y+8, r25	; 0x08
    39d4:	a9 87       	std	Y+9, r26	; 0x09
    39d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39d8:	6f 81       	ldd	r22, Y+7	; 0x07
    39da:	78 85       	ldd	r23, Y+8	; 0x08
    39dc:	89 85       	ldd	r24, Y+9	; 0x09
    39de:	9a 85       	ldd	r25, Y+10	; 0x0a
    39e0:	20 e0       	ldi	r18, 0x00	; 0
    39e2:	30 e0       	ldi	r19, 0x00	; 0
    39e4:	40 e8       	ldi	r20, 0x80	; 128
    39e6:	5f e3       	ldi	r21, 0x3F	; 63
    39e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39ec:	88 23       	and	r24, r24
    39ee:	2c f4       	brge	.+10     	; 0x39fa <LCD_voidInit+0x460>
		__ticks = 1;
    39f0:	81 e0       	ldi	r24, 0x01	; 1
    39f2:	90 e0       	ldi	r25, 0x00	; 0
    39f4:	9e 83       	std	Y+6, r25	; 0x06
    39f6:	8d 83       	std	Y+5, r24	; 0x05
    39f8:	3f c0       	rjmp	.+126    	; 0x3a78 <LCD_voidInit+0x4de>
	else if (__tmp > 65535)
    39fa:	6f 81       	ldd	r22, Y+7	; 0x07
    39fc:	78 85       	ldd	r23, Y+8	; 0x08
    39fe:	89 85       	ldd	r24, Y+9	; 0x09
    3a00:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a02:	20 e0       	ldi	r18, 0x00	; 0
    3a04:	3f ef       	ldi	r19, 0xFF	; 255
    3a06:	4f e7       	ldi	r20, 0x7F	; 127
    3a08:	57 e4       	ldi	r21, 0x47	; 71
    3a0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a0e:	18 16       	cp	r1, r24
    3a10:	4c f5       	brge	.+82     	; 0x3a64 <LCD_voidInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a12:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a14:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a16:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a18:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a1a:	20 e0       	ldi	r18, 0x00	; 0
    3a1c:	30 e0       	ldi	r19, 0x00	; 0
    3a1e:	40 e2       	ldi	r20, 0x20	; 32
    3a20:	51 e4       	ldi	r21, 0x41	; 65
    3a22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a26:	dc 01       	movw	r26, r24
    3a28:	cb 01       	movw	r24, r22
    3a2a:	bc 01       	movw	r22, r24
    3a2c:	cd 01       	movw	r24, r26
    3a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a32:	dc 01       	movw	r26, r24
    3a34:	cb 01       	movw	r24, r22
    3a36:	9e 83       	std	Y+6, r25	; 0x06
    3a38:	8d 83       	std	Y+5, r24	; 0x05
    3a3a:	0f c0       	rjmp	.+30     	; 0x3a5a <LCD_voidInit+0x4c0>
    3a3c:	88 ec       	ldi	r24, 0xC8	; 200
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	9c 83       	std	Y+4, r25	; 0x04
    3a42:	8b 83       	std	Y+3, r24	; 0x03
    3a44:	8b 81       	ldd	r24, Y+3	; 0x03
    3a46:	9c 81       	ldd	r25, Y+4	; 0x04
    3a48:	01 97       	sbiw	r24, 0x01	; 1
    3a4a:	f1 f7       	brne	.-4      	; 0x3a48 <LCD_voidInit+0x4ae>
    3a4c:	9c 83       	std	Y+4, r25	; 0x04
    3a4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a50:	8d 81       	ldd	r24, Y+5	; 0x05
    3a52:	9e 81       	ldd	r25, Y+6	; 0x06
    3a54:	01 97       	sbiw	r24, 0x01	; 1
    3a56:	9e 83       	std	Y+6, r25	; 0x06
    3a58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a5e:	00 97       	sbiw	r24, 0x00	; 0
    3a60:	69 f7       	brne	.-38     	; 0x3a3c <LCD_voidInit+0x4a2>
    3a62:	14 c0       	rjmp	.+40     	; 0x3a8c <LCD_voidInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a64:	6f 81       	ldd	r22, Y+7	; 0x07
    3a66:	78 85       	ldd	r23, Y+8	; 0x08
    3a68:	89 85       	ldd	r24, Y+9	; 0x09
    3a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a70:	dc 01       	movw	r26, r24
    3a72:	cb 01       	movw	r24, r22
    3a74:	9e 83       	std	Y+6, r25	; 0x06
    3a76:	8d 83       	std	Y+5, r24	; 0x05
    3a78:	8d 81       	ldd	r24, Y+5	; 0x05
    3a7a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a7c:	9a 83       	std	Y+2, r25	; 0x02
    3a7e:	89 83       	std	Y+1, r24	; 0x01
    3a80:	89 81       	ldd	r24, Y+1	; 0x01
    3a82:	9a 81       	ldd	r25, Y+2	; 0x02
    3a84:	01 97       	sbiw	r24, 0x01	; 1
    3a86:	f1 f7       	brne	.-4      	; 0x3a84 <LCD_voidInit+0x4ea>
    3a88:	9a 83       	std	Y+2, r25	; 0x02
    3a8a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);     //TIMER0_voidSetBusyWait_ms(1);


}
    3a8c:	ca 5b       	subi	r28, 0xBA	; 186
    3a8e:	df 4f       	sbci	r29, 0xFF	; 255
    3a90:	0f b6       	in	r0, 0x3f	; 63
    3a92:	f8 94       	cli
    3a94:	de bf       	out	0x3e, r29	; 62
    3a96:	0f be       	out	0x3f, r0	; 63
    3a98:	cd bf       	out	0x3d, r28	; 61
    3a9a:	cf 91       	pop	r28
    3a9c:	df 91       	pop	r29
    3a9e:	1f 91       	pop	r17
    3aa0:	0f 91       	pop	r16
    3aa2:	08 95       	ret

00003aa4 <LCD_voidWriteCommand>:
/* Description : Send a Command to the LCD                                               */
/* Fun. Argument1: Copy_u8Command                                                        */
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidWriteCommand ( u8 Copy_u8Command )
{
    3aa4:	df 93       	push	r29
    3aa6:	cf 93       	push	r28
    3aa8:	0f 92       	push	r0
    3aaa:	cd b7       	in	r28, 0x3d	; 61
    3aac:	de b7       	in	r29, 0x3e	; 62
    3aae:	89 83       	std	Y+1, r24	; 0x01
    /* RS=0 because we send a Command not Data */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RS_PIN,LOW);
    3ab0:	83 e0       	ldi	r24, 0x03	; 3
    3ab2:	62 e0       	ldi	r22, 0x02	; 2
    3ab4:	40 e0       	ldi	r20, 0x00	; 0
    3ab6:	0e 94 68 14 	call	0x28d0	; 0x28d0 <DIO_voidSetPinValue>

    /* RW=0 because we Write a Command not Read */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RW_PIN,LOW);
    3aba:	83 e0       	ldi	r24, 0x03	; 3
    3abc:	63 e0       	ldi	r22, 0x03	; 3
    3abe:	40 e0       	ldi	r20, 0x00	; 0
    3ac0:	0e 94 68 14 	call	0x28d0	; 0x28d0 <DIO_voidSetPinValue>

    /* Send Data bits from MC PINS to LCD Data PINS */
    DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Command);
    3ac4:	81 e0       	ldi	r24, 0x01	; 1
    3ac6:	69 81       	ldd	r22, Y+1	; 0x01
    3ac8:	0e 94 78 15 	call	0x2af0	; 0x2af0 <DIO_voidSetPortValue>

    /* Falling Edge on E PIN to make LCD Read This Command */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,HIGH);
    3acc:	83 e0       	ldi	r24, 0x03	; 3
    3ace:	64 e0       	ldi	r22, 0x04	; 4
    3ad0:	41 e0       	ldi	r20, 0x01	; 1
    3ad2:	0e 94 68 14 	call	0x28d0	; 0x28d0 <DIO_voidSetPinValue>
    //_delay_ms(1);
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,LOW);
    3ad6:	83 e0       	ldi	r24, 0x03	; 3
    3ad8:	64 e0       	ldi	r22, 0x04	; 4
    3ada:	40 e0       	ldi	r20, 0x00	; 0
    3adc:	0e 94 68 14 	call	0x28d0	; 0x28d0 <DIO_voidSetPinValue>
}
    3ae0:	0f 90       	pop	r0
    3ae2:	cf 91       	pop	r28
    3ae4:	df 91       	pop	r29
    3ae6:	08 95       	ret

00003ae8 <LCD_voidWriteChar>:
/* Description : Send a Data to the LCD   ( Character Data )                             */
/* Fun. Argument1: Copy_u8Char                                                           */
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidWriteChar ( u8 Copy_u8Char )
{
    3ae8:	df 93       	push	r29
    3aea:	cf 93       	push	r28
    3aec:	0f 92       	push	r0
    3aee:	cd b7       	in	r28, 0x3d	; 61
    3af0:	de b7       	in	r29, 0x3e	; 62
    3af2:	89 83       	std	Y+1, r24	; 0x01
    /* RS=1 because we send a Data not Command */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RS_PIN,HIGH);
    3af4:	83 e0       	ldi	r24, 0x03	; 3
    3af6:	62 e0       	ldi	r22, 0x02	; 2
    3af8:	41 e0       	ldi	r20, 0x01	; 1
    3afa:	0e 94 68 14 	call	0x28d0	; 0x28d0 <DIO_voidSetPinValue>

    /* RW=0 because we Write a Data not Read */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RW_PIN,LOW);
    3afe:	83 e0       	ldi	r24, 0x03	; 3
    3b00:	63 e0       	ldi	r22, 0x03	; 3
    3b02:	40 e0       	ldi	r20, 0x00	; 0
    3b04:	0e 94 68 14 	call	0x28d0	; 0x28d0 <DIO_voidSetPinValue>

    /* Send Data bits from MC PINS to LCD Data PINS */
    DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Char);
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	69 81       	ldd	r22, Y+1	; 0x01
    3b0c:	0e 94 78 15 	call	0x2af0	; 0x2af0 <DIO_voidSetPortValue>

    /* Falling Edge on E PIN to make LCD Read This Command */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,HIGH);
    3b10:	83 e0       	ldi	r24, 0x03	; 3
    3b12:	64 e0       	ldi	r22, 0x04	; 4
    3b14:	41 e0       	ldi	r20, 0x01	; 1
    3b16:	0e 94 68 14 	call	0x28d0	; 0x28d0 <DIO_voidSetPinValue>
    //_delay_ms(1);
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,LOW);
    3b1a:	83 e0       	ldi	r24, 0x03	; 3
    3b1c:	64 e0       	ldi	r22, 0x04	; 4
    3b1e:	40 e0       	ldi	r20, 0x00	; 0
    3b20:	0e 94 68 14 	call	0x28d0	; 0x28d0 <DIO_voidSetPinValue>
}
    3b24:	0f 90       	pop	r0
    3b26:	cf 91       	pop	r28
    3b28:	df 91       	pop	r29
    3b2a:	08 95       	ret

00003b2c <LCD_voidWriteString>:
/* Description : Send a Data of String to the LCD                                        */
/* Fun. Argument1: *Copy_u8Arr      ( String Data | array of character )                 */
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidWriteString (u8 *Copy_u8Arr )
{
    3b2c:	df 93       	push	r29
    3b2e:	cf 93       	push	r28
    3b30:	00 d0       	rcall	.+0      	; 0x3b32 <LCD_voidWriteString+0x6>
    3b32:	0f 92       	push	r0
    3b34:	cd b7       	in	r28, 0x3d	; 61
    3b36:	de b7       	in	r29, 0x3e	; 62
    3b38:	9b 83       	std	Y+3, r25	; 0x03
    3b3a:	8a 83       	std	Y+2, r24	; 0x02
    u8 i = 0 ;
    3b3c:	19 82       	std	Y+1, r1	; 0x01
    3b3e:	0e c0       	rjmp	.+28     	; 0x3b5c <LCD_voidWriteString+0x30>
    while (Copy_u8Arr[i] != '\0' )
    {
        LCD_voidWriteChar ( Copy_u8Arr[i] );
    3b40:	89 81       	ldd	r24, Y+1	; 0x01
    3b42:	28 2f       	mov	r18, r24
    3b44:	30 e0       	ldi	r19, 0x00	; 0
    3b46:	8a 81       	ldd	r24, Y+2	; 0x02
    3b48:	9b 81       	ldd	r25, Y+3	; 0x03
    3b4a:	fc 01       	movw	r30, r24
    3b4c:	e2 0f       	add	r30, r18
    3b4e:	f3 1f       	adc	r31, r19
    3b50:	80 81       	ld	r24, Z
    3b52:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <LCD_voidWriteChar>
        i++;
    3b56:	89 81       	ldd	r24, Y+1	; 0x01
    3b58:	8f 5f       	subi	r24, 0xFF	; 255
    3b5a:	89 83       	std	Y+1, r24	; 0x01
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidWriteString (u8 *Copy_u8Arr )
{
    u8 i = 0 ;
    while (Copy_u8Arr[i] != '\0' )
    3b5c:	89 81       	ldd	r24, Y+1	; 0x01
    3b5e:	28 2f       	mov	r18, r24
    3b60:	30 e0       	ldi	r19, 0x00	; 0
    3b62:	8a 81       	ldd	r24, Y+2	; 0x02
    3b64:	9b 81       	ldd	r25, Y+3	; 0x03
    3b66:	fc 01       	movw	r30, r24
    3b68:	e2 0f       	add	r30, r18
    3b6a:	f3 1f       	adc	r31, r19
    3b6c:	80 81       	ld	r24, Z
    3b6e:	88 23       	and	r24, r24
    3b70:	39 f7       	brne	.-50     	; 0x3b40 <LCD_voidWriteString+0x14>
    {
        LCD_voidWriteChar ( Copy_u8Arr[i] );
        i++;
    }
}
    3b72:	0f 90       	pop	r0
    3b74:	0f 90       	pop	r0
    3b76:	0f 90       	pop	r0
    3b78:	cf 91       	pop	r28
    3b7a:	df 91       	pop	r29
    3b7c:	08 95       	ret

00003b7e <LCD_voidWrite_u32Number>:
/* Description : Send a Long Number  to the LCD                                          */
/* Fun. Argument1: Copy_u32Number     ( unsigned integer number )                        */
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidWrite_u32Number ( u32 Copy_u32Number)
{
    3b7e:	0f 93       	push	r16
    3b80:	1f 93       	push	r17
    3b82:	df 93       	push	r29
    3b84:	cf 93       	push	r28
    3b86:	cd b7       	in	r28, 0x3d	; 61
    3b88:	de b7       	in	r29, 0x3e	; 62
    3b8a:	6b 97       	sbiw	r28, 0x1b	; 27
    3b8c:	0f b6       	in	r0, 0x3f	; 63
    3b8e:	f8 94       	cli
    3b90:	de bf       	out	0x3e, r29	; 62
    3b92:	0f be       	out	0x3f, r0	; 63
    3b94:	cd bf       	out	0x3d, r28	; 61
    3b96:	68 8f       	std	Y+24, r22	; 0x18
    3b98:	79 8f       	std	Y+25, r23	; 0x19
    3b9a:	8a 8f       	std	Y+26, r24	; 0x1a
    3b9c:	9b 8f       	std	Y+27, r25	; 0x1b
    u8 Arr[20] ;
    u8 i=0 ;
    3b9e:	1b 82       	std	Y+3, r1	; 0x03
    3ba0:	2d c0       	rjmp	.+90     	; 0x3bfc <LCD_voidWrite_u32Number+0x7e>
    while ( Copy_u32Number > 0 )
    {
        Arr[i] = Copy_u32Number % 10 ;
    3ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba4:	08 2f       	mov	r16, r24
    3ba6:	10 e0       	ldi	r17, 0x00	; 0
    3ba8:	88 8d       	ldd	r24, Y+24	; 0x18
    3baa:	99 8d       	ldd	r25, Y+25	; 0x19
    3bac:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3bae:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3bb0:	2a e0       	ldi	r18, 0x0A	; 10
    3bb2:	30 e0       	ldi	r19, 0x00	; 0
    3bb4:	40 e0       	ldi	r20, 0x00	; 0
    3bb6:	50 e0       	ldi	r21, 0x00	; 0
    3bb8:	bc 01       	movw	r22, r24
    3bba:	cd 01       	movw	r24, r26
    3bbc:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__udivmodsi4>
    3bc0:	dc 01       	movw	r26, r24
    3bc2:	cb 01       	movw	r24, r22
    3bc4:	28 2f       	mov	r18, r24
    3bc6:	ce 01       	movw	r24, r28
    3bc8:	04 96       	adiw	r24, 0x04	; 4
    3bca:	fc 01       	movw	r30, r24
    3bcc:	e0 0f       	add	r30, r16
    3bce:	f1 1f       	adc	r31, r17
    3bd0:	20 83       	st	Z, r18
        Copy_u32Number /= 10 ;
    3bd2:	88 8d       	ldd	r24, Y+24	; 0x18
    3bd4:	99 8d       	ldd	r25, Y+25	; 0x19
    3bd6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3bd8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3bda:	2a e0       	ldi	r18, 0x0A	; 10
    3bdc:	30 e0       	ldi	r19, 0x00	; 0
    3bde:	40 e0       	ldi	r20, 0x00	; 0
    3be0:	50 e0       	ldi	r21, 0x00	; 0
    3be2:	bc 01       	movw	r22, r24
    3be4:	cd 01       	movw	r24, r26
    3be6:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__udivmodsi4>
    3bea:	da 01       	movw	r26, r20
    3bec:	c9 01       	movw	r24, r18
    3bee:	88 8f       	std	Y+24, r24	; 0x18
    3bf0:	99 8f       	std	Y+25, r25	; 0x19
    3bf2:	aa 8f       	std	Y+26, r26	; 0x1a
    3bf4:	bb 8f       	std	Y+27, r27	; 0x1b
        i++;
    3bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf8:	8f 5f       	subi	r24, 0xFF	; 255
    3bfa:	8b 83       	std	Y+3, r24	; 0x03
/*****************************************************************************************/
void LCD_voidWrite_u32Number ( u32 Copy_u32Number)
{
    u8 Arr[20] ;
    u8 i=0 ;
    while ( Copy_u32Number > 0 )
    3bfc:	88 8d       	ldd	r24, Y+24	; 0x18
    3bfe:	99 8d       	ldd	r25, Y+25	; 0x19
    3c00:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3c02:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3c04:	00 97       	sbiw	r24, 0x00	; 0
    3c06:	a1 05       	cpc	r26, r1
    3c08:	b1 05       	cpc	r27, r1
    3c0a:	59 f6       	brne	.-106    	; 0x3ba2 <LCD_voidWrite_u32Number+0x24>
    {
        Arr[i] = Copy_u32Number % 10 ;
        Copy_u32Number /= 10 ;
        i++;
    }
    i--;
    3c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c0e:	81 50       	subi	r24, 0x01	; 1
    3c10:	8b 83       	std	Y+3, r24	; 0x03
    for( s16 j=i ; j>=0 ; j--)
    3c12:	8b 81       	ldd	r24, Y+3	; 0x03
    3c14:	88 2f       	mov	r24, r24
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	9a 83       	std	Y+2, r25	; 0x02
    3c1a:	89 83       	std	Y+1, r24	; 0x01
    3c1c:	10 c0       	rjmp	.+32     	; 0x3c3e <LCD_voidWrite_u32Number+0xc0>
    {
        LCD_voidWriteChar ( Arr[j] + '0' );
    3c1e:	29 81       	ldd	r18, Y+1	; 0x01
    3c20:	3a 81       	ldd	r19, Y+2	; 0x02
    3c22:	ce 01       	movw	r24, r28
    3c24:	04 96       	adiw	r24, 0x04	; 4
    3c26:	fc 01       	movw	r30, r24
    3c28:	e2 0f       	add	r30, r18
    3c2a:	f3 1f       	adc	r31, r19
    3c2c:	80 81       	ld	r24, Z
    3c2e:	80 5d       	subi	r24, 0xD0	; 208
    3c30:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <LCD_voidWriteChar>
        Arr[i] = Copy_u32Number % 10 ;
        Copy_u32Number /= 10 ;
        i++;
    }
    i--;
    for( s16 j=i ; j>=0 ; j--)
    3c34:	89 81       	ldd	r24, Y+1	; 0x01
    3c36:	9a 81       	ldd	r25, Y+2	; 0x02
    3c38:	01 97       	sbiw	r24, 0x01	; 1
    3c3a:	9a 83       	std	Y+2, r25	; 0x02
    3c3c:	89 83       	std	Y+1, r24	; 0x01
    3c3e:	89 81       	ldd	r24, Y+1	; 0x01
    3c40:	9a 81       	ldd	r25, Y+2	; 0x02
    3c42:	99 23       	and	r25, r25
    3c44:	64 f7       	brge	.-40     	; 0x3c1e <LCD_voidWrite_u32Number+0xa0>
    {
        LCD_voidWriteChar ( Arr[j] + '0' );
    }
}
    3c46:	6b 96       	adiw	r28, 0x1b	; 27
    3c48:	0f b6       	in	r0, 0x3f	; 63
    3c4a:	f8 94       	cli
    3c4c:	de bf       	out	0x3e, r29	; 62
    3c4e:	0f be       	out	0x3f, r0	; 63
    3c50:	cd bf       	out	0x3d, r28	; 61
    3c52:	cf 91       	pop	r28
    3c54:	df 91       	pop	r29
    3c56:	1f 91       	pop	r17
    3c58:	0f 91       	pop	r16
    3c5a:	08 95       	ret

00003c5c <LCD_voidGoTo_XY>:
/* Fun. Argument1: Copy_u8Line    { LINE_1 , LINE_2 }                                         */
/* Fun. Argument2: Copy_u8Position    {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}                 */
/* Fun. Return : void                                                                         */
/**********************************************************************************************/
void LCD_voidGoTo_XY ( u8 Copy_u8Line , u8 Copy_u8Position )
{
    3c5c:	df 93       	push	r29
    3c5e:	cf 93       	push	r28
    3c60:	00 d0       	rcall	.+0      	; 0x3c62 <LCD_voidGoTo_XY+0x6>
    3c62:	00 d0       	rcall	.+0      	; 0x3c64 <LCD_voidGoTo_XY+0x8>
    3c64:	cd b7       	in	r28, 0x3d	; 61
    3c66:	de b7       	in	r29, 0x3e	; 62
    3c68:	89 83       	std	Y+1, r24	; 0x01
    3c6a:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8Line > LINE_2 || Copy_u8Position > 15 )
    3c6c:	89 81       	ldd	r24, Y+1	; 0x01
    3c6e:	82 30       	cpi	r24, 0x02	; 2
    3c70:	d8 f4       	brcc	.+54     	; 0x3ca8 <LCD_voidGoTo_XY+0x4c>
    3c72:	8a 81       	ldd	r24, Y+2	; 0x02
    3c74:	80 31       	cpi	r24, 0x10	; 16
    3c76:	c0 f4       	brcc	.+48     	; 0x3ca8 <LCD_voidGoTo_XY+0x4c>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Line)
    3c78:	89 81       	ldd	r24, Y+1	; 0x01
    3c7a:	28 2f       	mov	r18, r24
    3c7c:	30 e0       	ldi	r19, 0x00	; 0
    3c7e:	3c 83       	std	Y+4, r19	; 0x04
    3c80:	2b 83       	std	Y+3, r18	; 0x03
    3c82:	8b 81       	ldd	r24, Y+3	; 0x03
    3c84:	9c 81       	ldd	r25, Y+4	; 0x04
    3c86:	00 97       	sbiw	r24, 0x00	; 0
    3c88:	31 f0       	breq	.+12     	; 0x3c96 <LCD_voidGoTo_XY+0x3a>
    3c8a:	2b 81       	ldd	r18, Y+3	; 0x03
    3c8c:	3c 81       	ldd	r19, Y+4	; 0x04
    3c8e:	21 30       	cpi	r18, 0x01	; 1
    3c90:	31 05       	cpc	r19, r1
    3c92:	31 f0       	breq	.+12     	; 0x3ca0 <LCD_voidGoTo_XY+0x44>
    3c94:	09 c0       	rjmp	.+18     	; 0x3ca8 <LCD_voidGoTo_XY+0x4c>
        {
            case LINE_1 :    LCD_voidWriteCommand ( 0x80 + Copy_u8Position );      break;  //First position at Line_1 is 0x80 Address at DDRAM
    3c96:	8a 81       	ldd	r24, Y+2	; 0x02
    3c98:	80 58       	subi	r24, 0x80	; 128
    3c9a:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <LCD_voidWriteCommand>
    3c9e:	04 c0       	rjmp	.+8      	; 0x3ca8 <LCD_voidGoTo_XY+0x4c>
            case LINE_2 :    LCD_voidWriteCommand ( 0xC0 + Copy_u8Position );      break;  //First position at Line_2 is 0xC0 Address at DDRAM
    3ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca2:	80 54       	subi	r24, 0x40	; 64
    3ca4:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <LCD_voidWriteCommand>
            default     :                                                          break;
        }        
    }
}
    3ca8:	0f 90       	pop	r0
    3caa:	0f 90       	pop	r0
    3cac:	0f 90       	pop	r0
    3cae:	0f 90       	pop	r0
    3cb0:	cf 91       	pop	r28
    3cb2:	df 91       	pop	r29
    3cb4:	08 95       	ret

00003cb6 <LCD_voidDrawPattern>:
/* Fun.Argument1: Copy_u8Pattern_Number{PATTERN_0,PATTERN_1,PATTERN_2,PATTERN_3,PATTERN_4,PATTERN_5,PATTERN_6,PATTERN_7} */
/* Fun.Argument2: *Copy_u8Arr_Pattern { Address of array for Details of drawing }                                        */
/* Fun. Return : void                                                                                                    */
/*************************************************************************************************************************/
void LCD_voidDrawPattern ( u8 Copy_u8Pattern_Number , u8 *Copy_u8Arr_Pattern )
{
    3cb6:	df 93       	push	r29
    3cb8:	cf 93       	push	r28
    3cba:	00 d0       	rcall	.+0      	; 0x3cbc <LCD_voidDrawPattern+0x6>
    3cbc:	00 d0       	rcall	.+0      	; 0x3cbe <LCD_voidDrawPattern+0x8>
    3cbe:	cd b7       	in	r28, 0x3d	; 61
    3cc0:	de b7       	in	r29, 0x3e	; 62
    3cc2:	8a 83       	std	Y+2, r24	; 0x02
    3cc4:	7c 83       	std	Y+4, r23	; 0x04
    3cc6:	6b 83       	std	Y+3, r22	; 0x03
    LCD_voidWriteCommand ( Copy_u8Pattern_Number );   
    3cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cca:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <LCD_voidWriteCommand>

    for ( u8 i=0 ; i < 8 ; i++ )
    3cce:	19 82       	std	Y+1, r1	; 0x01
    3cd0:	0e c0       	rjmp	.+28     	; 0x3cee <LCD_voidDrawPattern+0x38>
    {
        LCD_voidWriteChar ( Copy_u8Arr_Pattern[i] );
    3cd2:	89 81       	ldd	r24, Y+1	; 0x01
    3cd4:	28 2f       	mov	r18, r24
    3cd6:	30 e0       	ldi	r19, 0x00	; 0
    3cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cda:	9c 81       	ldd	r25, Y+4	; 0x04
    3cdc:	fc 01       	movw	r30, r24
    3cde:	e2 0f       	add	r30, r18
    3ce0:	f3 1f       	adc	r31, r19
    3ce2:	80 81       	ld	r24, Z
    3ce4:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <LCD_voidWriteChar>
/*************************************************************************************************************************/
void LCD_voidDrawPattern ( u8 Copy_u8Pattern_Number , u8 *Copy_u8Arr_Pattern )
{
    LCD_voidWriteCommand ( Copy_u8Pattern_Number );   

    for ( u8 i=0 ; i < 8 ; i++ )
    3ce8:	89 81       	ldd	r24, Y+1	; 0x01
    3cea:	8f 5f       	subi	r24, 0xFF	; 255
    3cec:	89 83       	std	Y+1, r24	; 0x01
    3cee:	89 81       	ldd	r24, Y+1	; 0x01
    3cf0:	88 30       	cpi	r24, 0x08	; 8
    3cf2:	78 f3       	brcs	.-34     	; 0x3cd2 <LCD_voidDrawPattern+0x1c>
    {
        LCD_voidWriteChar ( Copy_u8Arr_Pattern[i] );
    }
}
    3cf4:	0f 90       	pop	r0
    3cf6:	0f 90       	pop	r0
    3cf8:	0f 90       	pop	r0
    3cfa:	0f 90       	pop	r0
    3cfc:	cf 91       	pop	r28
    3cfe:	df 91       	pop	r29
    3d00:	08 95       	ret

00003d02 <LCD_voidWritePattern>:
/* Fun. Argument2: Copy_u8Line { LINE_1 , LINE_2 }                                       */
/* Fun. Argument3: Copy_u8Position { 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 }             */
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidWritePattern ( u8 Copy_u8Pattern , u8 Copy_u8Line , u8 Copy_u8Position )
{
    3d02:	df 93       	push	r29
    3d04:	cf 93       	push	r28
    3d06:	00 d0       	rcall	.+0      	; 0x3d08 <LCD_voidWritePattern+0x6>
    3d08:	0f 92       	push	r0
    3d0a:	cd b7       	in	r28, 0x3d	; 61
    3d0c:	de b7       	in	r29, 0x3e	; 62
    3d0e:	89 83       	std	Y+1, r24	; 0x01
    3d10:	6a 83       	std	Y+2, r22	; 0x02
    3d12:	4b 83       	std	Y+3, r20	; 0x03
    LCD_voidGoTo_XY ( Copy_u8Line , Copy_u8Position );
    3d14:	8a 81       	ldd	r24, Y+2	; 0x02
    3d16:	6b 81       	ldd	r22, Y+3	; 0x03
    3d18:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
    LCD_voidWriteChar ( Copy_u8Pattern );
    3d1c:	89 81       	ldd	r24, Y+1	; 0x01
    3d1e:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <LCD_voidWriteChar>
}
    3d22:	0f 90       	pop	r0
    3d24:	0f 90       	pop	r0
    3d26:	0f 90       	pop	r0
    3d28:	cf 91       	pop	r28
    3d2a:	df 91       	pop	r29
    3d2c:	08 95       	ret

00003d2e <LCD_voidClearDisplay>:
/* Function Name : [9] LCD_voidClearDisplay                                              */
/* Description : Clear all Display of LCD                                                */
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidClearDisplay (void)
{
    3d2e:	df 93       	push	r29
    3d30:	cf 93       	push	r28
    3d32:	cd b7       	in	r28, 0x3d	; 61
    3d34:	de b7       	in	r29, 0x3e	; 62
    LCD_voidWriteCommand ( DIS_CLEAR );
    3d36:	81 e0       	ldi	r24, 0x01	; 1
    3d38:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <LCD_voidWriteCommand>
}
    3d3c:	cf 91       	pop	r28
    3d3e:	df 91       	pop	r29
    3d40:	08 95       	ret

00003d42 <LCD_voidShiftLeft>:
/* Function Name : [10] LCD_voidShiftLeft                                                */
/* Description : Shift Left all Display of LCD                                           */
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidShiftLeft (void)
{
    3d42:	df 93       	push	r29
    3d44:	cf 93       	push	r28
    3d46:	cd b7       	in	r28, 0x3d	; 61
    3d48:	de b7       	in	r29, 0x3e	; 62
    LCD_voidWriteCommand ( ENTRY_MODE_INCREASE_LEFT_SHIFT );
    3d4a:	87 e0       	ldi	r24, 0x07	; 7
    3d4c:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <LCD_voidWriteCommand>
}
    3d50:	cf 91       	pop	r28
    3d52:	df 91       	pop	r29
    3d54:	08 95       	ret

00003d56 <LCD_voidShiftRight>:
/* Function Name : [11] LCD_voidShiftRight                                               */
/* Description : Shift Right all Display of LCD                                          */
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidShiftRight (void)
{
    3d56:	df 93       	push	r29
    3d58:	cf 93       	push	r28
    3d5a:	cd b7       	in	r28, 0x3d	; 61
    3d5c:	de b7       	in	r29, 0x3e	; 62
    LCD_voidWriteCommand ( ENTRY_MODE_DECREASE_RIGHT_SHIFT );
    3d5e:	85 e0       	ldi	r24, 0x05	; 5
    3d60:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <LCD_voidWriteCommand>
}
    3d64:	cf 91       	pop	r28
    3d66:	df 91       	pop	r29
    3d68:	08 95       	ret

00003d6a <LCD_voidClearGrid>:
/* Fun. Argument1: Copy_u8Line { LINE_1 , LINE_2 }                                       */
/* Fun. Argument2: Copy_u8Position { 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 }             */
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidClearGrid ( u8 Copy_u8Line , u8 Copy_u8Position )
{
    3d6a:	df 93       	push	r29
    3d6c:	cf 93       	push	r28
    3d6e:	00 d0       	rcall	.+0      	; 0x3d70 <LCD_voidClearGrid+0x6>
    3d70:	cd b7       	in	r28, 0x3d	; 61
    3d72:	de b7       	in	r29, 0x3e	; 62
    3d74:	89 83       	std	Y+1, r24	; 0x01
    3d76:	6a 83       	std	Y+2, r22	; 0x02
    LCD_voidGoTo_XY (Copy_u8Line ,Copy_u8Position);
    3d78:	89 81       	ldd	r24, Y+1	; 0x01
    3d7a:	6a 81       	ldd	r22, Y+2	; 0x02
    3d7c:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
    LCD_voidWriteChar ( ' ' );
    3d80:	80 e2       	ldi	r24, 0x20	; 32
    3d82:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <LCD_voidWriteChar>
}
    3d86:	0f 90       	pop	r0
    3d88:	0f 90       	pop	r0
    3d8a:	cf 91       	pop	r28
    3d8c:	df 91       	pop	r29
    3d8e:	08 95       	ret

00003d90 <LCD_voidClearLine>:
/* Description : Clear Specific LINE on LCD                                              */
/* Fun. Argument1: Copy_u8Line { LINE_1 , LINE_2 }                                       */
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidClearLine ( u8 Copy_u8Line )
{
    3d90:	df 93       	push	r29
    3d92:	cf 93       	push	r28
    3d94:	00 d0       	rcall	.+0      	; 0x3d96 <LCD_voidClearLine+0x6>
    3d96:	cd b7       	in	r28, 0x3d	; 61
    3d98:	de b7       	in	r29, 0x3e	; 62
    3d9a:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i=0 ; i<16 ; i++)
    3d9c:	19 82       	std	Y+1, r1	; 0x01
    3d9e:	0a c0       	rjmp	.+20     	; 0x3db4 <LCD_voidClearLine+0x24>
	{
		LCD_voidGoTo_XY (Copy_u8Line ,i);
    3da0:	8a 81       	ldd	r24, Y+2	; 0x02
    3da2:	69 81       	ldd	r22, Y+1	; 0x01
    3da4:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
		LCD_voidWriteChar ( ' ' );
    3da8:	80 e2       	ldi	r24, 0x20	; 32
    3daa:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <LCD_voidWriteChar>
/* Fun. Argument1: Copy_u8Line { LINE_1 , LINE_2 }                                       */
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidClearLine ( u8 Copy_u8Line )
{
	for(u8 i=0 ; i<16 ; i++)
    3dae:	89 81       	ldd	r24, Y+1	; 0x01
    3db0:	8f 5f       	subi	r24, 0xFF	; 255
    3db2:	89 83       	std	Y+1, r24	; 0x01
    3db4:	89 81       	ldd	r24, Y+1	; 0x01
    3db6:	80 31       	cpi	r24, 0x10	; 16
    3db8:	98 f3       	brcs	.-26     	; 0x3da0 <LCD_voidClearLine+0x10>
	{
		LCD_voidGoTo_XY (Copy_u8Line ,i);
		LCD_voidWriteChar ( ' ' );
	}
    3dba:	0f 90       	pop	r0
    3dbc:	0f 90       	pop	r0
    3dbe:	cf 91       	pop	r28
    3dc0:	df 91       	pop	r29
    3dc2:	08 95       	ret

00003dc4 <KPAD_voidInit>:
/* Function Name : KPAD_voidInit          */
/* Description : Initializing the KPAD    */
/* Fun. Return : void                     */
/******************************************/
void KPAD_voidInit (void)
{
    3dc4:	df 93       	push	r29
    3dc6:	cf 93       	push	r28
    3dc8:	cd b7       	in	r28, 0x3d	; 61
    3dca:	de b7       	in	r29, 0x3e	; 62
    /* Configer The Direction of Coloums Pins as Output */
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_C0_PIN,OUTPUT);
    3dcc:	80 e0       	ldi	r24, 0x00	; 0
    3dce:	64 e0       	ldi	r22, 0x04	; 4
    3dd0:	41 e0       	ldi	r20, 0x01	; 1
    3dd2:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_C1_PIN,OUTPUT);
    3dd6:	80 e0       	ldi	r24, 0x00	; 0
    3dd8:	65 e0       	ldi	r22, 0x05	; 5
    3dda:	41 e0       	ldi	r20, 0x01	; 1
    3ddc:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_C2_PIN,OUTPUT);
    3de0:	80 e0       	ldi	r24, 0x00	; 0
    3de2:	66 e0       	ldi	r22, 0x06	; 6
    3de4:	41 e0       	ldi	r20, 0x01	; 1
    3de6:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_C3_PIN,OUTPUT);
    3dea:	80 e0       	ldi	r24, 0x00	; 0
    3dec:	67 e0       	ldi	r22, 0x07	; 7
    3dee:	41 e0       	ldi	r20, 0x01	; 1
    3df0:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_voidSetPinDirection>

    /* Configer The Direction of Rows Pins as Input */
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_R0_PIN,INPUT);
    3df4:	80 e0       	ldi	r24, 0x00	; 0
    3df6:	60 e0       	ldi	r22, 0x00	; 0
    3df8:	40 e0       	ldi	r20, 0x00	; 0
    3dfa:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_R1_PIN,INPUT);
    3dfe:	80 e0       	ldi	r24, 0x00	; 0
    3e00:	61 e0       	ldi	r22, 0x01	; 1
    3e02:	40 e0       	ldi	r20, 0x00	; 0
    3e04:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_R2_PIN,INPUT);
    3e08:	80 e0       	ldi	r24, 0x00	; 0
    3e0a:	62 e0       	ldi	r22, 0x02	; 2
    3e0c:	40 e0       	ldi	r20, 0x00	; 0
    3e0e:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_R3_PIN,INPUT);
    3e12:	80 e0       	ldi	r24, 0x00	; 0
    3e14:	63 e0       	ldi	r22, 0x03	; 3
    3e16:	40 e0       	ldi	r20, 0x00	; 0
    3e18:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_voidSetPinDirection>

    /* Activate Pull-Up Res in Pins of Rows */
    DIO_voidConfig_Pull_Up_Pin (KPAD_PORT,KPAD_R0_PIN,ON);
    3e1c:	80 e0       	ldi	r24, 0x00	; 0
    3e1e:	60 e0       	ldi	r22, 0x00	; 0
    3e20:	41 e0       	ldi	r20, 0x01	; 1
    3e22:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <DIO_voidConfig_Pull_Up_Pin>
    DIO_voidConfig_Pull_Up_Pin (KPAD_PORT,KPAD_R1_PIN,ON);
    3e26:	80 e0       	ldi	r24, 0x00	; 0
    3e28:	61 e0       	ldi	r22, 0x01	; 1
    3e2a:	41 e0       	ldi	r20, 0x01	; 1
    3e2c:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <DIO_voidConfig_Pull_Up_Pin>
    DIO_voidConfig_Pull_Up_Pin (KPAD_PORT,KPAD_R2_PIN,ON);
    3e30:	80 e0       	ldi	r24, 0x00	; 0
    3e32:	62 e0       	ldi	r22, 0x02	; 2
    3e34:	41 e0       	ldi	r20, 0x01	; 1
    3e36:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <DIO_voidConfig_Pull_Up_Pin>
    DIO_voidConfig_Pull_Up_Pin (KPAD_PORT,KPAD_R3_PIN,ON);
    3e3a:	80 e0       	ldi	r24, 0x00	; 0
    3e3c:	63 e0       	ldi	r22, 0x03	; 3
    3e3e:	41 e0       	ldi	r20, 0x01	; 1
    3e40:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <DIO_voidConfig_Pull_Up_Pin>

    /* Deactivate Coloum Pins  */      
    DIO_voidSetPinValue (KPAD_PORT,KPAD_C0_PIN,HIGH);
    3e44:	80 e0       	ldi	r24, 0x00	; 0
    3e46:	64 e0       	ldi	r22, 0x04	; 4
    3e48:	41 e0       	ldi	r20, 0x01	; 1
    3e4a:	0e 94 68 14 	call	0x28d0	; 0x28d0 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT,KPAD_C1_PIN,HIGH);
    3e4e:	80 e0       	ldi	r24, 0x00	; 0
    3e50:	65 e0       	ldi	r22, 0x05	; 5
    3e52:	41 e0       	ldi	r20, 0x01	; 1
    3e54:	0e 94 68 14 	call	0x28d0	; 0x28d0 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT,KPAD_C2_PIN,HIGH);
    3e58:	80 e0       	ldi	r24, 0x00	; 0
    3e5a:	66 e0       	ldi	r22, 0x06	; 6
    3e5c:	41 e0       	ldi	r20, 0x01	; 1
    3e5e:	0e 94 68 14 	call	0x28d0	; 0x28d0 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT,KPAD_C3_PIN,HIGH); 
    3e62:	80 e0       	ldi	r24, 0x00	; 0
    3e64:	67 e0       	ldi	r22, 0x07	; 7
    3e66:	41 e0       	ldi	r20, 0x01	; 1
    3e68:	0e 94 68 14 	call	0x28d0	; 0x28d0 <DIO_voidSetPinValue>
}
    3e6c:	cf 91       	pop	r28
    3e6e:	df 91       	pop	r29
    3e70:	08 95       	ret

00003e72 <KPAD_u8GetPressedKey>:
/* Function Name : KPAD_u8GetPressedKey                                                  */
/* Description : Write a Pattern on the LCD at specific Line & Position                  */
/* Fun. Return : unsigned character ( The Oressed Key / Key = 0xff if not key pressed )  */                                                                 
/*****************************************************************************************/
u8   KPAD_u8GetPressedKey (void)
{
    3e72:	df 93       	push	r29
    3e74:	cf 93       	push	r28
    3e76:	00 d0       	rcall	.+0      	; 0x3e78 <KPAD_u8GetPressedKey+0x6>
    3e78:	00 d0       	rcall	.+0      	; 0x3e7a <KPAD_u8GetPressedKey+0x8>
    3e7a:	0f 92       	push	r0
    3e7c:	cd b7       	in	r28, 0x3d	; 61
    3e7e:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8ColumnsIter ;
    u8 Local_u8RowsIter ;
    u8 Local_u8PinValue ;
    u8 Local_u8PressedKey = 0xff ; // return will be 0xff if not pressed any key 
    3e80:	8f ef       	ldi	r24, 0xFF	; 255
    3e82:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8Flag = 0 ;
    3e84:	19 82       	std	Y+1, r1	; 0x01
    for ( Local_u8ColumnsIter = 0 ; Local_u8ColumnsIter < KPAD_COLUMNS_NUM ; Local_u8ColumnsIter ++ )
    3e86:	1d 82       	std	Y+5, r1	; 0x05
    3e88:	6d c0       	rjmp	.+218    	; 0x3f64 <KPAD_u8GetPressedKey+0xf2>
    {
        /* Active the current Column */
        DIO_voidSetPinValue ( KPAD_PORT , KPAD_Au8ColumnsArr[Local_u8ColumnsIter] , LOW );
    3e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e8c:	88 2f       	mov	r24, r24
    3e8e:	90 e0       	ldi	r25, 0x00	; 0
    3e90:	fc 01       	movw	r30, r24
    3e92:	e7 57       	subi	r30, 0x77	; 119
    3e94:	fd 4f       	sbci	r31, 0xFD	; 253
    3e96:	90 81       	ld	r25, Z
    3e98:	80 e0       	ldi	r24, 0x00	; 0
    3e9a:	69 2f       	mov	r22, r25
    3e9c:	40 e0       	ldi	r20, 0x00	; 0
    3e9e:	0e 94 68 14 	call	0x28d0	; 0x28d0 <DIO_voidSetPinValue>

        for ( Local_u8RowsIter = 0 ; Local_u8RowsIter < KPAD_ROWS_NUM ; Local_u8RowsIter ++ )
    3ea2:	1c 82       	std	Y+4, r1	; 0x04
    3ea4:	49 c0       	rjmp	.+146    	; 0x3f38 <KPAD_u8GetPressedKey+0xc6>
        {
            /* Delay for Debounsing */
            //_delay_ms(50);
            /* Read Row Pin */
            Local_u8PinValue = DIO_u8GetPinValue ( KPAD_PORT , KPAD_Au8RowsArr[Local_u8RowsIter] );
    3ea6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ea8:	88 2f       	mov	r24, r24
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	fc 01       	movw	r30, r24
    3eae:	e3 57       	subi	r30, 0x73	; 115
    3eb0:	fd 4f       	sbci	r31, 0xFD	; 253
    3eb2:	90 81       	ld	r25, Z
    3eb4:	80 e0       	ldi	r24, 0x00	; 0
    3eb6:	69 2f       	mov	r22, r25
    3eb8:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <DIO_u8GetPinValue>
    3ebc:	8b 83       	std	Y+3, r24	; 0x03

            /* Key Pressed */
            if ( Local_u8PinValue == 0 )
    3ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    3ec0:	88 23       	and	r24, r24
    3ec2:	b9 f5       	brne	.+110    	; 0x3f32 <KPAD_u8GetPressedKey+0xc0>
    3ec4:	20 c0       	rjmp	.+64     	; 0x3f06 <KPAD_u8GetPressedKey+0x94>
            {
                /* More Checking again for Debounsing */
                while ( Local_u8PinValue == 0 )
                {
                    /* Get pressed Key Value when i make sure that the low state is stable  */
                    Local_u8PressedKey = KPAD_Au8KeysArr[Local_u8RowsIter][Local_u8ColumnsIter] ;
    3ec6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ec8:	48 2f       	mov	r20, r24
    3eca:	50 e0       	ldi	r21, 0x00	; 0
    3ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ece:	28 2f       	mov	r18, r24
    3ed0:	30 e0       	ldi	r19, 0x00	; 0
    3ed2:	ca 01       	movw	r24, r20
    3ed4:	88 0f       	add	r24, r24
    3ed6:	99 1f       	adc	r25, r25
    3ed8:	88 0f       	add	r24, r24
    3eda:	99 1f       	adc	r25, r25
    3edc:	82 0f       	add	r24, r18
    3ede:	93 1f       	adc	r25, r19
    3ee0:	fc 01       	movw	r30, r24
    3ee2:	ef 56       	subi	r30, 0x6F	; 111
    3ee4:	fd 4f       	sbci	r31, 0xFD	; 253
    3ee6:	80 81       	ld	r24, Z
    3ee8:	8a 83       	std	Y+2, r24	; 0x02
                    /* Read Row Pin again for sure for Debounsing and exit while loop when change at pressed button 
                    whithout it the program will not extern about while loop */
                    Local_u8PinValue = DIO_u8GetPinValue ( KPAD_PORT , KPAD_Au8RowsArr[Local_u8RowsIter] );
    3eea:	8c 81       	ldd	r24, Y+4	; 0x04
    3eec:	88 2f       	mov	r24, r24
    3eee:	90 e0       	ldi	r25, 0x00	; 0
    3ef0:	fc 01       	movw	r30, r24
    3ef2:	e3 57       	subi	r30, 0x73	; 115
    3ef4:	fd 4f       	sbci	r31, 0xFD	; 253
    3ef6:	90 81       	ld	r25, Z
    3ef8:	80 e0       	ldi	r24, 0x00	; 0
    3efa:	69 2f       	mov	r22, r25
    3efc:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <DIO_u8GetPinValue>
    3f00:	8b 83       	std	Y+3, r24	; 0x03
                    Local_u8Flag = 1 ;
    3f02:	81 e0       	ldi	r24, 0x01	; 1
    3f04:	89 83       	std	Y+1, r24	; 0x01

            /* Key Pressed */
            if ( Local_u8PinValue == 0 )
            {
                /* More Checking again for Debounsing */
                while ( Local_u8PinValue == 0 )
    3f06:	8b 81       	ldd	r24, Y+3	; 0x03
    3f08:	88 23       	and	r24, r24
    3f0a:	e9 f2       	breq	.-70     	; 0x3ec6 <KPAD_u8GetPressedKey+0x54>
                    /* Read Row Pin again for sure for Debounsing and exit while loop when change at pressed button 
                    whithout it the program will not extern about while loop */
                    Local_u8PinValue = DIO_u8GetPinValue ( KPAD_PORT , KPAD_Au8RowsArr[Local_u8RowsIter] );
                    Local_u8Flag = 1 ;
                }
                Local_u8PressedKey = KPAD_Au8KeysArr[Local_u8RowsIter][Local_u8ColumnsIter] ;
    3f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    3f0e:	48 2f       	mov	r20, r24
    3f10:	50 e0       	ldi	r21, 0x00	; 0
    3f12:	8d 81       	ldd	r24, Y+5	; 0x05
    3f14:	28 2f       	mov	r18, r24
    3f16:	30 e0       	ldi	r19, 0x00	; 0
    3f18:	ca 01       	movw	r24, r20
    3f1a:	88 0f       	add	r24, r24
    3f1c:	99 1f       	adc	r25, r25
    3f1e:	88 0f       	add	r24, r24
    3f20:	99 1f       	adc	r25, r25
    3f22:	82 0f       	add	r24, r18
    3f24:	93 1f       	adc	r25, r19
    3f26:	fc 01       	movw	r30, r24
    3f28:	ef 56       	subi	r30, 0x6F	; 111
    3f2a:	fd 4f       	sbci	r31, 0xFD	; 253
    3f2c:	80 81       	ld	r24, Z
    3f2e:	8a 83       	std	Y+2, r24	; 0x02
    3f30:	07 c0       	rjmp	.+14     	; 0x3f40 <KPAD_u8GetPressedKey+0xce>
    for ( Local_u8ColumnsIter = 0 ; Local_u8ColumnsIter < KPAD_COLUMNS_NUM ; Local_u8ColumnsIter ++ )
    {
        /* Active the current Column */
        DIO_voidSetPinValue ( KPAD_PORT , KPAD_Au8ColumnsArr[Local_u8ColumnsIter] , LOW );

        for ( Local_u8RowsIter = 0 ; Local_u8RowsIter < KPAD_ROWS_NUM ; Local_u8RowsIter ++ )
    3f32:	8c 81       	ldd	r24, Y+4	; 0x04
    3f34:	8f 5f       	subi	r24, 0xFF	; 255
    3f36:	8c 83       	std	Y+4, r24	; 0x04
    3f38:	8c 81       	ldd	r24, Y+4	; 0x04
    3f3a:	84 30       	cpi	r24, 0x04	; 4
    3f3c:	08 f4       	brcc	.+2      	; 0x3f40 <KPAD_u8GetPressedKey+0xce>
    3f3e:	b3 cf       	rjmp	.-154    	; 0x3ea6 <KPAD_u8GetPressedKey+0x34>
                Local_u8PressedKey = KPAD_Au8KeysArr[Local_u8RowsIter][Local_u8ColumnsIter] ;
                break;
            }
        }
        /* Active the current Column */
        DIO_voidSetPinValue ( KPAD_PORT , KPAD_Au8ColumnsArr[Local_u8ColumnsIter] , HIGH );
    3f40:	8d 81       	ldd	r24, Y+5	; 0x05
    3f42:	88 2f       	mov	r24, r24
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	fc 01       	movw	r30, r24
    3f48:	e7 57       	subi	r30, 0x77	; 119
    3f4a:	fd 4f       	sbci	r31, 0xFD	; 253
    3f4c:	90 81       	ld	r25, Z
    3f4e:	80 e0       	ldi	r24, 0x00	; 0
    3f50:	69 2f       	mov	r22, r25
    3f52:	41 e0       	ldi	r20, 0x01	; 1
    3f54:	0e 94 68 14 	call	0x28d0	; 0x28d0 <DIO_voidSetPinValue>
        if ( Local_u8Flag == 1 )
    3f58:	89 81       	ldd	r24, Y+1	; 0x01
    3f5a:	81 30       	cpi	r24, 0x01	; 1
    3f5c:	39 f0       	breq	.+14     	; 0x3f6c <KPAD_u8GetPressedKey+0xfa>
    u8 Local_u8ColumnsIter ;
    u8 Local_u8RowsIter ;
    u8 Local_u8PinValue ;
    u8 Local_u8PressedKey = 0xff ; // return will be 0xff if not pressed any key 
    u8 Local_u8Flag = 0 ;
    for ( Local_u8ColumnsIter = 0 ; Local_u8ColumnsIter < KPAD_COLUMNS_NUM ; Local_u8ColumnsIter ++ )
    3f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f60:	8f 5f       	subi	r24, 0xFF	; 255
    3f62:	8d 83       	std	Y+5, r24	; 0x05
    3f64:	8d 81       	ldd	r24, Y+5	; 0x05
    3f66:	84 30       	cpi	r24, 0x04	; 4
    3f68:	08 f4       	brcc	.+2      	; 0x3f6c <KPAD_u8GetPressedKey+0xfa>
    3f6a:	8f cf       	rjmp	.-226    	; 0x3e8a <KPAD_u8GetPressedKey+0x18>
        if ( Local_u8Flag == 1 )
        {
            break;
        }
    }
    return Local_u8PressedKey ;
    3f6c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3f6e:	0f 90       	pop	r0
    3f70:	0f 90       	pop	r0
    3f72:	0f 90       	pop	r0
    3f74:	0f 90       	pop	r0
    3f76:	0f 90       	pop	r0
    3f78:	cf 91       	pop	r28
    3f7a:	df 91       	pop	r29
    3f7c:	08 95       	ret

00003f7e <EEPROM_voidSendDataByte>:
#include "../../MCAL/I2C/I2C_Interface.h"



void EEPROM_voidSendDataByte ( u16 Copy_u16LocationAddress , u8 Copy_u8DataByte )
{
    3f7e:	df 93       	push	r29
    3f80:	cf 93       	push	r28
    3f82:	cd b7       	in	r28, 0x3d	; 61
    3f84:	de b7       	in	r29, 0x3e	; 62
    3f86:	62 97       	sbiw	r28, 0x12	; 18
    3f88:	0f b6       	in	r0, 0x3f	; 63
    3f8a:	f8 94       	cli
    3f8c:	de bf       	out	0x3e, r29	; 62
    3f8e:	0f be       	out	0x3f, r0	; 63
    3f90:	cd bf       	out	0x3d, r28	; 61
    3f92:	99 8b       	std	Y+17, r25	; 0x11
    3f94:	88 8b       	std	Y+16, r24	; 0x10
    3f96:	6a 8b       	std	Y+18, r22	; 0x12
    u8 Local_Address ;
    Local_Address = EEPROM_FIXED_ADDRESS | (EEPROM_A2<<2) | ((u8)(Copy_u16LocationAddress>>8)) ;
    3f98:	88 89       	ldd	r24, Y+16	; 0x10
    3f9a:	99 89       	ldd	r25, Y+17	; 0x11
    3f9c:	89 2f       	mov	r24, r25
    3f9e:	99 27       	eor	r25, r25
    3fa0:	80 65       	ori	r24, 0x50	; 80
    3fa2:	8f 87       	std	Y+15, r24	; 0x0f
    // Send Start Condition
    I2C_Master_u8StartCondition ();
    3fa4:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <I2C_Master_u8StartCondition>
    // Send the address packet
    I2C_Master_u8SendSLA_Write_ACK (Local_Address);
    3fa8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3faa:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <I2C_Master_u8SendSLA_Write_ACK>
    // send the rest 8 BITS of the location Adress
    I2C_Master_u8WriteDataByte_ACK ( (u8)(Copy_u16LocationAddress));
    3fae:	88 89       	ldd	r24, Y+16	; 0x10
    3fb0:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <I2C_Master_u8WriteDataByte_ACK>
    // Send The Data Byte to the Memory Location
    I2C_Master_u8WriteDataByte_ACK (Copy_u8DataByte);
    3fb4:	8a 89       	ldd	r24, Y+18	; 0x12
    3fb6:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <I2C_Master_u8WriteDataByte_ACK>
    // Send Stop Condition
    I2C_Master_voidStopCondition ();
    3fba:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <I2C_Master_voidStopCondition>
    3fbe:	80 e0       	ldi	r24, 0x00	; 0
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	a0 e2       	ldi	r26, 0x20	; 32
    3fc4:	b1 e4       	ldi	r27, 0x41	; 65
    3fc6:	8b 87       	std	Y+11, r24	; 0x0b
    3fc8:	9c 87       	std	Y+12, r25	; 0x0c
    3fca:	ad 87       	std	Y+13, r26	; 0x0d
    3fcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fce:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fd6:	20 e0       	ldi	r18, 0x00	; 0
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	4a ef       	ldi	r20, 0xFA	; 250
    3fdc:	54 e4       	ldi	r21, 0x44	; 68
    3fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fe2:	dc 01       	movw	r26, r24
    3fe4:	cb 01       	movw	r24, r22
    3fe6:	8f 83       	std	Y+7, r24	; 0x07
    3fe8:	98 87       	std	Y+8, r25	; 0x08
    3fea:	a9 87       	std	Y+9, r26	; 0x09
    3fec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fee:	6f 81       	ldd	r22, Y+7	; 0x07
    3ff0:	78 85       	ldd	r23, Y+8	; 0x08
    3ff2:	89 85       	ldd	r24, Y+9	; 0x09
    3ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ff6:	20 e0       	ldi	r18, 0x00	; 0
    3ff8:	30 e0       	ldi	r19, 0x00	; 0
    3ffa:	40 e8       	ldi	r20, 0x80	; 128
    3ffc:	5f e3       	ldi	r21, 0x3F	; 63
    3ffe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4002:	88 23       	and	r24, r24
    4004:	2c f4       	brge	.+10     	; 0x4010 <EEPROM_voidSendDataByte+0x92>
		__ticks = 1;
    4006:	81 e0       	ldi	r24, 0x01	; 1
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	9e 83       	std	Y+6, r25	; 0x06
    400c:	8d 83       	std	Y+5, r24	; 0x05
    400e:	3f c0       	rjmp	.+126    	; 0x408e <EEPROM_voidSendDataByte+0x110>
	else if (__tmp > 65535)
    4010:	6f 81       	ldd	r22, Y+7	; 0x07
    4012:	78 85       	ldd	r23, Y+8	; 0x08
    4014:	89 85       	ldd	r24, Y+9	; 0x09
    4016:	9a 85       	ldd	r25, Y+10	; 0x0a
    4018:	20 e0       	ldi	r18, 0x00	; 0
    401a:	3f ef       	ldi	r19, 0xFF	; 255
    401c:	4f e7       	ldi	r20, 0x7F	; 127
    401e:	57 e4       	ldi	r21, 0x47	; 71
    4020:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4024:	18 16       	cp	r1, r24
    4026:	4c f5       	brge	.+82     	; 0x407a <EEPROM_voidSendDataByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4028:	6b 85       	ldd	r22, Y+11	; 0x0b
    402a:	7c 85       	ldd	r23, Y+12	; 0x0c
    402c:	8d 85       	ldd	r24, Y+13	; 0x0d
    402e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4030:	20 e0       	ldi	r18, 0x00	; 0
    4032:	30 e0       	ldi	r19, 0x00	; 0
    4034:	40 e2       	ldi	r20, 0x20	; 32
    4036:	51 e4       	ldi	r21, 0x41	; 65
    4038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    403c:	dc 01       	movw	r26, r24
    403e:	cb 01       	movw	r24, r22
    4040:	bc 01       	movw	r22, r24
    4042:	cd 01       	movw	r24, r26
    4044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4048:	dc 01       	movw	r26, r24
    404a:	cb 01       	movw	r24, r22
    404c:	9e 83       	std	Y+6, r25	; 0x06
    404e:	8d 83       	std	Y+5, r24	; 0x05
    4050:	0f c0       	rjmp	.+30     	; 0x4070 <EEPROM_voidSendDataByte+0xf2>
    4052:	88 ec       	ldi	r24, 0xC8	; 200
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	9c 83       	std	Y+4, r25	; 0x04
    4058:	8b 83       	std	Y+3, r24	; 0x03
    405a:	8b 81       	ldd	r24, Y+3	; 0x03
    405c:	9c 81       	ldd	r25, Y+4	; 0x04
    405e:	01 97       	sbiw	r24, 0x01	; 1
    4060:	f1 f7       	brne	.-4      	; 0x405e <EEPROM_voidSendDataByte+0xe0>
    4062:	9c 83       	std	Y+4, r25	; 0x04
    4064:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4066:	8d 81       	ldd	r24, Y+5	; 0x05
    4068:	9e 81       	ldd	r25, Y+6	; 0x06
    406a:	01 97       	sbiw	r24, 0x01	; 1
    406c:	9e 83       	std	Y+6, r25	; 0x06
    406e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4070:	8d 81       	ldd	r24, Y+5	; 0x05
    4072:	9e 81       	ldd	r25, Y+6	; 0x06
    4074:	00 97       	sbiw	r24, 0x00	; 0
    4076:	69 f7       	brne	.-38     	; 0x4052 <EEPROM_voidSendDataByte+0xd4>
    4078:	14 c0       	rjmp	.+40     	; 0x40a2 <EEPROM_voidSendDataByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    407a:	6f 81       	ldd	r22, Y+7	; 0x07
    407c:	78 85       	ldd	r23, Y+8	; 0x08
    407e:	89 85       	ldd	r24, Y+9	; 0x09
    4080:	9a 85       	ldd	r25, Y+10	; 0x0a
    4082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4086:	dc 01       	movw	r26, r24
    4088:	cb 01       	movw	r24, r22
    408a:	9e 83       	std	Y+6, r25	; 0x06
    408c:	8d 83       	std	Y+5, r24	; 0x05
    408e:	8d 81       	ldd	r24, Y+5	; 0x05
    4090:	9e 81       	ldd	r25, Y+6	; 0x06
    4092:	9a 83       	std	Y+2, r25	; 0x02
    4094:	89 83       	std	Y+1, r24	; 0x01
    4096:	89 81       	ldd	r24, Y+1	; 0x01
    4098:	9a 81       	ldd	r25, Y+2	; 0x02
    409a:	01 97       	sbiw	r24, 0x01	; 1
    409c:	f1 f7       	brne	.-4      	; 0x409a <EEPROM_voidSendDataByte+0x11c>
    409e:	9a 83       	std	Y+2, r25	; 0x02
    40a0:	89 83       	std	Y+1, r24	; 0x01
    // Delay Until the Write cycle is finished
    _delay_ms(10);

}
    40a2:	62 96       	adiw	r28, 0x12	; 18
    40a4:	0f b6       	in	r0, 0x3f	; 63
    40a6:	f8 94       	cli
    40a8:	de bf       	out	0x3e, r29	; 62
    40aa:	0f be       	out	0x3f, r0	; 63
    40ac:	cd bf       	out	0x3d, r28	; 61
    40ae:	cf 91       	pop	r28
    40b0:	df 91       	pop	r29
    40b2:	08 95       	ret

000040b4 <EEPROM_voidReadDataByte>:

u8 EEPROM_voidReadDataByte ( u16 Copy_u16LocationAddress )
{
    40b4:	df 93       	push	r29
    40b6:	cf 93       	push	r28
    40b8:	cd b7       	in	r28, 0x3d	; 61
    40ba:	de b7       	in	r29, 0x3e	; 62
    40bc:	62 97       	sbiw	r28, 0x12	; 18
    40be:	0f b6       	in	r0, 0x3f	; 63
    40c0:	f8 94       	cli
    40c2:	de bf       	out	0x3e, r29	; 62
    40c4:	0f be       	out	0x3f, r0	; 63
    40c6:	cd bf       	out	0x3d, r28	; 61
    40c8:	9a 8b       	std	Y+18, r25	; 0x12
    40ca:	89 8b       	std	Y+17, r24	; 0x11
    u8 Data ;
    u8 Local_Address ;
    Local_Address = EEPROM_FIXED_ADDRESS | (EEPROM_A2<<2) | ((u8)(Copy_u16LocationAddress>>8)) ;
    40cc:	89 89       	ldd	r24, Y+17	; 0x11
    40ce:	9a 89       	ldd	r25, Y+18	; 0x12
    40d0:	89 2f       	mov	r24, r25
    40d2:	99 27       	eor	r25, r25
    40d4:	80 65       	ori	r24, 0x50	; 80
    40d6:	8f 87       	std	Y+15, r24	; 0x0f
    // Send Start Condition 
    I2C_Master_u8StartCondition ();
    40d8:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <I2C_Master_u8StartCondition>
    // Send the address packet with Write operation
    I2C_Master_u8SendSLA_Write_ACK (Local_Address);
    40dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    40de:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <I2C_Master_u8SendSLA_Write_ACK>
    // send the rest 8 BITS of the location Adress
    I2C_Master_u8WriteDataByte_ACK ( (u8)(Copy_u16LocationAddress) );
    40e2:	89 89       	ldd	r24, Y+17	; 0x11
    40e4:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <I2C_Master_u8WriteDataByte_ACK>
    // Send Repeated Start to chang write request to Read request
    I2C_Master_u8ReStartCondition ();
    40e8:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <I2C_Master_u8ReStartCondition>
    // Send the address packet with Read operation
    I2C_Master_u8SendSLA_Read_ACK (Local_Address);
    40ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    40ee:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <I2C_Master_u8SendSLA_Read_ACK>
    // Get The Data From Memory
    I2C_Master_u8ReadDataByte_NOTACK (&Data);
    40f2:	ce 01       	movw	r24, r28
    40f4:	40 96       	adiw	r24, 0x10	; 16
    40f6:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <I2C_Master_u8ReadDataByte_NOTACK>
    // Send Stop Condition
    I2C_Master_voidStopCondition();
    40fa:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <I2C_Master_voidStopCondition>
    40fe:	80 e0       	ldi	r24, 0x00	; 0
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	a0 e2       	ldi	r26, 0x20	; 32
    4104:	b1 e4       	ldi	r27, 0x41	; 65
    4106:	8b 87       	std	Y+11, r24	; 0x0b
    4108:	9c 87       	std	Y+12, r25	; 0x0c
    410a:	ad 87       	std	Y+13, r26	; 0x0d
    410c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    410e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4110:	7c 85       	ldd	r23, Y+12	; 0x0c
    4112:	8d 85       	ldd	r24, Y+13	; 0x0d
    4114:	9e 85       	ldd	r25, Y+14	; 0x0e
    4116:	20 e0       	ldi	r18, 0x00	; 0
    4118:	30 e0       	ldi	r19, 0x00	; 0
    411a:	4a ef       	ldi	r20, 0xFA	; 250
    411c:	54 e4       	ldi	r21, 0x44	; 68
    411e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4122:	dc 01       	movw	r26, r24
    4124:	cb 01       	movw	r24, r22
    4126:	8f 83       	std	Y+7, r24	; 0x07
    4128:	98 87       	std	Y+8, r25	; 0x08
    412a:	a9 87       	std	Y+9, r26	; 0x09
    412c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    412e:	6f 81       	ldd	r22, Y+7	; 0x07
    4130:	78 85       	ldd	r23, Y+8	; 0x08
    4132:	89 85       	ldd	r24, Y+9	; 0x09
    4134:	9a 85       	ldd	r25, Y+10	; 0x0a
    4136:	20 e0       	ldi	r18, 0x00	; 0
    4138:	30 e0       	ldi	r19, 0x00	; 0
    413a:	40 e8       	ldi	r20, 0x80	; 128
    413c:	5f e3       	ldi	r21, 0x3F	; 63
    413e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4142:	88 23       	and	r24, r24
    4144:	2c f4       	brge	.+10     	; 0x4150 <EEPROM_voidReadDataByte+0x9c>
		__ticks = 1;
    4146:	81 e0       	ldi	r24, 0x01	; 1
    4148:	90 e0       	ldi	r25, 0x00	; 0
    414a:	9e 83       	std	Y+6, r25	; 0x06
    414c:	8d 83       	std	Y+5, r24	; 0x05
    414e:	3f c0       	rjmp	.+126    	; 0x41ce <EEPROM_voidReadDataByte+0x11a>
	else if (__tmp > 65535)
    4150:	6f 81       	ldd	r22, Y+7	; 0x07
    4152:	78 85       	ldd	r23, Y+8	; 0x08
    4154:	89 85       	ldd	r24, Y+9	; 0x09
    4156:	9a 85       	ldd	r25, Y+10	; 0x0a
    4158:	20 e0       	ldi	r18, 0x00	; 0
    415a:	3f ef       	ldi	r19, 0xFF	; 255
    415c:	4f e7       	ldi	r20, 0x7F	; 127
    415e:	57 e4       	ldi	r21, 0x47	; 71
    4160:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4164:	18 16       	cp	r1, r24
    4166:	4c f5       	brge	.+82     	; 0x41ba <EEPROM_voidReadDataByte+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4168:	6b 85       	ldd	r22, Y+11	; 0x0b
    416a:	7c 85       	ldd	r23, Y+12	; 0x0c
    416c:	8d 85       	ldd	r24, Y+13	; 0x0d
    416e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4170:	20 e0       	ldi	r18, 0x00	; 0
    4172:	30 e0       	ldi	r19, 0x00	; 0
    4174:	40 e2       	ldi	r20, 0x20	; 32
    4176:	51 e4       	ldi	r21, 0x41	; 65
    4178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    417c:	dc 01       	movw	r26, r24
    417e:	cb 01       	movw	r24, r22
    4180:	bc 01       	movw	r22, r24
    4182:	cd 01       	movw	r24, r26
    4184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4188:	dc 01       	movw	r26, r24
    418a:	cb 01       	movw	r24, r22
    418c:	9e 83       	std	Y+6, r25	; 0x06
    418e:	8d 83       	std	Y+5, r24	; 0x05
    4190:	0f c0       	rjmp	.+30     	; 0x41b0 <EEPROM_voidReadDataByte+0xfc>
    4192:	88 ec       	ldi	r24, 0xC8	; 200
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	9c 83       	std	Y+4, r25	; 0x04
    4198:	8b 83       	std	Y+3, r24	; 0x03
    419a:	8b 81       	ldd	r24, Y+3	; 0x03
    419c:	9c 81       	ldd	r25, Y+4	; 0x04
    419e:	01 97       	sbiw	r24, 0x01	; 1
    41a0:	f1 f7       	brne	.-4      	; 0x419e <EEPROM_voidReadDataByte+0xea>
    41a2:	9c 83       	std	Y+4, r25	; 0x04
    41a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41a6:	8d 81       	ldd	r24, Y+5	; 0x05
    41a8:	9e 81       	ldd	r25, Y+6	; 0x06
    41aa:	01 97       	sbiw	r24, 0x01	; 1
    41ac:	9e 83       	std	Y+6, r25	; 0x06
    41ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41b0:	8d 81       	ldd	r24, Y+5	; 0x05
    41b2:	9e 81       	ldd	r25, Y+6	; 0x06
    41b4:	00 97       	sbiw	r24, 0x00	; 0
    41b6:	69 f7       	brne	.-38     	; 0x4192 <EEPROM_voidReadDataByte+0xde>
    41b8:	14 c0       	rjmp	.+40     	; 0x41e2 <EEPROM_voidReadDataByte+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41ba:	6f 81       	ldd	r22, Y+7	; 0x07
    41bc:	78 85       	ldd	r23, Y+8	; 0x08
    41be:	89 85       	ldd	r24, Y+9	; 0x09
    41c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    41c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41c6:	dc 01       	movw	r26, r24
    41c8:	cb 01       	movw	r24, r22
    41ca:	9e 83       	std	Y+6, r25	; 0x06
    41cc:	8d 83       	std	Y+5, r24	; 0x05
    41ce:	8d 81       	ldd	r24, Y+5	; 0x05
    41d0:	9e 81       	ldd	r25, Y+6	; 0x06
    41d2:	9a 83       	std	Y+2, r25	; 0x02
    41d4:	89 83       	std	Y+1, r24	; 0x01
    41d6:	89 81       	ldd	r24, Y+1	; 0x01
    41d8:	9a 81       	ldd	r25, Y+2	; 0x02
    41da:	01 97       	sbiw	r24, 0x01	; 1
    41dc:	f1 f7       	brne	.-4      	; 0x41da <EEPROM_voidReadDataByte+0x126>
    41de:	9a 83       	std	Y+2, r25	; 0x02
    41e0:	89 83       	std	Y+1, r24	; 0x01
    // Delay Until the Read cycle is finished
    _delay_ms(10);
    // Return Data
    return Data ;
    41e2:	88 89       	ldd	r24, Y+16	; 0x10
    41e4:	62 96       	adiw	r28, 0x12	; 18
    41e6:	0f b6       	in	r0, 0x3f	; 63
    41e8:	f8 94       	cli
    41ea:	de bf       	out	0x3e, r29	; 62
    41ec:	0f be       	out	0x3f, r0	; 63
    41ee:	cd bf       	out	0x3d, r28	; 61
    41f0:	cf 91       	pop	r28
    41f2:	df 91       	pop	r29
    41f4:	08 95       	ret

000041f6 <BUTTON_voidInit_Button_Pin>:
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }                           */
/* Fun. Argument3: Copy_u8PullUpStatus { ON , OFF }                                                  */
/* Fun. Return : void                                                                                */
/*****************************************************************************************************/
void BUTTON_voidInit_Button_Pin ( u8 Copy_u8PortNumber, u8 Copy_u8PinNumber , u8 Copy_u8PullUpStatus )
{
    41f6:	df 93       	push	r29
    41f8:	cf 93       	push	r28
    41fa:	00 d0       	rcall	.+0      	; 0x41fc <BUTTON_voidInit_Button_Pin+0x6>
    41fc:	0f 92       	push	r0
    41fe:	cd b7       	in	r28, 0x3d	; 61
    4200:	de b7       	in	r29, 0x3e	; 62
    4202:	89 83       	std	Y+1, r24	; 0x01
    4204:	6a 83       	std	Y+2, r22	; 0x02
    4206:	4b 83       	std	Y+3, r20	; 0x03
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD  || Copy_u8PinNumber > PIN7 )
    4208:	89 81       	ldd	r24, Y+1	; 0x01
    420a:	84 30       	cpi	r24, 0x04	; 4
    420c:	68 f4       	brcc	.+26     	; 0x4228 <BUTTON_voidInit_Button_Pin+0x32>
    420e:	8a 81       	ldd	r24, Y+2	; 0x02
    4210:	88 30       	cpi	r24, 0x08	; 8
    4212:	50 f4       	brcc	.+20     	; 0x4228 <BUTTON_voidInit_Button_Pin+0x32>
    {
        // Do Nothing
    }
    else
    {   // Set Direction INPUT to Copy_u8PinNumber
        DIO_voidSetPinDirection (Copy_u8PortNumber,Copy_u8PinNumber,INPUT);
    4214:	89 81       	ldd	r24, Y+1	; 0x01
    4216:	6a 81       	ldd	r22, Y+2	; 0x02
    4218:	40 e0       	ldi	r20, 0x00	; 0
    421a:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_voidSetPinDirection>
        // activate Pull Up Resistor on Copy_u8PinNumber
        DIO_voidConfig_Pull_Up_Pin (Copy_u8PortNumber,Copy_u8PinNumber, Copy_u8PullUpStatus );
    421e:	89 81       	ldd	r24, Y+1	; 0x01
    4220:	6a 81       	ldd	r22, Y+2	; 0x02
    4222:	4b 81       	ldd	r20, Y+3	; 0x03
    4224:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <DIO_voidConfig_Pull_Up_Pin>
    }
}
    4228:	0f 90       	pop	r0
    422a:	0f 90       	pop	r0
    422c:	0f 90       	pop	r0
    422e:	cf 91       	pop	r28
    4230:	df 91       	pop	r29
    4232:	08 95       	ret

00004234 <BUTTON_voidInit_8Buttons_Port>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                                     */
/* Fun. Argument3: Copy_u8PullUpStatus { ON , OFF }                                                  */
/* Fun. Return : void                                                                                */
/*****************************************************************************************************/
void BUTTON_voidInit_8Buttons_Port ( u8 Copy_u8PortNumber, u8 Copy_u8PullUpStatus )
{
    4234:	df 93       	push	r29
    4236:	cf 93       	push	r28
    4238:	00 d0       	rcall	.+0      	; 0x423a <BUTTON_voidInit_8Buttons_Port+0x6>
    423a:	cd b7       	in	r28, 0x3d	; 61
    423c:	de b7       	in	r29, 0x3e	; 62
    423e:	89 83       	std	Y+1, r24	; 0x01
    4240:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
    4242:	89 81       	ldd	r24, Y+1	; 0x01
    4244:	84 30       	cpi	r24, 0x04	; 4
    4246:	40 f4       	brcc	.+16     	; 0x4258 <BUTTON_voidInit_8Buttons_Port+0x24>
    {
        // Do Nothing
    }
    else
    {   // Set Direction INPUT to Copy_u8PortNumber
        DIO_voidSetPortDirection (Copy_u8PortNumber, INPUT );
    4248:	89 81       	ldd	r24, Y+1	; 0x01
    424a:	60 e0       	ldi	r22, 0x00	; 0
    424c:	0e 94 df 13 	call	0x27be	; 0x27be <DIO_voidSetPortDirection>
        // activate Pull Up Resistor on Copy_u8PortNumber
        DIO_voidConfig_Pull_Up_Port (Copy_u8PortNumber, Copy_u8PullUpStatus );
    4250:	89 81       	ldd	r24, Y+1	; 0x01
    4252:	6a 81       	ldd	r22, Y+2	; 0x02
    4254:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <DIO_voidConfig_Pull_Up_Port>
    }
}
    4258:	0f 90       	pop	r0
    425a:	0f 90       	pop	r0
    425c:	cf 91       	pop	r28
    425e:	df 91       	pop	r29
    4260:	08 95       	ret

00004262 <BUTTON_u8Get_Button_Pin>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                                     */
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }                           */
/* Fun. Return : unsigned character { LOW (Button is Pressed) , HIGH (Button is Not Pressed) }       */
/*****************************************************************************************************/
u8 BUTTON_u8Get_Button_Pin (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber )
{
    4262:	df 93       	push	r29
    4264:	cf 93       	push	r28
    4266:	00 d0       	rcall	.+0      	; 0x4268 <BUTTON_u8Get_Button_Pin+0x6>
    4268:	0f 92       	push	r0
    426a:	cd b7       	in	r28, 0x3d	; 61
    426c:	de b7       	in	r29, 0x3e	; 62
    426e:	8a 83       	std	Y+2, r24	; 0x02
    4270:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Value  ;
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD || Copy_u8PinNumber > PIN7 )
    4272:	8a 81       	ldd	r24, Y+2	; 0x02
    4274:	84 30       	cpi	r24, 0x04	; 4
    4276:	40 f4       	brcc	.+16     	; 0x4288 <BUTTON_u8Get_Button_Pin+0x26>
    4278:	8b 81       	ldd	r24, Y+3	; 0x03
    427a:	88 30       	cpi	r24, 0x08	; 8
    427c:	28 f4       	brcc	.+10     	; 0x4288 <BUTTON_u8Get_Button_Pin+0x26>
    {
        // Do Nothing
    }
    else
    {   
        Local_u8Value = DIO_u8GetPinValue ( Copy_u8PortNumber,  Copy_u8PinNumber ) ;
    427e:	8a 81       	ldd	r24, Y+2	; 0x02
    4280:	6b 81       	ldd	r22, Y+3	; 0x03
    4282:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <DIO_u8GetPinValue>
    4286:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8Value ;
    4288:	89 81       	ldd	r24, Y+1	; 0x01
}
    428a:	0f 90       	pop	r0
    428c:	0f 90       	pop	r0
    428e:	0f 90       	pop	r0
    4290:	cf 91       	pop	r28
    4292:	df 91       	pop	r29
    4294:	08 95       	ret

00004296 <BUTTON_u8Get_8Buttons_Port>:
/* Description : Read String of 8 push buttons value in a given Port                                 */
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                                     */
/* Fun. Return : unsigned character { 0bxxxxxxxx } (x) is a value in an one Pin on the Port          */
/*****************************************************************************************************/
u8 BUTTON_u8Get_8Buttons_Port (u8 Copy_u8PortNumber)
{   
    4296:	df 93       	push	r29
    4298:	cf 93       	push	r28
    429a:	00 d0       	rcall	.+0      	; 0x429c <BUTTON_u8Get_8Buttons_Port+0x6>
    429c:	cd b7       	in	r28, 0x3d	; 61
    429e:	de b7       	in	r29, 0x3e	; 62
    42a0:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8Value  ;
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
    42a2:	8a 81       	ldd	r24, Y+2	; 0x02
    42a4:	84 30       	cpi	r24, 0x04	; 4
    42a6:	20 f4       	brcc	.+8      	; 0x42b0 <BUTTON_u8Get_8Buttons_Port+0x1a>
    {
        // Do Nothing
    }
    else
    {   
        Local_u8Value = DIO_u8GetPortValue ( Copy_u8PortNumber ) ;   
    42a8:	8a 81       	ldd	r24, Y+2	; 0x02
    42aa:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <DIO_u8GetPortValue>
    42ae:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8Value ;
    42b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    42b2:	0f 90       	pop	r0
    42b4:	0f 90       	pop	r0
    42b6:	cf 91       	pop	r28
    42b8:	df 91       	pop	r29
    42ba:	08 95       	ret

000042bc <SEGMENT_voidInitSegmentPort>:
/* Description : Initialize one 7-Segment on specific Port ant make it direction as OUTPUT           */
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                                     */
/* Fun. Return : void                                                                                */
/*****************************************************************************************************/
void SEGMENT_voidInitSegmentPort ( u8 Copy_u8PortNumber )
{
    42bc:	df 93       	push	r29
    42be:	cf 93       	push	r28
    42c0:	00 d0       	rcall	.+0      	; 0x42c2 <SEGMENT_voidInitSegmentPort+0x6>
    42c2:	0f 92       	push	r0
    42c4:	cd b7       	in	r28, 0x3d	; 61
    42c6:	de b7       	in	r29, 0x3e	; 62
    42c8:	89 83       	std	Y+1, r24	; 0x01
    switch(Copy_u8PortNumber)
    42ca:	89 81       	ldd	r24, Y+1	; 0x01
    42cc:	28 2f       	mov	r18, r24
    42ce:	30 e0       	ldi	r19, 0x00	; 0
    42d0:	3b 83       	std	Y+3, r19	; 0x03
    42d2:	2a 83       	std	Y+2, r18	; 0x02
    42d4:	8a 81       	ldd	r24, Y+2	; 0x02
    42d6:	9b 81       	ldd	r25, Y+3	; 0x03
    42d8:	81 30       	cpi	r24, 0x01	; 1
    42da:	91 05       	cpc	r25, r1
    42dc:	d1 f0       	breq	.+52     	; 0x4312 <SEGMENT_voidInitSegmentPort+0x56>
    42de:	2a 81       	ldd	r18, Y+2	; 0x02
    42e0:	3b 81       	ldd	r19, Y+3	; 0x03
    42e2:	22 30       	cpi	r18, 0x02	; 2
    42e4:	31 05       	cpc	r19, r1
    42e6:	2c f4       	brge	.+10     	; 0x42f2 <SEGMENT_voidInitSegmentPort+0x36>
    42e8:	8a 81       	ldd	r24, Y+2	; 0x02
    42ea:	9b 81       	ldd	r25, Y+3	; 0x03
    42ec:	00 97       	sbiw	r24, 0x00	; 0
    42ee:	61 f0       	breq	.+24     	; 0x4308 <SEGMENT_voidInitSegmentPort+0x4c>
    42f0:	1e c0       	rjmp	.+60     	; 0x432e <SEGMENT_voidInitSegmentPort+0x72>
    42f2:	2a 81       	ldd	r18, Y+2	; 0x02
    42f4:	3b 81       	ldd	r19, Y+3	; 0x03
    42f6:	22 30       	cpi	r18, 0x02	; 2
    42f8:	31 05       	cpc	r19, r1
    42fa:	81 f0       	breq	.+32     	; 0x431c <SEGMENT_voidInitSegmentPort+0x60>
    42fc:	8a 81       	ldd	r24, Y+2	; 0x02
    42fe:	9b 81       	ldd	r25, Y+3	; 0x03
    4300:	83 30       	cpi	r24, 0x03	; 3
    4302:	91 05       	cpc	r25, r1
    4304:	81 f0       	breq	.+32     	; 0x4326 <SEGMENT_voidInitSegmentPort+0x6a>
    4306:	13 c0       	rjmp	.+38     	; 0x432e <SEGMENT_voidInitSegmentPort+0x72>
    {
        case PORTA :   DIO_voidSetPortDirection (PORTA,OUTPUT);    break;
    4308:	80 e0       	ldi	r24, 0x00	; 0
    430a:	61 e0       	ldi	r22, 0x01	; 1
    430c:	0e 94 df 13 	call	0x27be	; 0x27be <DIO_voidSetPortDirection>
    4310:	0e c0       	rjmp	.+28     	; 0x432e <SEGMENT_voidInitSegmentPort+0x72>
        case PORTB :   DIO_voidSetPortDirection (PORTB,OUTPUT);    break;
    4312:	81 e0       	ldi	r24, 0x01	; 1
    4314:	61 e0       	ldi	r22, 0x01	; 1
    4316:	0e 94 df 13 	call	0x27be	; 0x27be <DIO_voidSetPortDirection>
    431a:	09 c0       	rjmp	.+18     	; 0x432e <SEGMENT_voidInitSegmentPort+0x72>
        case PORTC :   DIO_voidSetPortDirection (PORTC,OUTPUT);    break;
    431c:	82 e0       	ldi	r24, 0x02	; 2
    431e:	61 e0       	ldi	r22, 0x01	; 1
    4320:	0e 94 df 13 	call	0x27be	; 0x27be <DIO_voidSetPortDirection>
    4324:	04 c0       	rjmp	.+8      	; 0x432e <SEGMENT_voidInitSegmentPort+0x72>
        case PORTD :   DIO_voidSetPortDirection (PORTD,OUTPUT);    break;
    4326:	83 e0       	ldi	r24, 0x03	; 3
    4328:	61 e0       	ldi	r22, 0x01	; 1
    432a:	0e 94 df 13 	call	0x27be	; 0x27be <DIO_voidSetPortDirection>
        default    :                                               break;
    }
}
    432e:	0f 90       	pop	r0
    4330:	0f 90       	pop	r0
    4332:	0f 90       	pop	r0
    4334:	cf 91       	pop	r28
    4336:	df 91       	pop	r29
    4338:	08 95       	ret

0000433a <SEGMENT_voidPrintNumber>:
/* Fun. Argument2: Copy_SegmentPolarity { COMMON_ANODE , COMMON_CATHODE }                            */
/* Fun. Argument3: Copy_u8Number { 0,1,2,3,4,5,6,7,8,9 }                                             */
/* Fun. Return : void                                                                                */
/*****************************************************************************************************/
void SEGMENT_voidPrintNumber ( u8 Copy_u8PortNumber , u8 Copy_SegmentPolarity , u8 Copy_u8Number )
{
    433a:	df 93       	push	r29
    433c:	cf 93       	push	r28
    433e:	cd b7       	in	r28, 0x3d	; 61
    4340:	de b7       	in	r29, 0x3e	; 62
    4342:	29 97       	sbiw	r28, 0x09	; 9
    4344:	0f b6       	in	r0, 0x3f	; 63
    4346:	f8 94       	cli
    4348:	de bf       	out	0x3e, r29	; 62
    434a:	0f be       	out	0x3f, r0	; 63
    434c:	cd bf       	out	0x3d, r28	; 61
    434e:	89 83       	std	Y+1, r24	; 0x01
    4350:	6a 83       	std	Y+2, r22	; 0x02
    4352:	4b 83       	std	Y+3, r20	; 0x03
    switch ( Copy_SegmentPolarity )
    4354:	8a 81       	ldd	r24, Y+2	; 0x02
    4356:	28 2f       	mov	r18, r24
    4358:	30 e0       	ldi	r19, 0x00	; 0
    435a:	39 87       	std	Y+9, r19	; 0x09
    435c:	28 87       	std	Y+8, r18	; 0x08
    435e:	88 85       	ldd	r24, Y+8	; 0x08
    4360:	99 85       	ldd	r25, Y+9	; 0x09
    4362:	00 97       	sbiw	r24, 0x00	; 0
    4364:	39 f0       	breq	.+14     	; 0x4374 <SEGMENT_voidPrintNumber+0x3a>
    4366:	28 85       	ldd	r18, Y+8	; 0x08
    4368:	39 85       	ldd	r19, Y+9	; 0x09
    436a:	21 30       	cpi	r18, 0x01	; 1
    436c:	31 05       	cpc	r19, r1
    436e:	09 f4       	brne	.+2      	; 0x4372 <SEGMENT_voidPrintNumber+0x38>
    4370:	50 c0       	rjmp	.+160    	; 0x4412 <SEGMENT_voidPrintNumber+0xd8>
    4372:	a5 c0       	rjmp	.+330    	; 0x44be <SEGMENT_voidPrintNumber+0x184>
    {
        case COMMON_ANODE   :   switch(Copy_u8PortNumber)
    4374:	89 81       	ldd	r24, Y+1	; 0x01
    4376:	28 2f       	mov	r18, r24
    4378:	30 e0       	ldi	r19, 0x00	; 0
    437a:	3f 83       	std	Y+7, r19	; 0x07
    437c:	2e 83       	std	Y+6, r18	; 0x06
    437e:	8e 81       	ldd	r24, Y+6	; 0x06
    4380:	9f 81       	ldd	r25, Y+7	; 0x07
    4382:	81 30       	cpi	r24, 0x01	; 1
    4384:	91 05       	cpc	r25, r1
    4386:	09 f1       	breq	.+66     	; 0x43ca <SEGMENT_voidPrintNumber+0x90>
    4388:	2e 81       	ldd	r18, Y+6	; 0x06
    438a:	3f 81       	ldd	r19, Y+7	; 0x07
    438c:	22 30       	cpi	r18, 0x02	; 2
    438e:	31 05       	cpc	r19, r1
    4390:	2c f4       	brge	.+10     	; 0x439c <SEGMENT_voidPrintNumber+0x62>
    4392:	8e 81       	ldd	r24, Y+6	; 0x06
    4394:	9f 81       	ldd	r25, Y+7	; 0x07
    4396:	00 97       	sbiw	r24, 0x00	; 0
    4398:	61 f0       	breq	.+24     	; 0x43b2 <SEGMENT_voidPrintNumber+0x78>
    439a:	91 c0       	rjmp	.+290    	; 0x44be <SEGMENT_voidPrintNumber+0x184>
    439c:	2e 81       	ldd	r18, Y+6	; 0x06
    439e:	3f 81       	ldd	r19, Y+7	; 0x07
    43a0:	22 30       	cpi	r18, 0x02	; 2
    43a2:	31 05       	cpc	r19, r1
    43a4:	f1 f0       	breq	.+60     	; 0x43e2 <SEGMENT_voidPrintNumber+0xa8>
    43a6:	8e 81       	ldd	r24, Y+6	; 0x06
    43a8:	9f 81       	ldd	r25, Y+7	; 0x07
    43aa:	83 30       	cpi	r24, 0x03	; 3
    43ac:	91 05       	cpc	r25, r1
    43ae:	29 f1       	breq	.+74     	; 0x43fa <SEGMENT_voidPrintNumber+0xc0>
    43b0:	86 c0       	rjmp	.+268    	; 0x44be <SEGMENT_voidPrintNumber+0x184>
                                {
                                    case PORTA :   DIO_voidSetPortValue (PORTA,Common_Anode_Arr[Copy_u8Number]);    break;
    43b2:	8b 81       	ldd	r24, Y+3	; 0x03
    43b4:	88 2f       	mov	r24, r24
    43b6:	90 e0       	ldi	r25, 0x00	; 0
    43b8:	fc 01       	movw	r30, r24
    43ba:	ef 55       	subi	r30, 0x5F	; 95
    43bc:	fd 4f       	sbci	r31, 0xFD	; 253
    43be:	90 81       	ld	r25, Z
    43c0:	80 e0       	ldi	r24, 0x00	; 0
    43c2:	69 2f       	mov	r22, r25
    43c4:	0e 94 78 15 	call	0x2af0	; 0x2af0 <DIO_voidSetPortValue>
    43c8:	7a c0       	rjmp	.+244    	; 0x44be <SEGMENT_voidPrintNumber+0x184>
                                    case PORTB :   DIO_voidSetPortValue (PORTB,Common_Anode_Arr[Copy_u8Number]);    break;
    43ca:	8b 81       	ldd	r24, Y+3	; 0x03
    43cc:	88 2f       	mov	r24, r24
    43ce:	90 e0       	ldi	r25, 0x00	; 0
    43d0:	fc 01       	movw	r30, r24
    43d2:	ef 55       	subi	r30, 0x5F	; 95
    43d4:	fd 4f       	sbci	r31, 0xFD	; 253
    43d6:	90 81       	ld	r25, Z
    43d8:	81 e0       	ldi	r24, 0x01	; 1
    43da:	69 2f       	mov	r22, r25
    43dc:	0e 94 78 15 	call	0x2af0	; 0x2af0 <DIO_voidSetPortValue>
    43e0:	6e c0       	rjmp	.+220    	; 0x44be <SEGMENT_voidPrintNumber+0x184>
                                    case PORTC :   DIO_voidSetPortValue (PORTC,Common_Anode_Arr[Copy_u8Number]);    break;
    43e2:	8b 81       	ldd	r24, Y+3	; 0x03
    43e4:	88 2f       	mov	r24, r24
    43e6:	90 e0       	ldi	r25, 0x00	; 0
    43e8:	fc 01       	movw	r30, r24
    43ea:	ef 55       	subi	r30, 0x5F	; 95
    43ec:	fd 4f       	sbci	r31, 0xFD	; 253
    43ee:	90 81       	ld	r25, Z
    43f0:	82 e0       	ldi	r24, 0x02	; 2
    43f2:	69 2f       	mov	r22, r25
    43f4:	0e 94 78 15 	call	0x2af0	; 0x2af0 <DIO_voidSetPortValue>
    43f8:	62 c0       	rjmp	.+196    	; 0x44be <SEGMENT_voidPrintNumber+0x184>
                                    case PORTD :   DIO_voidSetPortValue (PORTD,Common_Anode_Arr[Copy_u8Number]);    break;
    43fa:	8b 81       	ldd	r24, Y+3	; 0x03
    43fc:	88 2f       	mov	r24, r24
    43fe:	90 e0       	ldi	r25, 0x00	; 0
    4400:	fc 01       	movw	r30, r24
    4402:	ef 55       	subi	r30, 0x5F	; 95
    4404:	fd 4f       	sbci	r31, 0xFD	; 253
    4406:	90 81       	ld	r25, Z
    4408:	83 e0       	ldi	r24, 0x03	; 3
    440a:	69 2f       	mov	r22, r25
    440c:	0e 94 78 15 	call	0x2af0	; 0x2af0 <DIO_voidSetPortValue>
    4410:	56 c0       	rjmp	.+172    	; 0x44be <SEGMENT_voidPrintNumber+0x184>
                                    default    :                                                                    break;
                                }
                                break;
        case COMMON_CATHODE :   switch(Copy_u8PortNumber)
    4412:	89 81       	ldd	r24, Y+1	; 0x01
    4414:	28 2f       	mov	r18, r24
    4416:	30 e0       	ldi	r19, 0x00	; 0
    4418:	3d 83       	std	Y+5, r19	; 0x05
    441a:	2c 83       	std	Y+4, r18	; 0x04
    441c:	8c 81       	ldd	r24, Y+4	; 0x04
    441e:	9d 81       	ldd	r25, Y+5	; 0x05
    4420:	81 30       	cpi	r24, 0x01	; 1
    4422:	91 05       	cpc	r25, r1
    4424:	19 f1       	breq	.+70     	; 0x446c <SEGMENT_voidPrintNumber+0x132>
    4426:	2c 81       	ldd	r18, Y+4	; 0x04
    4428:	3d 81       	ldd	r19, Y+5	; 0x05
    442a:	22 30       	cpi	r18, 0x02	; 2
    442c:	31 05       	cpc	r19, r1
    442e:	2c f4       	brge	.+10     	; 0x443a <SEGMENT_voidPrintNumber+0x100>
    4430:	8c 81       	ldd	r24, Y+4	; 0x04
    4432:	9d 81       	ldd	r25, Y+5	; 0x05
    4434:	00 97       	sbiw	r24, 0x00	; 0
    4436:	61 f0       	breq	.+24     	; 0x4450 <SEGMENT_voidPrintNumber+0x116>
    4438:	42 c0       	rjmp	.+132    	; 0x44be <SEGMENT_voidPrintNumber+0x184>
    443a:	2c 81       	ldd	r18, Y+4	; 0x04
    443c:	3d 81       	ldd	r19, Y+5	; 0x05
    443e:	22 30       	cpi	r18, 0x02	; 2
    4440:	31 05       	cpc	r19, r1
    4442:	11 f1       	breq	.+68     	; 0x4488 <SEGMENT_voidPrintNumber+0x14e>
    4444:	8c 81       	ldd	r24, Y+4	; 0x04
    4446:	9d 81       	ldd	r25, Y+5	; 0x05
    4448:	83 30       	cpi	r24, 0x03	; 3
    444a:	91 05       	cpc	r25, r1
    444c:	59 f1       	breq	.+86     	; 0x44a4 <SEGMENT_voidPrintNumber+0x16a>
    444e:	37 c0       	rjmp	.+110    	; 0x44be <SEGMENT_voidPrintNumber+0x184>
                                {
                                    case PORTA :   DIO_voidSetPortValue (PORTA,~Common_Anode_Arr[Copy_u8Number]);    break;
    4450:	8b 81       	ldd	r24, Y+3	; 0x03
    4452:	88 2f       	mov	r24, r24
    4454:	90 e0       	ldi	r25, 0x00	; 0
    4456:	fc 01       	movw	r30, r24
    4458:	ef 55       	subi	r30, 0x5F	; 95
    445a:	fd 4f       	sbci	r31, 0xFD	; 253
    445c:	80 81       	ld	r24, Z
    445e:	98 2f       	mov	r25, r24
    4460:	90 95       	com	r25
    4462:	80 e0       	ldi	r24, 0x00	; 0
    4464:	69 2f       	mov	r22, r25
    4466:	0e 94 78 15 	call	0x2af0	; 0x2af0 <DIO_voidSetPortValue>
    446a:	29 c0       	rjmp	.+82     	; 0x44be <SEGMENT_voidPrintNumber+0x184>
                                    case PORTB :   DIO_voidSetPortValue (PORTB,~Common_Anode_Arr[Copy_u8Number]);    break;
    446c:	8b 81       	ldd	r24, Y+3	; 0x03
    446e:	88 2f       	mov	r24, r24
    4470:	90 e0       	ldi	r25, 0x00	; 0
    4472:	fc 01       	movw	r30, r24
    4474:	ef 55       	subi	r30, 0x5F	; 95
    4476:	fd 4f       	sbci	r31, 0xFD	; 253
    4478:	80 81       	ld	r24, Z
    447a:	98 2f       	mov	r25, r24
    447c:	90 95       	com	r25
    447e:	81 e0       	ldi	r24, 0x01	; 1
    4480:	69 2f       	mov	r22, r25
    4482:	0e 94 78 15 	call	0x2af0	; 0x2af0 <DIO_voidSetPortValue>
    4486:	1b c0       	rjmp	.+54     	; 0x44be <SEGMENT_voidPrintNumber+0x184>
                                    case PORTC :   DIO_voidSetPortValue (PORTC,~Common_Anode_Arr[Copy_u8Number]);    break;
    4488:	8b 81       	ldd	r24, Y+3	; 0x03
    448a:	88 2f       	mov	r24, r24
    448c:	90 e0       	ldi	r25, 0x00	; 0
    448e:	fc 01       	movw	r30, r24
    4490:	ef 55       	subi	r30, 0x5F	; 95
    4492:	fd 4f       	sbci	r31, 0xFD	; 253
    4494:	80 81       	ld	r24, Z
    4496:	98 2f       	mov	r25, r24
    4498:	90 95       	com	r25
    449a:	82 e0       	ldi	r24, 0x02	; 2
    449c:	69 2f       	mov	r22, r25
    449e:	0e 94 78 15 	call	0x2af0	; 0x2af0 <DIO_voidSetPortValue>
    44a2:	0d c0       	rjmp	.+26     	; 0x44be <SEGMENT_voidPrintNumber+0x184>
                                    case PORTD :   DIO_voidSetPortValue (PORTD,~Common_Anode_Arr[Copy_u8Number]);    break;
    44a4:	8b 81       	ldd	r24, Y+3	; 0x03
    44a6:	88 2f       	mov	r24, r24
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	fc 01       	movw	r30, r24
    44ac:	ef 55       	subi	r30, 0x5F	; 95
    44ae:	fd 4f       	sbci	r31, 0xFD	; 253
    44b0:	80 81       	ld	r24, Z
    44b2:	98 2f       	mov	r25, r24
    44b4:	90 95       	com	r25
    44b6:	83 e0       	ldi	r24, 0x03	; 3
    44b8:	69 2f       	mov	r22, r25
    44ba:	0e 94 78 15 	call	0x2af0	; 0x2af0 <DIO_voidSetPortValue>
                                }   
                                break;
        default             :   break;
    }
    
}
    44be:	29 96       	adiw	r28, 0x09	; 9
    44c0:	0f b6       	in	r0, 0x3f	; 63
    44c2:	f8 94       	cli
    44c4:	de bf       	out	0x3e, r29	; 62
    44c6:	0f be       	out	0x3f, r0	; 63
    44c8:	cd bf       	out	0x3d, r28	; 61
    44ca:	cf 91       	pop	r28
    44cc:	df 91       	pop	r29
    44ce:	08 95       	ret

000044d0 <main>:
u8 Exit_EditPassFlag = 1 ;
u8 EEPROM_PASSWORD = 0 ;
u8 ModeKey = 0 ;
u8 User = 0 ;
int main()
{
    44d0:	df 93       	push	r29
    44d2:	cf 93       	push	r28
    44d4:	cd b7       	in	r28, 0x3d	; 61
    44d6:	de b7       	in	r29, 0x3e	; 62
    44d8:	a1 97       	sbiw	r28, 0x21	; 33
    44da:	0f b6       	in	r0, 0x3f	; 63
    44dc:	f8 94       	cli
    44de:	de bf       	out	0x3e, r29	; 62
    44e0:	0f be       	out	0x3f, r0	; 63
    44e2:	cd bf       	out	0x3d, r28	; 61
	/*===========================================*/
	/*======   APP EEPROM Set Passwords   =======*/
	I2C_voidMasterInit(0);
    44e4:	80 e0       	ldi	r24, 0x00	; 0
    44e6:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <I2C_voidMasterInit>
	EEPROM_voidSendDataByte(1,123);		// Osama Password
    44ea:	81 e0       	ldi	r24, 0x01	; 1
    44ec:	90 e0       	ldi	r25, 0x00	; 0
    44ee:	6b e7       	ldi	r22, 0x7B	; 123
    44f0:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <EEPROM_voidSendDataByte>
	EEPROM_voidSendDataByte(2,146);		// Ebraam Password
    44f4:	82 e0       	ldi	r24, 0x02	; 2
    44f6:	90 e0       	ldi	r25, 0x00	; 0
    44f8:	62 e9       	ldi	r22, 0x92	; 146
    44fa:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <EEPROM_voidSendDataByte>
	EEPROM_voidSendDataByte(3,121);		// Khaled Password
    44fe:	83 e0       	ldi	r24, 0x03	; 3
    4500:	90 e0       	ldi	r25, 0x00	; 0
    4502:	69 e7       	ldi	r22, 0x79	; 121
    4504:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <EEPROM_voidSendDataByte>
	EEPROM_voidSendDataByte(4,789);		// Ali Password
    4508:	84 e0       	ldi	r24, 0x04	; 4
    450a:	90 e0       	ldi	r25, 0x00	; 0
    450c:	65 e1       	ldi	r22, 0x15	; 21
    450e:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <EEPROM_voidSendDataByte>
	/*===========================================*/
	/*=========   APP Local Variables   =========*/
	u16 PASSWORD = 0 ;
    4512:	1f 8e       	std	Y+31, r1	; 0x1f
    4514:	1e 8e       	std	Y+30, r1	; 0x1e
	/*===========================================*/
	/*=========   APP Initializations   =========*/
	TIMER1_voidInit ();
    4516:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <TIMER1_voidInit>
	LCD_voidInit();
    451a:	0e 94 cd 1a 	call	0x359a	; 0x359a <LCD_voidInit>
	KPAD_voidInit();
    451e:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <KPAD_voidInit>
	USART_voidInit ();
    4522:	0e 94 a3 05 	call	0xb46	; 0xb46 <USART_voidInit>
	DIO_voidSetPinDirection(PORTD,PIN6,OUTPUT);  // Buzzer OUTPUT
    4526:	83 e0       	ldi	r24, 0x03	; 3
    4528:	66 e0       	ldi	r22, 0x06	; 6
    452a:	41 e0       	ldi	r20, 0x01	; 1
    452c:	0e 94 cf 12 	call	0x259e	; 0x259e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTD,PIN6,LOW);		 // Buzzer OFF
    4530:	83 e0       	ldi	r24, 0x03	; 3
    4532:	66 e0       	ldi	r22, 0x06	; 6
    4534:	40 e0       	ldi	r20, 0x00	; 0
    4536:	0e 94 68 14 	call	0x28d0	; 0x28d0 <DIO_voidSetPinValue>
	/*===========================================*/
	/*=========        APP Start        =========*/
	StartProgram_SMART_HOME();					 // MY LCD Start Program
    453a:	0e 94 b2 24 	call	0x4964	; 0x4964 <StartProgram_SMART_HOME>
	SelectUserName();							 // Select User
    453e:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <SelectUserName>
	LCD_voidClearLine(0);
    4542:	80 e0       	ldi	r24, 0x00	; 0
    4544:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	LCD_voidClearLine(1);
    4548:	81 e0       	ldi	r24, 0x01	; 1
    454a:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	LCD_voidGoTo_XY (0,0);
    454e:	80 e0       	ldi	r24, 0x00	; 0
    4550:	60 e0       	ldi	r22, 0x00	; 0
    4552:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	LCD_voidWriteString ("Enter Password :");
    4556:	80 e6       	ldi	r24, 0x60	; 96
    4558:	90 e0       	ldi	r25, 0x00	; 0
    455a:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
	LCD_voidGoTo_XY (1,13);
    455e:	81 e0       	ldi	r24, 0x01	; 1
    4560:	6d e0       	ldi	r22, 0x0D	; 13
    4562:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	LCD_voidWriteString ("[1]");
    4566:	81 e7       	ldi	r24, 0x71	; 113
    4568:	90 e0       	ldi	r25, 0x00	; 0
    456a:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
	while (1)
	{
		for ( u8 i=0 ; i < 3 ; i++ )
    456e:	1d 8e       	std	Y+29, r1	; 0x1d
    4570:	f4 c1       	rjmp	.+1000   	; 0x495a <main+0x48a>
		{
			PASSWORD = GetPassword();
    4572:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <GetPassword>
    4576:	9f 8f       	std	Y+31, r25	; 0x1f
    4578:	8e 8f       	std	Y+30, r24	; 0x1e
			if( PASSWORD == EEPROM_PASSWORD )
    457a:	80 91 e3 02 	lds	r24, 0x02E3
    457e:	28 2f       	mov	r18, r24
    4580:	30 e0       	ldi	r19, 0x00	; 0
    4582:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4584:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4586:	28 17       	cp	r18, r24
    4588:	39 07       	cpc	r19, r25
    458a:	09 f0       	breq	.+2      	; 0x458e <main+0xbe>
    458c:	99 c1       	rjmp	.+818    	; 0x48c0 <main+0x3f0>
			{
				USART_voidSendData('Z');
    458e:	8a e5       	ldi	r24, 0x5A	; 90
    4590:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
				LCD_voidClearLine(0);
    4594:	80 e0       	ldi	r24, 0x00	; 0
    4596:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
				LCD_voidClearLine(1);
    459a:	81 e0       	ldi	r24, 0x01	; 1
    459c:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
				OpenDoor();
    45a0:	0e 94 c8 2b 	call	0x5790	; 0x5790 <OpenDoor>
				LCD_voidGoTo_XY (0,1);
    45a4:	80 e0       	ldi	r24, 0x00	; 0
    45a6:	61 e0       	ldi	r22, 0x01	; 1
    45a8:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
				LCD_voidWriteString ("Door is OPened");
    45ac:	85 e7       	ldi	r24, 0x75	; 117
    45ae:	90 e0       	ldi	r25, 0x00	; 0
    45b0:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
				LCD_voidGoTo_XY (1,3);
    45b4:	81 e0       	ldi	r24, 0x01	; 1
    45b6:	63 e0       	ldi	r22, 0x03	; 3
    45b8:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
				LCD_voidWriteString ("Welcome..");
    45bc:	84 e8       	ldi	r24, 0x84	; 132
    45be:	90 e0       	ldi	r25, 0x00	; 0
    45c0:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
    45c4:	80 e0       	ldi	r24, 0x00	; 0
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	aa e7       	ldi	r26, 0x7A	; 122
    45ca:	b4 e4       	ldi	r27, 0x44	; 68
    45cc:	89 8f       	std	Y+25, r24	; 0x19
    45ce:	9a 8f       	std	Y+26, r25	; 0x1a
    45d0:	ab 8f       	std	Y+27, r26	; 0x1b
    45d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45d4:	69 8d       	ldd	r22, Y+25	; 0x19
    45d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45dc:	20 e0       	ldi	r18, 0x00	; 0
    45de:	30 e0       	ldi	r19, 0x00	; 0
    45e0:	4a ef       	ldi	r20, 0xFA	; 250
    45e2:	54 e4       	ldi	r21, 0x44	; 68
    45e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45e8:	dc 01       	movw	r26, r24
    45ea:	cb 01       	movw	r24, r22
    45ec:	8d 8b       	std	Y+21, r24	; 0x15
    45ee:	9e 8b       	std	Y+22, r25	; 0x16
    45f0:	af 8b       	std	Y+23, r26	; 0x17
    45f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    45f4:	6d 89       	ldd	r22, Y+21	; 0x15
    45f6:	7e 89       	ldd	r23, Y+22	; 0x16
    45f8:	8f 89       	ldd	r24, Y+23	; 0x17
    45fa:	98 8d       	ldd	r25, Y+24	; 0x18
    45fc:	20 e0       	ldi	r18, 0x00	; 0
    45fe:	30 e0       	ldi	r19, 0x00	; 0
    4600:	40 e8       	ldi	r20, 0x80	; 128
    4602:	5f e3       	ldi	r21, 0x3F	; 63
    4604:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4608:	88 23       	and	r24, r24
    460a:	2c f4       	brge	.+10     	; 0x4616 <main+0x146>
		__ticks = 1;
    460c:	81 e0       	ldi	r24, 0x01	; 1
    460e:	90 e0       	ldi	r25, 0x00	; 0
    4610:	9c 8b       	std	Y+20, r25	; 0x14
    4612:	8b 8b       	std	Y+19, r24	; 0x13
    4614:	3f c0       	rjmp	.+126    	; 0x4694 <main+0x1c4>
	else if (__tmp > 65535)
    4616:	6d 89       	ldd	r22, Y+21	; 0x15
    4618:	7e 89       	ldd	r23, Y+22	; 0x16
    461a:	8f 89       	ldd	r24, Y+23	; 0x17
    461c:	98 8d       	ldd	r25, Y+24	; 0x18
    461e:	20 e0       	ldi	r18, 0x00	; 0
    4620:	3f ef       	ldi	r19, 0xFF	; 255
    4622:	4f e7       	ldi	r20, 0x7F	; 127
    4624:	57 e4       	ldi	r21, 0x47	; 71
    4626:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    462a:	18 16       	cp	r1, r24
    462c:	4c f5       	brge	.+82     	; 0x4680 <main+0x1b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    462e:	69 8d       	ldd	r22, Y+25	; 0x19
    4630:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4632:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4634:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4636:	20 e0       	ldi	r18, 0x00	; 0
    4638:	30 e0       	ldi	r19, 0x00	; 0
    463a:	40 e2       	ldi	r20, 0x20	; 32
    463c:	51 e4       	ldi	r21, 0x41	; 65
    463e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4642:	dc 01       	movw	r26, r24
    4644:	cb 01       	movw	r24, r22
    4646:	bc 01       	movw	r22, r24
    4648:	cd 01       	movw	r24, r26
    464a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    464e:	dc 01       	movw	r26, r24
    4650:	cb 01       	movw	r24, r22
    4652:	9c 8b       	std	Y+20, r25	; 0x14
    4654:	8b 8b       	std	Y+19, r24	; 0x13
    4656:	0f c0       	rjmp	.+30     	; 0x4676 <main+0x1a6>
    4658:	88 ec       	ldi	r24, 0xC8	; 200
    465a:	90 e0       	ldi	r25, 0x00	; 0
    465c:	9a 8b       	std	Y+18, r25	; 0x12
    465e:	89 8b       	std	Y+17, r24	; 0x11
    4660:	89 89       	ldd	r24, Y+17	; 0x11
    4662:	9a 89       	ldd	r25, Y+18	; 0x12
    4664:	01 97       	sbiw	r24, 0x01	; 1
    4666:	f1 f7       	brne	.-4      	; 0x4664 <main+0x194>
    4668:	9a 8b       	std	Y+18, r25	; 0x12
    466a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    466c:	8b 89       	ldd	r24, Y+19	; 0x13
    466e:	9c 89       	ldd	r25, Y+20	; 0x14
    4670:	01 97       	sbiw	r24, 0x01	; 1
    4672:	9c 8b       	std	Y+20, r25	; 0x14
    4674:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4676:	8b 89       	ldd	r24, Y+19	; 0x13
    4678:	9c 89       	ldd	r25, Y+20	; 0x14
    467a:	00 97       	sbiw	r24, 0x00	; 0
    467c:	69 f7       	brne	.-38     	; 0x4658 <main+0x188>
    467e:	14 c0       	rjmp	.+40     	; 0x46a8 <main+0x1d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4680:	6d 89       	ldd	r22, Y+21	; 0x15
    4682:	7e 89       	ldd	r23, Y+22	; 0x16
    4684:	8f 89       	ldd	r24, Y+23	; 0x17
    4686:	98 8d       	ldd	r25, Y+24	; 0x18
    4688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    468c:	dc 01       	movw	r26, r24
    468e:	cb 01       	movw	r24, r22
    4690:	9c 8b       	std	Y+20, r25	; 0x14
    4692:	8b 8b       	std	Y+19, r24	; 0x13
    4694:	8b 89       	ldd	r24, Y+19	; 0x13
    4696:	9c 89       	ldd	r25, Y+20	; 0x14
    4698:	98 8b       	std	Y+16, r25	; 0x10
    469a:	8f 87       	std	Y+15, r24	; 0x0f
    469c:	8f 85       	ldd	r24, Y+15	; 0x0f
    469e:	98 89       	ldd	r25, Y+16	; 0x10
    46a0:	01 97       	sbiw	r24, 0x01	; 1
    46a2:	f1 f7       	brne	.-4      	; 0x46a0 <main+0x1d0>
    46a4:	98 8b       	std	Y+16, r25	; 0x10
    46a6:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1000);

				while(1)
				{
					if ( Exit_EditPassFlag == 0 )
    46a8:	80 91 ab 02 	lds	r24, 0x02AB
    46ac:	88 23       	and	r24, r24
    46ae:	09 f0       	breq	.+2      	; 0x46b2 <main+0x1e2>
    46b0:	d8 c0       	rjmp	.+432    	; 0x4862 <main+0x392>
					{
						LCD_voidClearLine(0);
    46b2:	80 e0       	ldi	r24, 0x00	; 0
    46b4:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
						LCD_voidClearLine(1);
    46b8:	81 e0       	ldi	r24, 0x01	; 1
    46ba:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
						LCD_voidGoTo_XY (0,0);
    46be:	80 e0       	ldi	r24, 0x00	; 0
    46c0:	60 e0       	ldi	r22, 0x00	; 0
    46c2:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
						LCD_voidWriteString ("Session Expire!!");
    46c6:	8e e8       	ldi	r24, 0x8E	; 142
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
    46ce:	80 e0       	ldi	r24, 0x00	; 0
    46d0:	90 e0       	ldi	r25, 0x00	; 0
    46d2:	af e2       	ldi	r26, 0x2F	; 47
    46d4:	b4 e4       	ldi	r27, 0x44	; 68
    46d6:	8b 87       	std	Y+11, r24	; 0x0b
    46d8:	9c 87       	std	Y+12, r25	; 0x0c
    46da:	ad 87       	std	Y+13, r26	; 0x0d
    46dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46de:	6b 85       	ldd	r22, Y+11	; 0x0b
    46e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    46e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    46e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    46e6:	20 e0       	ldi	r18, 0x00	; 0
    46e8:	30 e0       	ldi	r19, 0x00	; 0
    46ea:	4a ef       	ldi	r20, 0xFA	; 250
    46ec:	54 e4       	ldi	r21, 0x44	; 68
    46ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46f2:	dc 01       	movw	r26, r24
    46f4:	cb 01       	movw	r24, r22
    46f6:	8f 83       	std	Y+7, r24	; 0x07
    46f8:	98 87       	std	Y+8, r25	; 0x08
    46fa:	a9 87       	std	Y+9, r26	; 0x09
    46fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    46fe:	6f 81       	ldd	r22, Y+7	; 0x07
    4700:	78 85       	ldd	r23, Y+8	; 0x08
    4702:	89 85       	ldd	r24, Y+9	; 0x09
    4704:	9a 85       	ldd	r25, Y+10	; 0x0a
    4706:	20 e0       	ldi	r18, 0x00	; 0
    4708:	30 e0       	ldi	r19, 0x00	; 0
    470a:	40 e8       	ldi	r20, 0x80	; 128
    470c:	5f e3       	ldi	r21, 0x3F	; 63
    470e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4712:	88 23       	and	r24, r24
    4714:	2c f4       	brge	.+10     	; 0x4720 <main+0x250>
		__ticks = 1;
    4716:	81 e0       	ldi	r24, 0x01	; 1
    4718:	90 e0       	ldi	r25, 0x00	; 0
    471a:	9e 83       	std	Y+6, r25	; 0x06
    471c:	8d 83       	std	Y+5, r24	; 0x05
    471e:	3f c0       	rjmp	.+126    	; 0x479e <main+0x2ce>
	else if (__tmp > 65535)
    4720:	6f 81       	ldd	r22, Y+7	; 0x07
    4722:	78 85       	ldd	r23, Y+8	; 0x08
    4724:	89 85       	ldd	r24, Y+9	; 0x09
    4726:	9a 85       	ldd	r25, Y+10	; 0x0a
    4728:	20 e0       	ldi	r18, 0x00	; 0
    472a:	3f ef       	ldi	r19, 0xFF	; 255
    472c:	4f e7       	ldi	r20, 0x7F	; 127
    472e:	57 e4       	ldi	r21, 0x47	; 71
    4730:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4734:	18 16       	cp	r1, r24
    4736:	4c f5       	brge	.+82     	; 0x478a <main+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4738:	6b 85       	ldd	r22, Y+11	; 0x0b
    473a:	7c 85       	ldd	r23, Y+12	; 0x0c
    473c:	8d 85       	ldd	r24, Y+13	; 0x0d
    473e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4740:	20 e0       	ldi	r18, 0x00	; 0
    4742:	30 e0       	ldi	r19, 0x00	; 0
    4744:	40 e2       	ldi	r20, 0x20	; 32
    4746:	51 e4       	ldi	r21, 0x41	; 65
    4748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    474c:	dc 01       	movw	r26, r24
    474e:	cb 01       	movw	r24, r22
    4750:	bc 01       	movw	r22, r24
    4752:	cd 01       	movw	r24, r26
    4754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4758:	dc 01       	movw	r26, r24
    475a:	cb 01       	movw	r24, r22
    475c:	9e 83       	std	Y+6, r25	; 0x06
    475e:	8d 83       	std	Y+5, r24	; 0x05
    4760:	0f c0       	rjmp	.+30     	; 0x4780 <main+0x2b0>
    4762:	88 ec       	ldi	r24, 0xC8	; 200
    4764:	90 e0       	ldi	r25, 0x00	; 0
    4766:	9c 83       	std	Y+4, r25	; 0x04
    4768:	8b 83       	std	Y+3, r24	; 0x03
    476a:	8b 81       	ldd	r24, Y+3	; 0x03
    476c:	9c 81       	ldd	r25, Y+4	; 0x04
    476e:	01 97       	sbiw	r24, 0x01	; 1
    4770:	f1 f7       	brne	.-4      	; 0x476e <main+0x29e>
    4772:	9c 83       	std	Y+4, r25	; 0x04
    4774:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4776:	8d 81       	ldd	r24, Y+5	; 0x05
    4778:	9e 81       	ldd	r25, Y+6	; 0x06
    477a:	01 97       	sbiw	r24, 0x01	; 1
    477c:	9e 83       	std	Y+6, r25	; 0x06
    477e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4780:	8d 81       	ldd	r24, Y+5	; 0x05
    4782:	9e 81       	ldd	r25, Y+6	; 0x06
    4784:	00 97       	sbiw	r24, 0x00	; 0
    4786:	69 f7       	brne	.-38     	; 0x4762 <main+0x292>
    4788:	14 c0       	rjmp	.+40     	; 0x47b2 <main+0x2e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    478a:	6f 81       	ldd	r22, Y+7	; 0x07
    478c:	78 85       	ldd	r23, Y+8	; 0x08
    478e:	89 85       	ldd	r24, Y+9	; 0x09
    4790:	9a 85       	ldd	r25, Y+10	; 0x0a
    4792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4796:	dc 01       	movw	r26, r24
    4798:	cb 01       	movw	r24, r22
    479a:	9e 83       	std	Y+6, r25	; 0x06
    479c:	8d 83       	std	Y+5, r24	; 0x05
    479e:	8d 81       	ldd	r24, Y+5	; 0x05
    47a0:	9e 81       	ldd	r25, Y+6	; 0x06
    47a2:	9a 83       	std	Y+2, r25	; 0x02
    47a4:	89 83       	std	Y+1, r24	; 0x01
    47a6:	89 81       	ldd	r24, Y+1	; 0x01
    47a8:	9a 81       	ldd	r25, Y+2	; 0x02
    47aa:	01 97       	sbiw	r24, 0x01	; 1
    47ac:	f1 f7       	brne	.-4      	; 0x47aa <main+0x2da>
    47ae:	9a 83       	std	Y+2, r25	; 0x02
    47b0:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(700);
						LCD_voidClearLine(0);
    47b2:	80 e0       	ldi	r24, 0x00	; 0
    47b4:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
						LCD_voidClearLine(1);
    47b8:	81 e0       	ldi	r24, 0x01	; 1
    47ba:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
						LCD_voidGoTo_XY (0,0);
    47be:	80 e0       	ldi	r24, 0x00	; 0
    47c0:	60 e0       	ldi	r22, 0x00	; 0
    47c2:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
						LCD_voidWriteString ("Enter Password :");
    47c6:	80 e6       	ldi	r24, 0x60	; 96
    47c8:	90 e0       	ldi	r25, 0x00	; 0
    47ca:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
						LCD_voidGoTo_XY (1,13);
    47ce:	81 e0       	ldi	r24, 0x01	; 1
    47d0:	6d e0       	ldi	r22, 0x0D	; 13
    47d2:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
						LCD_voidWriteString ("[1]");
    47d6:	81 e7       	ldi	r24, 0x71	; 113
    47d8:	90 e0       	ldi	r25, 0x00	; 0
    47da:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
						i = -1 ;
    47de:	8f ef       	ldi	r24, 0xFF	; 255
    47e0:	8d 8f       	std	Y+29, r24	; 0x1d
						Exit_EditPassFlag = 1 ;
    47e2:	81 e0       	ldi	r24, 0x01	; 1
    47e4:	80 93 ab 02 	sts	0x02AB, r24
						switch(User)
    47e8:	80 91 e5 02 	lds	r24, 0x02E5
    47ec:	28 2f       	mov	r18, r24
    47ee:	30 e0       	ldi	r19, 0x00	; 0
    47f0:	39 a3       	std	Y+33, r19	; 0x21
    47f2:	28 a3       	std	Y+32, r18	; 0x20
    47f4:	88 a1       	ldd	r24, Y+32	; 0x20
    47f6:	99 a1       	ldd	r25, Y+33	; 0x21
    47f8:	82 30       	cpi	r24, 0x02	; 2
    47fa:	91 05       	cpc	r25, r1
    47fc:	e9 f0       	breq	.+58     	; 0x4838 <main+0x368>
    47fe:	28 a1       	ldd	r18, Y+32	; 0x20
    4800:	39 a1       	ldd	r19, Y+33	; 0x21
    4802:	23 30       	cpi	r18, 0x03	; 3
    4804:	31 05       	cpc	r19, r1
    4806:	34 f4       	brge	.+12     	; 0x4814 <main+0x344>
    4808:	88 a1       	ldd	r24, Y+32	; 0x20
    480a:	99 a1       	ldd	r25, Y+33	; 0x21
    480c:	81 30       	cpi	r24, 0x01	; 1
    480e:	91 05       	cpc	r25, r1
    4810:	61 f0       	breq	.+24     	; 0x482a <main+0x35a>
    4812:	a0 c0       	rjmp	.+320    	; 0x4954 <main+0x484>
    4814:	28 a1       	ldd	r18, Y+32	; 0x20
    4816:	39 a1       	ldd	r19, Y+33	; 0x21
    4818:	23 30       	cpi	r18, 0x03	; 3
    481a:	31 05       	cpc	r19, r1
    481c:	a1 f0       	breq	.+40     	; 0x4846 <main+0x376>
    481e:	88 a1       	ldd	r24, Y+32	; 0x20
    4820:	99 a1       	ldd	r25, Y+33	; 0x21
    4822:	84 30       	cpi	r24, 0x04	; 4
    4824:	91 05       	cpc	r25, r1
    4826:	b1 f0       	breq	.+44     	; 0x4854 <main+0x384>
    4828:	95 c0       	rjmp	.+298    	; 0x4954 <main+0x484>
						{
							case 1 :	 	EEPROM_PASSWORD = EEPROM_voidReadDataByte(1);	break;
    482a:	81 e0       	ldi	r24, 0x01	; 1
    482c:	90 e0       	ldi	r25, 0x00	; 0
    482e:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <EEPROM_voidReadDataByte>
    4832:	80 93 e3 02 	sts	0x02E3, r24
    4836:	8e c0       	rjmp	.+284    	; 0x4954 <main+0x484>
							case 2 : 		EEPROM_PASSWORD = EEPROM_voidReadDataByte(2);	break;
    4838:	82 e0       	ldi	r24, 0x02	; 2
    483a:	90 e0       	ldi	r25, 0x00	; 0
    483c:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <EEPROM_voidReadDataByte>
    4840:	80 93 e3 02 	sts	0x02E3, r24
    4844:	87 c0       	rjmp	.+270    	; 0x4954 <main+0x484>
							case 3 : 		EEPROM_PASSWORD = EEPROM_voidReadDataByte(3);	break;
    4846:	83 e0       	ldi	r24, 0x03	; 3
    4848:	90 e0       	ldi	r25, 0x00	; 0
    484a:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <EEPROM_voidReadDataByte>
    484e:	80 93 e3 02 	sts	0x02E3, r24
    4852:	80 c0       	rjmp	.+256    	; 0x4954 <main+0x484>
							case 4 : 		EEPROM_PASSWORD = EEPROM_voidReadDataByte(4);	break;
    4854:	84 e0       	ldi	r24, 0x04	; 4
    4856:	90 e0       	ldi	r25, 0x00	; 0
    4858:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <EEPROM_voidReadDataByte>
    485c:	80 93 e3 02 	sts	0x02E3, r24
    4860:	79 c0       	rjmp	.+242    	; 0x4954 <main+0x484>
							default  :														break;
						}
						break ;
					}
					LCD_voidGoTo_XY (0,0);
    4862:	80 e0       	ldi	r24, 0x00	; 0
    4864:	60 e0       	ldi	r22, 0x00	; 0
    4866:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
					LCD_voidWriteString ("1-Manual  2-Auto");
    486a:	8f e9       	ldi	r24, 0x9F	; 159
    486c:	90 e0       	ldi	r25, 0x00	; 0
    486e:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
					LCD_voidGoTo_XY (1,0);
    4872:	81 e0       	ldi	r24, 0x01	; 1
    4874:	60 e0       	ldi	r22, 0x00	; 0
    4876:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
					LCD_voidWriteString ("3-Edit Password");
    487a:	80 eb       	ldi	r24, 0xB0	; 176
    487c:	90 e0       	ldi	r25, 0x00	; 0
    487e:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
					ModeKey = KPAD_u8GetPressedKey ();
    4882:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <KPAD_u8GetPressedKey>
    4886:	80 93 e4 02 	sts	0x02E4, r24
					if ( ModeKey != 0xff  )
    488a:	80 91 e4 02 	lds	r24, 0x02E4
    488e:	8f 3f       	cpi	r24, 0xFF	; 255
    4890:	09 f4       	brne	.+2      	; 0x4894 <main+0x3c4>
    4892:	0a cf       	rjmp	.-492    	; 0x46a8 <main+0x1d8>
					{
						if( ModeKey == '1' )
    4894:	80 91 e4 02 	lds	r24, 0x02E4
    4898:	81 33       	cpi	r24, 0x31	; 49
    489a:	19 f4       	brne	.+6      	; 0x48a2 <main+0x3d2>
						{	SmartHome_ManualMode();		}
    489c:	0e 94 a8 28 	call	0x5150	; 0x5150 <SmartHome_ManualMode>
    48a0:	03 cf       	rjmp	.-506    	; 0x46a8 <main+0x1d8>

						else if ( ModeKey == '2' )
    48a2:	80 91 e4 02 	lds	r24, 0x02E4
    48a6:	82 33       	cpi	r24, 0x32	; 50
    48a8:	19 f4       	brne	.+6      	; 0x48b0 <main+0x3e0>
						{	SmartHome_AutoMode();		}
    48aa:	0e 94 05 2a 	call	0x540a	; 0x540a <SmartHome_AutoMode>
    48ae:	fc ce       	rjmp	.-520    	; 0x46a8 <main+0x1d8>
						else if ( ModeKey == '3' )
    48b0:	80 91 e4 02 	lds	r24, 0x02E4
    48b4:	83 33       	cpi	r24, 0x33	; 51
    48b6:	09 f0       	breq	.+2      	; 0x48ba <main+0x3ea>
    48b8:	f7 ce       	rjmp	.-530    	; 0x46a8 <main+0x1d8>
						{	EditPassword();	 		    }
    48ba:	0e 94 89 26 	call	0x4d12	; 0x4d12 <EditPassword>
    48be:	f4 ce       	rjmp	.-536    	; 0x46a8 <main+0x1d8>
					}
				}
			}
			else
			{
				if (i==2)
    48c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    48c2:	82 30       	cpi	r24, 0x02	; 2
    48c4:	09 f5       	brne	.+66     	; 0x4908 <main+0x438>
				{
					LCD_voidClearLine(0);
    48c6:	80 e0       	ldi	r24, 0x00	; 0
    48c8:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
					LCD_voidClearLine(1);
    48cc:	81 e0       	ldi	r24, 0x01	; 1
    48ce:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
					LCD_voidGoTo_XY (0,0);
    48d2:	80 e0       	ldi	r24, 0x00	; 0
    48d4:	60 e0       	ldi	r22, 0x00	; 0
    48d6:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
					LCD_voidWriteString ("You are thief!!");
    48da:	80 ec       	ldi	r24, 0xC0	; 192
    48dc:	90 e0       	ldi	r25, 0x00	; 0
    48de:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
					LCD_voidGoTo_XY (1,0);
    48e2:	81 e0       	ldi	r24, 0x01	; 1
    48e4:	60 e0       	ldi	r22, 0x00	; 0
    48e6:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
					LCD_voidWriteString ("Restart System..");
    48ea:	80 ed       	ldi	r24, 0xD0	; 208
    48ec:	90 e0       	ldi	r25, 0x00	; 0
    48ee:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
					USART_voidSendData('N');
    48f2:	8e e4       	ldi	r24, 0x4E	; 78
    48f4:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
					DIO_voidSetPinValue(PORTD,PIN6,HIGH);		// Buzzer ON
    48f8:	83 e0       	ldi	r24, 0x03	; 3
    48fa:	66 e0       	ldi	r22, 0x06	; 6
    48fc:	41 e0       	ldi	r20, 0x01	; 1
    48fe:	0e 94 68 14 	call	0x28d0	; 0x28d0 <DIO_voidSetPinValue>
					CloseDoor();
    4902:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <CloseDoor>
    4906:	33 ce       	rjmp	.-922    	; 0x456e <main+0x9e>
					break;
				}
				else
				{
					LCD_voidClearLine(0);
    4908:	80 e0       	ldi	r24, 0x00	; 0
    490a:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
					LCD_voidClearLine(1);
    490e:	81 e0       	ldi	r24, 0x01	; 1
    4910:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
					LCD_voidGoTo_XY (0,0);
    4914:	80 e0       	ldi	r24, 0x00	; 0
    4916:	60 e0       	ldi	r22, 0x00	; 0
    4918:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
					LCD_voidWriteString ("Try again..");
    491c:	81 ee       	ldi	r24, 0xE1	; 225
    491e:	90 e0       	ldi	r25, 0x00	; 0
    4920:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
					LCD_voidGoTo_XY (1,13);
    4924:	81 e0       	ldi	r24, 0x01	; 1
    4926:	6d e0       	ldi	r22, 0x0D	; 13
    4928:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
					LCD_voidWriteString ("[");
    492c:	8d ee       	ldi	r24, 0xED	; 237
    492e:	90 e0       	ldi	r25, 0x00	; 0
    4930:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
					LCD_voidWrite_u32Number(i+2);
    4934:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4936:	88 2f       	mov	r24, r24
    4938:	90 e0       	ldi	r25, 0x00	; 0
    493a:	02 96       	adiw	r24, 0x02	; 2
    493c:	aa 27       	eor	r26, r26
    493e:	97 fd       	sbrc	r25, 7
    4940:	a0 95       	com	r26
    4942:	ba 2f       	mov	r27, r26
    4944:	bc 01       	movw	r22, r24
    4946:	cd 01       	movw	r24, r26
    4948:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidWrite_u32Number>
					LCD_voidWriteString ("]");
    494c:	8f ee       	ldi	r24, 0xEF	; 239
    494e:	90 e0       	ldi	r25, 0x00	; 0
    4950:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
	LCD_voidWriteString ("Enter Password :");
	LCD_voidGoTo_XY (1,13);
	LCD_voidWriteString ("[1]");
	while (1)
	{
		for ( u8 i=0 ; i < 3 ; i++ )
    4954:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4956:	8f 5f       	subi	r24, 0xFF	; 255
    4958:	8d 8f       	std	Y+29, r24	; 0x1d
    495a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    495c:	83 30       	cpi	r24, 0x03	; 3
    495e:	08 f4       	brcc	.+2      	; 0x4962 <main+0x492>
    4960:	08 ce       	rjmp	.-1008   	; 0x4572 <main+0xa2>
    4962:	05 ce       	rjmp	.-1014   	; 0x456e <main+0x9e>

00004964 <StartProgram_SMART_HOME>:
		}
	}
}
/*=============================================================================*/
void StartProgram_SMART_HOME (void)
{
    4964:	df 93       	push	r29
    4966:	cf 93       	push	r28
    4968:	cd b7       	in	r28, 0x3d	; 61
    496a:	de b7       	in	r29, 0x3e	; 62
    496c:	6c 97       	sbiw	r28, 0x1c	; 28
    496e:	0f b6       	in	r0, 0x3f	; 63
    4970:	f8 94       	cli
    4972:	de bf       	out	0x3e, r29	; 62
    4974:	0f be       	out	0x3f, r0	; 63
    4976:	cd bf       	out	0x3d, r28	; 61
	LCD_voidGoTo_XY (0,0);
    4978:	80 e0       	ldi	r24, 0x00	; 0
    497a:	60 e0       	ldi	r22, 0x00	; 0
    497c:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	LCD_voidWriteString (" Osama / Ebraam ");
    4980:	81 ef       	ldi	r24, 0xF1	; 241
    4982:	90 e0       	ldi	r25, 0x00	; 0
    4984:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
	LCD_voidGoTo_XY (1,0);
    4988:	81 e0       	ldi	r24, 0x01	; 1
    498a:	60 e0       	ldi	r22, 0x00	; 0
    498c:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	LCD_voidWriteString ("Embedded System project");
    4990:	82 e0       	ldi	r24, 0x02	; 2
    4992:	91 e0       	ldi	r25, 0x01	; 1
    4994:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
    4998:	80 e0       	ldi	r24, 0x00	; 0
    499a:	90 e0       	ldi	r25, 0x00	; 0
    499c:	af e2       	ldi	r26, 0x2F	; 47
    499e:	b4 e4       	ldi	r27, 0x44	; 68
    49a0:	89 8f       	std	Y+25, r24	; 0x19
    49a2:	9a 8f       	std	Y+26, r25	; 0x1a
    49a4:	ab 8f       	std	Y+27, r26	; 0x1b
    49a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49a8:	69 8d       	ldd	r22, Y+25	; 0x19
    49aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    49ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    49ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    49b0:	20 e0       	ldi	r18, 0x00	; 0
    49b2:	30 e0       	ldi	r19, 0x00	; 0
    49b4:	4a ef       	ldi	r20, 0xFA	; 250
    49b6:	54 e4       	ldi	r21, 0x44	; 68
    49b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49bc:	dc 01       	movw	r26, r24
    49be:	cb 01       	movw	r24, r22
    49c0:	8d 8b       	std	Y+21, r24	; 0x15
    49c2:	9e 8b       	std	Y+22, r25	; 0x16
    49c4:	af 8b       	std	Y+23, r26	; 0x17
    49c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    49c8:	6d 89       	ldd	r22, Y+21	; 0x15
    49ca:	7e 89       	ldd	r23, Y+22	; 0x16
    49cc:	8f 89       	ldd	r24, Y+23	; 0x17
    49ce:	98 8d       	ldd	r25, Y+24	; 0x18
    49d0:	20 e0       	ldi	r18, 0x00	; 0
    49d2:	30 e0       	ldi	r19, 0x00	; 0
    49d4:	40 e8       	ldi	r20, 0x80	; 128
    49d6:	5f e3       	ldi	r21, 0x3F	; 63
    49d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    49dc:	88 23       	and	r24, r24
    49de:	2c f4       	brge	.+10     	; 0x49ea <StartProgram_SMART_HOME+0x86>
		__ticks = 1;
    49e0:	81 e0       	ldi	r24, 0x01	; 1
    49e2:	90 e0       	ldi	r25, 0x00	; 0
    49e4:	9c 8b       	std	Y+20, r25	; 0x14
    49e6:	8b 8b       	std	Y+19, r24	; 0x13
    49e8:	3f c0       	rjmp	.+126    	; 0x4a68 <StartProgram_SMART_HOME+0x104>
	else if (__tmp > 65535)
    49ea:	6d 89       	ldd	r22, Y+21	; 0x15
    49ec:	7e 89       	ldd	r23, Y+22	; 0x16
    49ee:	8f 89       	ldd	r24, Y+23	; 0x17
    49f0:	98 8d       	ldd	r25, Y+24	; 0x18
    49f2:	20 e0       	ldi	r18, 0x00	; 0
    49f4:	3f ef       	ldi	r19, 0xFF	; 255
    49f6:	4f e7       	ldi	r20, 0x7F	; 127
    49f8:	57 e4       	ldi	r21, 0x47	; 71
    49fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    49fe:	18 16       	cp	r1, r24
    4a00:	4c f5       	brge	.+82     	; 0x4a54 <StartProgram_SMART_HOME+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a02:	69 8d       	ldd	r22, Y+25	; 0x19
    4a04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a0a:	20 e0       	ldi	r18, 0x00	; 0
    4a0c:	30 e0       	ldi	r19, 0x00	; 0
    4a0e:	40 e2       	ldi	r20, 0x20	; 32
    4a10:	51 e4       	ldi	r21, 0x41	; 65
    4a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a16:	dc 01       	movw	r26, r24
    4a18:	cb 01       	movw	r24, r22
    4a1a:	bc 01       	movw	r22, r24
    4a1c:	cd 01       	movw	r24, r26
    4a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a22:	dc 01       	movw	r26, r24
    4a24:	cb 01       	movw	r24, r22
    4a26:	9c 8b       	std	Y+20, r25	; 0x14
    4a28:	8b 8b       	std	Y+19, r24	; 0x13
    4a2a:	0f c0       	rjmp	.+30     	; 0x4a4a <StartProgram_SMART_HOME+0xe6>
    4a2c:	88 ec       	ldi	r24, 0xC8	; 200
    4a2e:	90 e0       	ldi	r25, 0x00	; 0
    4a30:	9a 8b       	std	Y+18, r25	; 0x12
    4a32:	89 8b       	std	Y+17, r24	; 0x11
    4a34:	89 89       	ldd	r24, Y+17	; 0x11
    4a36:	9a 89       	ldd	r25, Y+18	; 0x12
    4a38:	01 97       	sbiw	r24, 0x01	; 1
    4a3a:	f1 f7       	brne	.-4      	; 0x4a38 <StartProgram_SMART_HOME+0xd4>
    4a3c:	9a 8b       	std	Y+18, r25	; 0x12
    4a3e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a40:	8b 89       	ldd	r24, Y+19	; 0x13
    4a42:	9c 89       	ldd	r25, Y+20	; 0x14
    4a44:	01 97       	sbiw	r24, 0x01	; 1
    4a46:	9c 8b       	std	Y+20, r25	; 0x14
    4a48:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a4a:	8b 89       	ldd	r24, Y+19	; 0x13
    4a4c:	9c 89       	ldd	r25, Y+20	; 0x14
    4a4e:	00 97       	sbiw	r24, 0x00	; 0
    4a50:	69 f7       	brne	.-38     	; 0x4a2c <StartProgram_SMART_HOME+0xc8>
    4a52:	14 c0       	rjmp	.+40     	; 0x4a7c <StartProgram_SMART_HOME+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a54:	6d 89       	ldd	r22, Y+21	; 0x15
    4a56:	7e 89       	ldd	r23, Y+22	; 0x16
    4a58:	8f 89       	ldd	r24, Y+23	; 0x17
    4a5a:	98 8d       	ldd	r25, Y+24	; 0x18
    4a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a60:	dc 01       	movw	r26, r24
    4a62:	cb 01       	movw	r24, r22
    4a64:	9c 8b       	std	Y+20, r25	; 0x14
    4a66:	8b 8b       	std	Y+19, r24	; 0x13
    4a68:	8b 89       	ldd	r24, Y+19	; 0x13
    4a6a:	9c 89       	ldd	r25, Y+20	; 0x14
    4a6c:	98 8b       	std	Y+16, r25	; 0x10
    4a6e:	8f 87       	std	Y+15, r24	; 0x0f
    4a70:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a72:	98 89       	ldd	r25, Y+16	; 0x10
    4a74:	01 97       	sbiw	r24, 0x01	; 1
    4a76:	f1 f7       	brne	.-4      	; 0x4a74 <StartProgram_SMART_HOME+0x110>
    4a78:	98 8b       	std	Y+16, r25	; 0x10
    4a7a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(700);
	LCD_voidClearLine(0);
    4a7c:	80 e0       	ldi	r24, 0x00	; 0
    4a7e:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	LCD_voidClearLine(1);
    4a82:	81 e0       	ldi	r24, 0x01	; 1
    4a84:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	LCD_voidGoTo_XY (0,1);
    4a88:	80 e0       	ldi	r24, 0x00	; 0
    4a8a:	61 e0       	ldi	r22, 0x01	; 1
    4a8c:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	LCD_voidWriteString (" Welcome To MY");
    4a90:	8a e1       	ldi	r24, 0x1A	; 26
    4a92:	91 e0       	ldi	r25, 0x01	; 1
    4a94:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
	LCD_voidGoTo_XY (1,0);
    4a98:	81 e0       	ldi	r24, 0x01	; 1
    4a9a:	60 e0       	ldi	r22, 0x00	; 0
    4a9c:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	LCD_voidWriteString ("  Smart Home :) ");
    4aa0:	89 e2       	ldi	r24, 0x29	; 41
    4aa2:	91 e0       	ldi	r25, 0x01	; 1
    4aa4:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
    4aa8:	80 e0       	ldi	r24, 0x00	; 0
    4aaa:	90 e0       	ldi	r25, 0x00	; 0
    4aac:	a6 e1       	ldi	r26, 0x16	; 22
    4aae:	b4 e4       	ldi	r27, 0x44	; 68
    4ab0:	8b 87       	std	Y+11, r24	; 0x0b
    4ab2:	9c 87       	std	Y+12, r25	; 0x0c
    4ab4:	ad 87       	std	Y+13, r26	; 0x0d
    4ab6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ab8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4aba:	7c 85       	ldd	r23, Y+12	; 0x0c
    4abc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4abe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ac0:	20 e0       	ldi	r18, 0x00	; 0
    4ac2:	30 e0       	ldi	r19, 0x00	; 0
    4ac4:	4a ef       	ldi	r20, 0xFA	; 250
    4ac6:	54 e4       	ldi	r21, 0x44	; 68
    4ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4acc:	dc 01       	movw	r26, r24
    4ace:	cb 01       	movw	r24, r22
    4ad0:	8f 83       	std	Y+7, r24	; 0x07
    4ad2:	98 87       	std	Y+8, r25	; 0x08
    4ad4:	a9 87       	std	Y+9, r26	; 0x09
    4ad6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4ad8:	6f 81       	ldd	r22, Y+7	; 0x07
    4ada:	78 85       	ldd	r23, Y+8	; 0x08
    4adc:	89 85       	ldd	r24, Y+9	; 0x09
    4ade:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ae0:	20 e0       	ldi	r18, 0x00	; 0
    4ae2:	30 e0       	ldi	r19, 0x00	; 0
    4ae4:	40 e8       	ldi	r20, 0x80	; 128
    4ae6:	5f e3       	ldi	r21, 0x3F	; 63
    4ae8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4aec:	88 23       	and	r24, r24
    4aee:	2c f4       	brge	.+10     	; 0x4afa <StartProgram_SMART_HOME+0x196>
		__ticks = 1;
    4af0:	81 e0       	ldi	r24, 0x01	; 1
    4af2:	90 e0       	ldi	r25, 0x00	; 0
    4af4:	9e 83       	std	Y+6, r25	; 0x06
    4af6:	8d 83       	std	Y+5, r24	; 0x05
    4af8:	3f c0       	rjmp	.+126    	; 0x4b78 <StartProgram_SMART_HOME+0x214>
	else if (__tmp > 65535)
    4afa:	6f 81       	ldd	r22, Y+7	; 0x07
    4afc:	78 85       	ldd	r23, Y+8	; 0x08
    4afe:	89 85       	ldd	r24, Y+9	; 0x09
    4b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b02:	20 e0       	ldi	r18, 0x00	; 0
    4b04:	3f ef       	ldi	r19, 0xFF	; 255
    4b06:	4f e7       	ldi	r20, 0x7F	; 127
    4b08:	57 e4       	ldi	r21, 0x47	; 71
    4b0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b0e:	18 16       	cp	r1, r24
    4b10:	4c f5       	brge	.+82     	; 0x4b64 <StartProgram_SMART_HOME+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b12:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b14:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b16:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b18:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b1a:	20 e0       	ldi	r18, 0x00	; 0
    4b1c:	30 e0       	ldi	r19, 0x00	; 0
    4b1e:	40 e2       	ldi	r20, 0x20	; 32
    4b20:	51 e4       	ldi	r21, 0x41	; 65
    4b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b26:	dc 01       	movw	r26, r24
    4b28:	cb 01       	movw	r24, r22
    4b2a:	bc 01       	movw	r22, r24
    4b2c:	cd 01       	movw	r24, r26
    4b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b32:	dc 01       	movw	r26, r24
    4b34:	cb 01       	movw	r24, r22
    4b36:	9e 83       	std	Y+6, r25	; 0x06
    4b38:	8d 83       	std	Y+5, r24	; 0x05
    4b3a:	0f c0       	rjmp	.+30     	; 0x4b5a <StartProgram_SMART_HOME+0x1f6>
    4b3c:	88 ec       	ldi	r24, 0xC8	; 200
    4b3e:	90 e0       	ldi	r25, 0x00	; 0
    4b40:	9c 83       	std	Y+4, r25	; 0x04
    4b42:	8b 83       	std	Y+3, r24	; 0x03
    4b44:	8b 81       	ldd	r24, Y+3	; 0x03
    4b46:	9c 81       	ldd	r25, Y+4	; 0x04
    4b48:	01 97       	sbiw	r24, 0x01	; 1
    4b4a:	f1 f7       	brne	.-4      	; 0x4b48 <StartProgram_SMART_HOME+0x1e4>
    4b4c:	9c 83       	std	Y+4, r25	; 0x04
    4b4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b50:	8d 81       	ldd	r24, Y+5	; 0x05
    4b52:	9e 81       	ldd	r25, Y+6	; 0x06
    4b54:	01 97       	sbiw	r24, 0x01	; 1
    4b56:	9e 83       	std	Y+6, r25	; 0x06
    4b58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    4b5c:	9e 81       	ldd	r25, Y+6	; 0x06
    4b5e:	00 97       	sbiw	r24, 0x00	; 0
    4b60:	69 f7       	brne	.-38     	; 0x4b3c <StartProgram_SMART_HOME+0x1d8>
    4b62:	14 c0       	rjmp	.+40     	; 0x4b8c <StartProgram_SMART_HOME+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b64:	6f 81       	ldd	r22, Y+7	; 0x07
    4b66:	78 85       	ldd	r23, Y+8	; 0x08
    4b68:	89 85       	ldd	r24, Y+9	; 0x09
    4b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b70:	dc 01       	movw	r26, r24
    4b72:	cb 01       	movw	r24, r22
    4b74:	9e 83       	std	Y+6, r25	; 0x06
    4b76:	8d 83       	std	Y+5, r24	; 0x05
    4b78:	8d 81       	ldd	r24, Y+5	; 0x05
    4b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    4b7c:	9a 83       	std	Y+2, r25	; 0x02
    4b7e:	89 83       	std	Y+1, r24	; 0x01
    4b80:	89 81       	ldd	r24, Y+1	; 0x01
    4b82:	9a 81       	ldd	r25, Y+2	; 0x02
    4b84:	01 97       	sbiw	r24, 0x01	; 1
    4b86:	f1 f7       	brne	.-4      	; 0x4b84 <StartProgram_SMART_HOME+0x220>
    4b88:	9a 83       	std	Y+2, r25	; 0x02
    4b8a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(600);
}
    4b8c:	6c 96       	adiw	r28, 0x1c	; 28
    4b8e:	0f b6       	in	r0, 0x3f	; 63
    4b90:	f8 94       	cli
    4b92:	de bf       	out	0x3e, r29	; 62
    4b94:	0f be       	out	0x3f, r0	; 63
    4b96:	cd bf       	out	0x3d, r28	; 61
    4b98:	cf 91       	pop	r28
    4b9a:	df 91       	pop	r29
    4b9c:	08 95       	ret

00004b9e <SelectUserName>:
/*=============================================================================*/
void SelectUserName (void)
{
    4b9e:	df 93       	push	r29
    4ba0:	cf 93       	push	r28
    4ba2:	00 d0       	rcall	.+0      	; 0x4ba4 <SelectUserName+0x6>
    4ba4:	0f 92       	push	r0
    4ba6:	cd b7       	in	r28, 0x3d	; 61
    4ba8:	de b7       	in	r29, 0x3e	; 62
	u8 UserKey = 0 ;
    4baa:	19 82       	std	Y+1, r1	; 0x01
	LCD_voidClearLine(0);
    4bac:	80 e0       	ldi	r24, 0x00	; 0
    4bae:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	LCD_voidClearLine(1);
    4bb2:	81 e0       	ldi	r24, 0x01	; 1
    4bb4:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	LCD_voidGoTo_XY (0,0);
    4bb8:	80 e0       	ldi	r24, 0x00	; 0
    4bba:	60 e0       	ldi	r22, 0x00	; 0
    4bbc:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	LCD_voidWriteString ("(1)Osama (2)Ebraam");
    4bc0:	8a e3       	ldi	r24, 0x3A	; 58
    4bc2:	91 e0       	ldi	r25, 0x01	; 1
    4bc4:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
	LCD_voidGoTo_XY (1,0);
    4bc8:	81 e0       	ldi	r24, 0x01	; 1
    4bca:	60 e0       	ldi	r22, 0x00	; 0
    4bcc:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	LCD_voidWriteString ("(3)Khaled (4)Ali");
    4bd0:	8d e4       	ldi	r24, 0x4D	; 77
    4bd2:	91 e0       	ldi	r25, 0x01	; 1
    4bd4:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
	while(1)
	{
		UserKey = KPAD_u8GetPressedKey ();
    4bd8:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <KPAD_u8GetPressedKey>
    4bdc:	89 83       	std	Y+1, r24	; 0x01
		if ( UserKey != 0xff  )
    4bde:	89 81       	ldd	r24, Y+1	; 0x01
    4be0:	8f 3f       	cpi	r24, 0xFF	; 255
    4be2:	09 f4       	brne	.+2      	; 0x4be6 <SelectUserName+0x48>
    4be4:	47 c0       	rjmp	.+142    	; 0x4c74 <SelectUserName+0xd6>
		{
			switch(UserKey)
    4be6:	89 81       	ldd	r24, Y+1	; 0x01
    4be8:	28 2f       	mov	r18, r24
    4bea:	30 e0       	ldi	r19, 0x00	; 0
    4bec:	3b 83       	std	Y+3, r19	; 0x03
    4bee:	2a 83       	std	Y+2, r18	; 0x02
    4bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    4bf2:	9b 81       	ldd	r25, Y+3	; 0x03
    4bf4:	82 33       	cpi	r24, 0x32	; 50
    4bf6:	91 05       	cpc	r25, r1
    4bf8:	01 f1       	breq	.+64     	; 0x4c3a <SelectUserName+0x9c>
    4bfa:	2a 81       	ldd	r18, Y+2	; 0x02
    4bfc:	3b 81       	ldd	r19, Y+3	; 0x03
    4bfe:	23 33       	cpi	r18, 0x33	; 51
    4c00:	31 05       	cpc	r19, r1
    4c02:	34 f4       	brge	.+12     	; 0x4c10 <SelectUserName+0x72>
    4c04:	8a 81       	ldd	r24, Y+2	; 0x02
    4c06:	9b 81       	ldd	r25, Y+3	; 0x03
    4c08:	81 33       	cpi	r24, 0x31	; 49
    4c0a:	91 05       	cpc	r25, r1
    4c0c:	61 f0       	breq	.+24     	; 0x4c26 <SelectUserName+0x88>
    4c0e:	32 c0       	rjmp	.+100    	; 0x4c74 <SelectUserName+0xd6>
    4c10:	2a 81       	ldd	r18, Y+2	; 0x02
    4c12:	3b 81       	ldd	r19, Y+3	; 0x03
    4c14:	23 33       	cpi	r18, 0x33	; 51
    4c16:	31 05       	cpc	r19, r1
    4c18:	d1 f0       	breq	.+52     	; 0x4c4e <SelectUserName+0xb0>
    4c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c1c:	9b 81       	ldd	r25, Y+3	; 0x03
    4c1e:	84 33       	cpi	r24, 0x34	; 52
    4c20:	91 05       	cpc	r25, r1
    4c22:	f9 f0       	breq	.+62     	; 0x4c62 <SelectUserName+0xc4>
    4c24:	27 c0       	rjmp	.+78     	; 0x4c74 <SelectUserName+0xd6>
			{
				case '1' :	User = 1 ; 	EEPROM_PASSWORD = EEPROM_voidReadDataByte(1);	break;
    4c26:	81 e0       	ldi	r24, 0x01	; 1
    4c28:	80 93 e5 02 	sts	0x02E5, r24
    4c2c:	81 e0       	ldi	r24, 0x01	; 1
    4c2e:	90 e0       	ldi	r25, 0x00	; 0
    4c30:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <EEPROM_voidReadDataByte>
    4c34:	80 93 e3 02 	sts	0x02E3, r24
    4c38:	1d c0       	rjmp	.+58     	; 0x4c74 <SelectUserName+0xd6>
				case '2' : 	User = 2 ;	EEPROM_PASSWORD = EEPROM_voidReadDataByte(2);	break;
    4c3a:	82 e0       	ldi	r24, 0x02	; 2
    4c3c:	80 93 e5 02 	sts	0x02E5, r24
    4c40:	82 e0       	ldi	r24, 0x02	; 2
    4c42:	90 e0       	ldi	r25, 0x00	; 0
    4c44:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <EEPROM_voidReadDataByte>
    4c48:	80 93 e3 02 	sts	0x02E3, r24
    4c4c:	13 c0       	rjmp	.+38     	; 0x4c74 <SelectUserName+0xd6>
				case '3' : 	User = 3 ;	EEPROM_PASSWORD = EEPROM_voidReadDataByte(3);	break;
    4c4e:	83 e0       	ldi	r24, 0x03	; 3
    4c50:	80 93 e5 02 	sts	0x02E5, r24
    4c54:	83 e0       	ldi	r24, 0x03	; 3
    4c56:	90 e0       	ldi	r25, 0x00	; 0
    4c58:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <EEPROM_voidReadDataByte>
    4c5c:	80 93 e3 02 	sts	0x02E3, r24
    4c60:	09 c0       	rjmp	.+18     	; 0x4c74 <SelectUserName+0xd6>
				case '4' : 	User = 4 ;	EEPROM_PASSWORD = EEPROM_voidReadDataByte(4);	break;
    4c62:	84 e0       	ldi	r24, 0x04	; 4
    4c64:	80 93 e5 02 	sts	0x02E5, r24
    4c68:	84 e0       	ldi	r24, 0x04	; 4
    4c6a:	90 e0       	ldi	r25, 0x00	; 0
    4c6c:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <EEPROM_voidReadDataByte>
    4c70:	80 93 e3 02 	sts	0x02E3, r24
				default  :														break;
			}
		}
		if( EEPROM_PASSWORD != 0 )
    4c74:	80 91 e3 02 	lds	r24, 0x02E3
    4c78:	88 23       	and	r24, r24
    4c7a:	09 f4       	brne	.+2      	; 0x4c7e <SelectUserName+0xe0>
    4c7c:	ad cf       	rjmp	.-166    	; 0x4bd8 <SelectUserName+0x3a>
			break;
	}
}
    4c7e:	0f 90       	pop	r0
    4c80:	0f 90       	pop	r0
    4c82:	0f 90       	pop	r0
    4c84:	cf 91       	pop	r28
    4c86:	df 91       	pop	r29
    4c88:	08 95       	ret

00004c8a <GetPassword>:
/*=============================================================================*/
u16 GetPassword (void)
{
    4c8a:	df 93       	push	r29
    4c8c:	cf 93       	push	r28
    4c8e:	00 d0       	rcall	.+0      	; 0x4c90 <GetPassword+0x6>
    4c90:	00 d0       	rcall	.+0      	; 0x4c92 <GetPassword+0x8>
    4c92:	0f 92       	push	r0
    4c94:	cd b7       	in	r28, 0x3d	; 61
    4c96:	de b7       	in	r29, 0x3e	; 62
	LCD_voidGoTo_XY (1,0);
    4c98:	81 e0       	ldi	r24, 0x01	; 1
    4c9a:	60 e0       	ldi	r22, 0x00	; 0
    4c9c:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	u16 Password = 0 ;
    4ca0:	1d 82       	std	Y+5, r1	; 0x05
    4ca2:	1c 82       	std	Y+4, r1	; 0x04
	u16 Copy_u8Temp = 0 ;
    4ca4:	1b 82       	std	Y+3, r1	; 0x03
    4ca6:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8PressedKey ;
	while(1)
	{
		Local_u8PressedKey = KPAD_u8GetPressedKey ();
    4ca8:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <KPAD_u8GetPressedKey>
    4cac:	89 83       	std	Y+1, r24	; 0x01
		if ( Local_u8PressedKey != 0xff  )
    4cae:	89 81       	ldd	r24, Y+1	; 0x01
    4cb0:	8f 3f       	cpi	r24, 0xFF	; 255
    4cb2:	d1 f3       	breq	.-12     	; 0x4ca8 <GetPassword+0x1e>
		{
			if( Local_u8PressedKey >= '0' && Local_u8PressedKey <= '9' )
    4cb4:	89 81       	ldd	r24, Y+1	; 0x01
    4cb6:	80 33       	cpi	r24, 0x30	; 48
    4cb8:	f8 f0       	brcs	.+62     	; 0x4cf8 <GetPassword+0x6e>
    4cba:	89 81       	ldd	r24, Y+1	; 0x01
    4cbc:	8a 33       	cpi	r24, 0x3A	; 58
    4cbe:	e0 f4       	brcc	.+56     	; 0x4cf8 <GetPassword+0x6e>
			{
				LCD_voidWriteChar('*');
    4cc0:	8a e2       	ldi	r24, 0x2A	; 42
    4cc2:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <LCD_voidWriteChar>
				Copy_u8Temp = Copy_u8Temp*10 + (Local_u8PressedKey - '0') ;
    4cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    4cc8:	9b 81       	ldd	r25, Y+3	; 0x03
    4cca:	9c 01       	movw	r18, r24
    4ccc:	22 0f       	add	r18, r18
    4cce:	33 1f       	adc	r19, r19
    4cd0:	c9 01       	movw	r24, r18
    4cd2:	88 0f       	add	r24, r24
    4cd4:	99 1f       	adc	r25, r25
    4cd6:	88 0f       	add	r24, r24
    4cd8:	99 1f       	adc	r25, r25
    4cda:	28 0f       	add	r18, r24
    4cdc:	39 1f       	adc	r19, r25
    4cde:	89 81       	ldd	r24, Y+1	; 0x01
    4ce0:	88 2f       	mov	r24, r24
    4ce2:	90 e0       	ldi	r25, 0x00	; 0
    4ce4:	82 0f       	add	r24, r18
    4ce6:	93 1f       	adc	r25, r19
    4ce8:	c0 97       	sbiw	r24, 0x30	; 48
    4cea:	9b 83       	std	Y+3, r25	; 0x03
    4cec:	8a 83       	std	Y+2, r24	; 0x02
				Password = Copy_u8Temp ;
    4cee:	8a 81       	ldd	r24, Y+2	; 0x02
    4cf0:	9b 81       	ldd	r25, Y+3	; 0x03
    4cf2:	9d 83       	std	Y+5, r25	; 0x05
    4cf4:	8c 83       	std	Y+4, r24	; 0x04
    4cf6:	d8 cf       	rjmp	.-80     	; 0x4ca8 <GetPassword+0x1e>
			}
			else if ( Local_u8PressedKey == '=' )
    4cf8:	89 81       	ldd	r24, Y+1	; 0x01
    4cfa:	8d 33       	cpi	r24, 0x3D	; 61
    4cfc:	a9 f6       	brne	.-86     	; 0x4ca8 <GetPassword+0x1e>
			{
				break ;
			}
		}
	}
	return Password ;
    4cfe:	8c 81       	ldd	r24, Y+4	; 0x04
    4d00:	9d 81       	ldd	r25, Y+5	; 0x05
}
    4d02:	0f 90       	pop	r0
    4d04:	0f 90       	pop	r0
    4d06:	0f 90       	pop	r0
    4d08:	0f 90       	pop	r0
    4d0a:	0f 90       	pop	r0
    4d0c:	cf 91       	pop	r28
    4d0e:	df 91       	pop	r29
    4d10:	08 95       	ret

00004d12 <EditPassword>:
/*=============================================================================*/
void EditPassword (void)
{
    4d12:	df 93       	push	r29
    4d14:	cf 93       	push	r28
    4d16:	cd b7       	in	r28, 0x3d	; 61
    4d18:	de b7       	in	r29, 0x3e	; 62
    4d1a:	af 97       	sbiw	r28, 0x2f	; 47
    4d1c:	0f b6       	in	r0, 0x3f	; 63
    4d1e:	f8 94       	cli
    4d20:	de bf       	out	0x3e, r29	; 62
    4d22:	0f be       	out	0x3f, r0	; 63
    4d24:	cd bf       	out	0x3d, r28	; 61
	u16 NewPassword_1 = 0 ;
    4d26:	1f a6       	std	Y+47, r1	; 0x2f
    4d28:	1e a6       	std	Y+46, r1	; 0x2e
	u16 NewPassword_2 = 0 ;
    4d2a:	1d a6       	std	Y+45, r1	; 0x2d
    4d2c:	1c a6       	std	Y+44, r1	; 0x2c
	u8 Counter = 0 ;
    4d2e:	1b a6       	std	Y+43, r1	; 0x2b
	LCD_voidClearLine(0);
    4d30:	80 e0       	ldi	r24, 0x00	; 0
    4d32:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	LCD_voidClearLine(1);
    4d36:	81 e0       	ldi	r24, 0x01	; 1
    4d38:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	LCD_voidGoTo_XY (0,0);
    4d3c:	80 e0       	ldi	r24, 0x00	; 0
    4d3e:	60 e0       	ldi	r22, 0x00	; 0
    4d40:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	LCD_voidWriteString ("New Password : ");
    4d44:	8e e5       	ldi	r24, 0x5E	; 94
    4d46:	91 e0       	ldi	r25, 0x01	; 1
    4d48:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
	NewPassword_1 = GetPassword();
    4d4c:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <GetPassword>
    4d50:	9f a7       	std	Y+47, r25	; 0x2f
    4d52:	8e a7       	std	Y+46, r24	; 0x2e
	LCD_voidClearLine(0);
    4d54:	80 e0       	ldi	r24, 0x00	; 0
    4d56:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	LCD_voidClearLine(1);
    4d5a:	81 e0       	ldi	r24, 0x01	; 1
    4d5c:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	LCD_voidGoTo_XY (0,0);
    4d60:	80 e0       	ldi	r24, 0x00	; 0
    4d62:	60 e0       	ldi	r22, 0x00	; 0
    4d64:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	LCD_voidWriteString ("Confirm New Pass ");
    4d68:	8e e6       	ldi	r24, 0x6E	; 110
    4d6a:	91 e0       	ldi	r25, 0x01	; 1
    4d6c:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
	LCD_voidGoTo_XY (1,13);
    4d70:	81 e0       	ldi	r24, 0x01	; 1
    4d72:	6d e0       	ldi	r22, 0x0D	; 13
    4d74:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	LCD_voidWriteString ("[1]");
    4d78:	81 e7       	ldi	r24, 0x71	; 113
    4d7a:	90 e0       	ldi	r25, 0x00	; 0
    4d7c:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
	NewPassword_2 = GetPassword();
    4d80:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <GetPassword>
    4d84:	9d a7       	std	Y+45, r25	; 0x2d
    4d86:	8c a7       	std	Y+44, r24	; 0x2c
	Counter = 0 ;
    4d88:	1b a6       	std	Y+43, r1	; 0x2b
	ModeKey = 0 ;
    4d8a:	10 92 e4 02 	sts	0x02E4, r1
    4d8e:	d3 c1       	rjmp	.+934    	; 0x5136 <EditPassword+0x424>
	while( Counter < 3)
	{
		if( NewPassword_2 == NewPassword_1 )
    4d90:	2c a5       	ldd	r18, Y+44	; 0x2c
    4d92:	3d a5       	ldd	r19, Y+45	; 0x2d
    4d94:	8e a5       	ldd	r24, Y+46	; 0x2e
    4d96:	9f a5       	ldd	r25, Y+47	; 0x2f
    4d98:	28 17       	cp	r18, r24
    4d9a:	39 07       	cpc	r19, r25
    4d9c:	09 f0       	breq	.+2      	; 0x4da0 <EditPassword+0x8e>
    4d9e:	94 c0       	rjmp	.+296    	; 0x4ec8 <EditPassword+0x1b6>
		{
			EEPROM_voidSendDataByte(User,NewPassword_2);
    4da0:	80 91 e5 02 	lds	r24, 0x02E5
    4da4:	88 2f       	mov	r24, r24
    4da6:	90 e0       	ldi	r25, 0x00	; 0
    4da8:	2c a5       	ldd	r18, Y+44	; 0x2c
    4daa:	62 2f       	mov	r22, r18
    4dac:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <EEPROM_voidSendDataByte>
			LCD_voidClearLine(0);
    4db0:	80 e0       	ldi	r24, 0x00	; 0
    4db2:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
			LCD_voidClearLine(1);
    4db6:	81 e0       	ldi	r24, 0x01	; 1
    4db8:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
			LCD_voidGoTo_XY (0,0);
    4dbc:	80 e0       	ldi	r24, 0x00	; 0
    4dbe:	60 e0       	ldi	r22, 0x00	; 0
    4dc0:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
			LCD_voidWriteString ("Done Successfully");
    4dc4:	80 e8       	ldi	r24, 0x80	; 128
    4dc6:	91 e0       	ldi	r25, 0x01	; 1
    4dc8:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
			LCD_voidGoTo_XY (1,0);
    4dcc:	81 e0       	ldi	r24, 0x01	; 1
    4dce:	60 e0       	ldi	r22, 0x00	; 0
    4dd0:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
			LCD_voidWriteString (" Is Updated...");
    4dd4:	82 e9       	ldi	r24, 0x92	; 146
    4dd6:	91 e0       	ldi	r25, 0x01	; 1
    4dd8:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
			Counter = 0 ;
    4ddc:	1b a6       	std	Y+43, r1	; 0x2b
			Exit_EditPassFlag = 0 ;
    4dde:	10 92 ab 02 	sts	0x02AB, r1
    4de2:	80 e0       	ldi	r24, 0x00	; 0
    4de4:	90 e0       	ldi	r25, 0x00	; 0
    4de6:	af e2       	ldi	r26, 0x2F	; 47
    4de8:	b4 e4       	ldi	r27, 0x44	; 68
    4dea:	8f a3       	std	Y+39, r24	; 0x27
    4dec:	98 a7       	std	Y+40, r25	; 0x28
    4dee:	a9 a7       	std	Y+41, r26	; 0x29
    4df0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4df2:	6f a1       	ldd	r22, Y+39	; 0x27
    4df4:	78 a5       	ldd	r23, Y+40	; 0x28
    4df6:	89 a5       	ldd	r24, Y+41	; 0x29
    4df8:	9a a5       	ldd	r25, Y+42	; 0x2a
    4dfa:	20 e0       	ldi	r18, 0x00	; 0
    4dfc:	30 e0       	ldi	r19, 0x00	; 0
    4dfe:	4a ef       	ldi	r20, 0xFA	; 250
    4e00:	54 e4       	ldi	r21, 0x44	; 68
    4e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e06:	dc 01       	movw	r26, r24
    4e08:	cb 01       	movw	r24, r22
    4e0a:	8b a3       	std	Y+35, r24	; 0x23
    4e0c:	9c a3       	std	Y+36, r25	; 0x24
    4e0e:	ad a3       	std	Y+37, r26	; 0x25
    4e10:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4e12:	6b a1       	ldd	r22, Y+35	; 0x23
    4e14:	7c a1       	ldd	r23, Y+36	; 0x24
    4e16:	8d a1       	ldd	r24, Y+37	; 0x25
    4e18:	9e a1       	ldd	r25, Y+38	; 0x26
    4e1a:	20 e0       	ldi	r18, 0x00	; 0
    4e1c:	30 e0       	ldi	r19, 0x00	; 0
    4e1e:	40 e8       	ldi	r20, 0x80	; 128
    4e20:	5f e3       	ldi	r21, 0x3F	; 63
    4e22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e26:	88 23       	and	r24, r24
    4e28:	2c f4       	brge	.+10     	; 0x4e34 <EditPassword+0x122>
		__ticks = 1;
    4e2a:	81 e0       	ldi	r24, 0x01	; 1
    4e2c:	90 e0       	ldi	r25, 0x00	; 0
    4e2e:	9a a3       	std	Y+34, r25	; 0x22
    4e30:	89 a3       	std	Y+33, r24	; 0x21
    4e32:	3f c0       	rjmp	.+126    	; 0x4eb2 <EditPassword+0x1a0>
	else if (__tmp > 65535)
    4e34:	6b a1       	ldd	r22, Y+35	; 0x23
    4e36:	7c a1       	ldd	r23, Y+36	; 0x24
    4e38:	8d a1       	ldd	r24, Y+37	; 0x25
    4e3a:	9e a1       	ldd	r25, Y+38	; 0x26
    4e3c:	20 e0       	ldi	r18, 0x00	; 0
    4e3e:	3f ef       	ldi	r19, 0xFF	; 255
    4e40:	4f e7       	ldi	r20, 0x7F	; 127
    4e42:	57 e4       	ldi	r21, 0x47	; 71
    4e44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e48:	18 16       	cp	r1, r24
    4e4a:	4c f5       	brge	.+82     	; 0x4e9e <EditPassword+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e4c:	6f a1       	ldd	r22, Y+39	; 0x27
    4e4e:	78 a5       	ldd	r23, Y+40	; 0x28
    4e50:	89 a5       	ldd	r24, Y+41	; 0x29
    4e52:	9a a5       	ldd	r25, Y+42	; 0x2a
    4e54:	20 e0       	ldi	r18, 0x00	; 0
    4e56:	30 e0       	ldi	r19, 0x00	; 0
    4e58:	40 e2       	ldi	r20, 0x20	; 32
    4e5a:	51 e4       	ldi	r21, 0x41	; 65
    4e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e60:	dc 01       	movw	r26, r24
    4e62:	cb 01       	movw	r24, r22
    4e64:	bc 01       	movw	r22, r24
    4e66:	cd 01       	movw	r24, r26
    4e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e6c:	dc 01       	movw	r26, r24
    4e6e:	cb 01       	movw	r24, r22
    4e70:	9a a3       	std	Y+34, r25	; 0x22
    4e72:	89 a3       	std	Y+33, r24	; 0x21
    4e74:	0f c0       	rjmp	.+30     	; 0x4e94 <EditPassword+0x182>
    4e76:	88 ec       	ldi	r24, 0xC8	; 200
    4e78:	90 e0       	ldi	r25, 0x00	; 0
    4e7a:	98 a3       	std	Y+32, r25	; 0x20
    4e7c:	8f 8f       	std	Y+31, r24	; 0x1f
    4e7e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4e80:	98 a1       	ldd	r25, Y+32	; 0x20
    4e82:	01 97       	sbiw	r24, 0x01	; 1
    4e84:	f1 f7       	brne	.-4      	; 0x4e82 <EditPassword+0x170>
    4e86:	98 a3       	std	Y+32, r25	; 0x20
    4e88:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e8a:	89 a1       	ldd	r24, Y+33	; 0x21
    4e8c:	9a a1       	ldd	r25, Y+34	; 0x22
    4e8e:	01 97       	sbiw	r24, 0x01	; 1
    4e90:	9a a3       	std	Y+34, r25	; 0x22
    4e92:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e94:	89 a1       	ldd	r24, Y+33	; 0x21
    4e96:	9a a1       	ldd	r25, Y+34	; 0x22
    4e98:	00 97       	sbiw	r24, 0x00	; 0
    4e9a:	69 f7       	brne	.-38     	; 0x4e76 <EditPassword+0x164>
    4e9c:	50 c1       	rjmp	.+672    	; 0x513e <EditPassword+0x42c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e9e:	6b a1       	ldd	r22, Y+35	; 0x23
    4ea0:	7c a1       	ldd	r23, Y+36	; 0x24
    4ea2:	8d a1       	ldd	r24, Y+37	; 0x25
    4ea4:	9e a1       	ldd	r25, Y+38	; 0x26
    4ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eaa:	dc 01       	movw	r26, r24
    4eac:	cb 01       	movw	r24, r22
    4eae:	9a a3       	std	Y+34, r25	; 0x22
    4eb0:	89 a3       	std	Y+33, r24	; 0x21
    4eb2:	89 a1       	ldd	r24, Y+33	; 0x21
    4eb4:	9a a1       	ldd	r25, Y+34	; 0x22
    4eb6:	9e 8f       	std	Y+30, r25	; 0x1e
    4eb8:	8d 8f       	std	Y+29, r24	; 0x1d
    4eba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ebc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4ebe:	01 97       	sbiw	r24, 0x01	; 1
    4ec0:	f1 f7       	brne	.-4      	; 0x4ebe <EditPassword+0x1ac>
    4ec2:	9e 8f       	std	Y+30, r25	; 0x1e
    4ec4:	8d 8f       	std	Y+29, r24	; 0x1d
    4ec6:	3b c1       	rjmp	.+630    	; 0x513e <EditPassword+0x42c>
			_delay_ms(700);
			break;
		}
		else
		{
			if(Counter == 2)
    4ec8:	8b a5       	ldd	r24, Y+43	; 0x2b
    4eca:	82 30       	cpi	r24, 0x02	; 2
    4ecc:	09 f0       	breq	.+2      	; 0x4ed0 <EditPassword+0x1be>
    4ece:	8c c0       	rjmp	.+280    	; 0x4fe8 <EditPassword+0x2d6>
			{
				LCD_voidClearLine(0);
    4ed0:	80 e0       	ldi	r24, 0x00	; 0
    4ed2:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
				LCD_voidClearLine(1);
    4ed6:	81 e0       	ldi	r24, 0x01	; 1
    4ed8:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
				LCD_voidGoTo_XY (0,0);
    4edc:	80 e0       	ldi	r24, 0x00	; 0
    4ede:	60 e0       	ldi	r22, 0x00	; 0
    4ee0:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
				LCD_voidWriteString ("Pass NOT Update");
    4ee4:	81 ea       	ldi	r24, 0xA1	; 161
    4ee6:	91 e0       	ldi	r25, 0x01	; 1
    4ee8:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
				LCD_voidGoTo_XY (1,0);
    4eec:	81 e0       	ldi	r24, 0x01	; 1
    4eee:	60 e0       	ldi	r22, 0x00	; 0
    4ef0:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
				LCD_voidWriteString ("No More Tries");
    4ef4:	81 eb       	ldi	r24, 0xB1	; 177
    4ef6:	91 e0       	ldi	r25, 0x01	; 1
    4ef8:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
    4efc:	80 e0       	ldi	r24, 0x00	; 0
    4efe:	90 e0       	ldi	r25, 0x00	; 0
    4f00:	a6 e1       	ldi	r26, 0x16	; 22
    4f02:	b4 e4       	ldi	r27, 0x44	; 68
    4f04:	89 8f       	std	Y+25, r24	; 0x19
    4f06:	9a 8f       	std	Y+26, r25	; 0x1a
    4f08:	ab 8f       	std	Y+27, r26	; 0x1b
    4f0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f0c:	69 8d       	ldd	r22, Y+25	; 0x19
    4f0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4f10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4f14:	20 e0       	ldi	r18, 0x00	; 0
    4f16:	30 e0       	ldi	r19, 0x00	; 0
    4f18:	4a ef       	ldi	r20, 0xFA	; 250
    4f1a:	54 e4       	ldi	r21, 0x44	; 68
    4f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f20:	dc 01       	movw	r26, r24
    4f22:	cb 01       	movw	r24, r22
    4f24:	8d 8b       	std	Y+21, r24	; 0x15
    4f26:	9e 8b       	std	Y+22, r25	; 0x16
    4f28:	af 8b       	std	Y+23, r26	; 0x17
    4f2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4f2c:	6d 89       	ldd	r22, Y+21	; 0x15
    4f2e:	7e 89       	ldd	r23, Y+22	; 0x16
    4f30:	8f 89       	ldd	r24, Y+23	; 0x17
    4f32:	98 8d       	ldd	r25, Y+24	; 0x18
    4f34:	20 e0       	ldi	r18, 0x00	; 0
    4f36:	30 e0       	ldi	r19, 0x00	; 0
    4f38:	40 e8       	ldi	r20, 0x80	; 128
    4f3a:	5f e3       	ldi	r21, 0x3F	; 63
    4f3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4f40:	88 23       	and	r24, r24
    4f42:	2c f4       	brge	.+10     	; 0x4f4e <EditPassword+0x23c>
		__ticks = 1;
    4f44:	81 e0       	ldi	r24, 0x01	; 1
    4f46:	90 e0       	ldi	r25, 0x00	; 0
    4f48:	9c 8b       	std	Y+20, r25	; 0x14
    4f4a:	8b 8b       	std	Y+19, r24	; 0x13
    4f4c:	3f c0       	rjmp	.+126    	; 0x4fcc <EditPassword+0x2ba>
	else if (__tmp > 65535)
    4f4e:	6d 89       	ldd	r22, Y+21	; 0x15
    4f50:	7e 89       	ldd	r23, Y+22	; 0x16
    4f52:	8f 89       	ldd	r24, Y+23	; 0x17
    4f54:	98 8d       	ldd	r25, Y+24	; 0x18
    4f56:	20 e0       	ldi	r18, 0x00	; 0
    4f58:	3f ef       	ldi	r19, 0xFF	; 255
    4f5a:	4f e7       	ldi	r20, 0x7F	; 127
    4f5c:	57 e4       	ldi	r21, 0x47	; 71
    4f5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4f62:	18 16       	cp	r1, r24
    4f64:	4c f5       	brge	.+82     	; 0x4fb8 <EditPassword+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f66:	69 8d       	ldd	r22, Y+25	; 0x19
    4f68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4f6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4f6e:	20 e0       	ldi	r18, 0x00	; 0
    4f70:	30 e0       	ldi	r19, 0x00	; 0
    4f72:	40 e2       	ldi	r20, 0x20	; 32
    4f74:	51 e4       	ldi	r21, 0x41	; 65
    4f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f7a:	dc 01       	movw	r26, r24
    4f7c:	cb 01       	movw	r24, r22
    4f7e:	bc 01       	movw	r22, r24
    4f80:	cd 01       	movw	r24, r26
    4f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f86:	dc 01       	movw	r26, r24
    4f88:	cb 01       	movw	r24, r22
    4f8a:	9c 8b       	std	Y+20, r25	; 0x14
    4f8c:	8b 8b       	std	Y+19, r24	; 0x13
    4f8e:	0f c0       	rjmp	.+30     	; 0x4fae <EditPassword+0x29c>
    4f90:	88 ec       	ldi	r24, 0xC8	; 200
    4f92:	90 e0       	ldi	r25, 0x00	; 0
    4f94:	9a 8b       	std	Y+18, r25	; 0x12
    4f96:	89 8b       	std	Y+17, r24	; 0x11
    4f98:	89 89       	ldd	r24, Y+17	; 0x11
    4f9a:	9a 89       	ldd	r25, Y+18	; 0x12
    4f9c:	01 97       	sbiw	r24, 0x01	; 1
    4f9e:	f1 f7       	brne	.-4      	; 0x4f9c <EditPassword+0x28a>
    4fa0:	9a 8b       	std	Y+18, r25	; 0x12
    4fa2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fa4:	8b 89       	ldd	r24, Y+19	; 0x13
    4fa6:	9c 89       	ldd	r25, Y+20	; 0x14
    4fa8:	01 97       	sbiw	r24, 0x01	; 1
    4faa:	9c 8b       	std	Y+20, r25	; 0x14
    4fac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fae:	8b 89       	ldd	r24, Y+19	; 0x13
    4fb0:	9c 89       	ldd	r25, Y+20	; 0x14
    4fb2:	00 97       	sbiw	r24, 0x00	; 0
    4fb4:	69 f7       	brne	.-38     	; 0x4f90 <EditPassword+0x27e>
    4fb6:	14 c0       	rjmp	.+40     	; 0x4fe0 <EditPassword+0x2ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fb8:	6d 89       	ldd	r22, Y+21	; 0x15
    4fba:	7e 89       	ldd	r23, Y+22	; 0x16
    4fbc:	8f 89       	ldd	r24, Y+23	; 0x17
    4fbe:	98 8d       	ldd	r25, Y+24	; 0x18
    4fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fc4:	dc 01       	movw	r26, r24
    4fc6:	cb 01       	movw	r24, r22
    4fc8:	9c 8b       	std	Y+20, r25	; 0x14
    4fca:	8b 8b       	std	Y+19, r24	; 0x13
    4fcc:	8b 89       	ldd	r24, Y+19	; 0x13
    4fce:	9c 89       	ldd	r25, Y+20	; 0x14
    4fd0:	98 8b       	std	Y+16, r25	; 0x10
    4fd2:	8f 87       	std	Y+15, r24	; 0x0f
    4fd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    4fd6:	98 89       	ldd	r25, Y+16	; 0x10
    4fd8:	01 97       	sbiw	r24, 0x01	; 1
    4fda:	f1 f7       	brne	.-4      	; 0x4fd8 <EditPassword+0x2c6>
    4fdc:	98 8b       	std	Y+16, r25	; 0x10
    4fde:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(600);
				Counter ++ ;
    4fe0:	8b a5       	ldd	r24, Y+43	; 0x2b
    4fe2:	8f 5f       	subi	r24, 0xFF	; 255
    4fe4:	8b a7       	std	Y+43, r24	; 0x2b
    4fe6:	a7 c0       	rjmp	.+334    	; 0x5136 <EditPassword+0x424>
			}
			else
			{
				LCD_voidClearLine(0);
    4fe8:	80 e0       	ldi	r24, 0x00	; 0
    4fea:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
				LCD_voidClearLine(1);
    4fee:	81 e0       	ldi	r24, 0x01	; 1
    4ff0:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
				LCD_voidGoTo_XY (0,0);
    4ff4:	80 e0       	ldi	r24, 0x00	; 0
    4ff6:	60 e0       	ldi	r22, 0x00	; 0
    4ff8:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
				LCD_voidWriteString ("Pass NOT Match");
    4ffc:	8f eb       	ldi	r24, 0xBF	; 191
    4ffe:	91 e0       	ldi	r25, 0x01	; 1
    5000:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
    5004:	80 e0       	ldi	r24, 0x00	; 0
    5006:	90 e0       	ldi	r25, 0x00	; 0
    5008:	af ea       	ldi	r26, 0xAF	; 175
    500a:	b3 e4       	ldi	r27, 0x43	; 67
    500c:	8b 87       	std	Y+11, r24	; 0x0b
    500e:	9c 87       	std	Y+12, r25	; 0x0c
    5010:	ad 87       	std	Y+13, r26	; 0x0d
    5012:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5014:	6b 85       	ldd	r22, Y+11	; 0x0b
    5016:	7c 85       	ldd	r23, Y+12	; 0x0c
    5018:	8d 85       	ldd	r24, Y+13	; 0x0d
    501a:	9e 85       	ldd	r25, Y+14	; 0x0e
    501c:	20 e0       	ldi	r18, 0x00	; 0
    501e:	30 e0       	ldi	r19, 0x00	; 0
    5020:	4a ef       	ldi	r20, 0xFA	; 250
    5022:	54 e4       	ldi	r21, 0x44	; 68
    5024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5028:	dc 01       	movw	r26, r24
    502a:	cb 01       	movw	r24, r22
    502c:	8f 83       	std	Y+7, r24	; 0x07
    502e:	98 87       	std	Y+8, r25	; 0x08
    5030:	a9 87       	std	Y+9, r26	; 0x09
    5032:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5034:	6f 81       	ldd	r22, Y+7	; 0x07
    5036:	78 85       	ldd	r23, Y+8	; 0x08
    5038:	89 85       	ldd	r24, Y+9	; 0x09
    503a:	9a 85       	ldd	r25, Y+10	; 0x0a
    503c:	20 e0       	ldi	r18, 0x00	; 0
    503e:	30 e0       	ldi	r19, 0x00	; 0
    5040:	40 e8       	ldi	r20, 0x80	; 128
    5042:	5f e3       	ldi	r21, 0x3F	; 63
    5044:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5048:	88 23       	and	r24, r24
    504a:	2c f4       	brge	.+10     	; 0x5056 <EditPassword+0x344>
		__ticks = 1;
    504c:	81 e0       	ldi	r24, 0x01	; 1
    504e:	90 e0       	ldi	r25, 0x00	; 0
    5050:	9e 83       	std	Y+6, r25	; 0x06
    5052:	8d 83       	std	Y+5, r24	; 0x05
    5054:	3f c0       	rjmp	.+126    	; 0x50d4 <EditPassword+0x3c2>
	else if (__tmp > 65535)
    5056:	6f 81       	ldd	r22, Y+7	; 0x07
    5058:	78 85       	ldd	r23, Y+8	; 0x08
    505a:	89 85       	ldd	r24, Y+9	; 0x09
    505c:	9a 85       	ldd	r25, Y+10	; 0x0a
    505e:	20 e0       	ldi	r18, 0x00	; 0
    5060:	3f ef       	ldi	r19, 0xFF	; 255
    5062:	4f e7       	ldi	r20, 0x7F	; 127
    5064:	57 e4       	ldi	r21, 0x47	; 71
    5066:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    506a:	18 16       	cp	r1, r24
    506c:	4c f5       	brge	.+82     	; 0x50c0 <EditPassword+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    506e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5070:	7c 85       	ldd	r23, Y+12	; 0x0c
    5072:	8d 85       	ldd	r24, Y+13	; 0x0d
    5074:	9e 85       	ldd	r25, Y+14	; 0x0e
    5076:	20 e0       	ldi	r18, 0x00	; 0
    5078:	30 e0       	ldi	r19, 0x00	; 0
    507a:	40 e2       	ldi	r20, 0x20	; 32
    507c:	51 e4       	ldi	r21, 0x41	; 65
    507e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5082:	dc 01       	movw	r26, r24
    5084:	cb 01       	movw	r24, r22
    5086:	bc 01       	movw	r22, r24
    5088:	cd 01       	movw	r24, r26
    508a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    508e:	dc 01       	movw	r26, r24
    5090:	cb 01       	movw	r24, r22
    5092:	9e 83       	std	Y+6, r25	; 0x06
    5094:	8d 83       	std	Y+5, r24	; 0x05
    5096:	0f c0       	rjmp	.+30     	; 0x50b6 <EditPassword+0x3a4>
    5098:	88 ec       	ldi	r24, 0xC8	; 200
    509a:	90 e0       	ldi	r25, 0x00	; 0
    509c:	9c 83       	std	Y+4, r25	; 0x04
    509e:	8b 83       	std	Y+3, r24	; 0x03
    50a0:	8b 81       	ldd	r24, Y+3	; 0x03
    50a2:	9c 81       	ldd	r25, Y+4	; 0x04
    50a4:	01 97       	sbiw	r24, 0x01	; 1
    50a6:	f1 f7       	brne	.-4      	; 0x50a4 <EditPassword+0x392>
    50a8:	9c 83       	std	Y+4, r25	; 0x04
    50aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50ac:	8d 81       	ldd	r24, Y+5	; 0x05
    50ae:	9e 81       	ldd	r25, Y+6	; 0x06
    50b0:	01 97       	sbiw	r24, 0x01	; 1
    50b2:	9e 83       	std	Y+6, r25	; 0x06
    50b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50b6:	8d 81       	ldd	r24, Y+5	; 0x05
    50b8:	9e 81       	ldd	r25, Y+6	; 0x06
    50ba:	00 97       	sbiw	r24, 0x00	; 0
    50bc:	69 f7       	brne	.-38     	; 0x5098 <EditPassword+0x386>
    50be:	14 c0       	rjmp	.+40     	; 0x50e8 <EditPassword+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50c0:	6f 81       	ldd	r22, Y+7	; 0x07
    50c2:	78 85       	ldd	r23, Y+8	; 0x08
    50c4:	89 85       	ldd	r24, Y+9	; 0x09
    50c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    50c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50cc:	dc 01       	movw	r26, r24
    50ce:	cb 01       	movw	r24, r22
    50d0:	9e 83       	std	Y+6, r25	; 0x06
    50d2:	8d 83       	std	Y+5, r24	; 0x05
    50d4:	8d 81       	ldd	r24, Y+5	; 0x05
    50d6:	9e 81       	ldd	r25, Y+6	; 0x06
    50d8:	9a 83       	std	Y+2, r25	; 0x02
    50da:	89 83       	std	Y+1, r24	; 0x01
    50dc:	89 81       	ldd	r24, Y+1	; 0x01
    50de:	9a 81       	ldd	r25, Y+2	; 0x02
    50e0:	01 97       	sbiw	r24, 0x01	; 1
    50e2:	f1 f7       	brne	.-4      	; 0x50e0 <EditPassword+0x3ce>
    50e4:	9a 83       	std	Y+2, r25	; 0x02
    50e6:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(350);
				LCD_voidGoTo_XY (0,0);
    50e8:	80 e0       	ldi	r24, 0x00	; 0
    50ea:	60 e0       	ldi	r22, 0x00	; 0
    50ec:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
				LCD_voidWriteString ("New Pass Again");
    50f0:	8e ec       	ldi	r24, 0xCE	; 206
    50f2:	91 e0       	ldi	r25, 0x01	; 1
    50f4:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
				LCD_voidGoTo_XY (1,13);
    50f8:	81 e0       	ldi	r24, 0x01	; 1
    50fa:	6d e0       	ldi	r22, 0x0D	; 13
    50fc:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
				LCD_voidWriteString ("[");
    5100:	8d ee       	ldi	r24, 0xED	; 237
    5102:	90 e0       	ldi	r25, 0x00	; 0
    5104:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
				LCD_voidWrite_u32Number(Counter+2);
    5108:	8b a5       	ldd	r24, Y+43	; 0x2b
    510a:	88 2f       	mov	r24, r24
    510c:	90 e0       	ldi	r25, 0x00	; 0
    510e:	02 96       	adiw	r24, 0x02	; 2
    5110:	aa 27       	eor	r26, r26
    5112:	97 fd       	sbrc	r25, 7
    5114:	a0 95       	com	r26
    5116:	ba 2f       	mov	r27, r26
    5118:	bc 01       	movw	r22, r24
    511a:	cd 01       	movw	r24, r26
    511c:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_voidWrite_u32Number>
				LCD_voidWriteString ("]");
    5120:	8f ee       	ldi	r24, 0xEF	; 239
    5122:	90 e0       	ldi	r25, 0x00	; 0
    5124:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
				NewPassword_2 = GetPassword();
    5128:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <GetPassword>
    512c:	9d a7       	std	Y+45, r25	; 0x2d
    512e:	8c a7       	std	Y+44, r24	; 0x2c
				Counter ++ ;
    5130:	8b a5       	ldd	r24, Y+43	; 0x2b
    5132:	8f 5f       	subi	r24, 0xFF	; 255
    5134:	8b a7       	std	Y+43, r24	; 0x2b
	LCD_voidGoTo_XY (1,13);
	LCD_voidWriteString ("[1]");
	NewPassword_2 = GetPassword();
	Counter = 0 ;
	ModeKey = 0 ;
	while( Counter < 3)
    5136:	8b a5       	ldd	r24, Y+43	; 0x2b
    5138:	83 30       	cpi	r24, 0x03	; 3
    513a:	08 f4       	brcc	.+2      	; 0x513e <EditPassword+0x42c>
    513c:	29 ce       	rjmp	.-942    	; 0x4d90 <EditPassword+0x7e>
				NewPassword_2 = GetPassword();
				Counter ++ ;
			}
		}
	}
}
    513e:	af 96       	adiw	r28, 0x2f	; 47
    5140:	0f b6       	in	r0, 0x3f	; 63
    5142:	f8 94       	cli
    5144:	de bf       	out	0x3e, r29	; 62
    5146:	0f be       	out	0x3f, r0	; 63
    5148:	cd bf       	out	0x3d, r28	; 61
    514a:	cf 91       	pop	r28
    514c:	df 91       	pop	r29
    514e:	08 95       	ret

00005150 <SmartHome_ManualMode>:
/*=============================================================================*/
void SmartHome_ManualMode (void)
{
    5150:	df 93       	push	r29
    5152:	cf 93       	push	r28
    5154:	cd b7       	in	r28, 0x3d	; 61
    5156:	de b7       	in	r29, 0x3e	; 62
    5158:	6d 97       	sbiw	r28, 0x1d	; 29
    515a:	0f b6       	in	r0, 0x3f	; 63
    515c:	f8 94       	cli
    515e:	de bf       	out	0x3e, r29	; 62
    5160:	0f be       	out	0x3f, r0	; 63
    5162:	cd bf       	out	0x3d, r28	; 61
	u8 ActuatorKey = 0 ;
    5164:	1d 8e       	std	Y+29, r1	; 0x1d
	USART_voidSendData('M');
    5166:	8d e4       	ldi	r24, 0x4D	; 77
    5168:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
	LCD_voidClearLine(0);
    516c:	80 e0       	ldi	r24, 0x00	; 0
    516e:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	LCD_voidClearLine(1);
    5172:	81 e0       	ldi	r24, 0x01	; 1
    5174:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	while(1)
	{
		//_delay_ms(500);
		LCD_voidClearLine(0);
    5178:	80 e0       	ldi	r24, 0x00	; 0
    517a:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
		LCD_voidClearLine(1);
    517e:	81 e0       	ldi	r24, 0x01	; 1
    5180:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
		LCD_voidGoTo_XY (0,0);
    5184:	80 e0       	ldi	r24, 0x00	; 0
    5186:	60 e0       	ldi	r22, 0x00	; 0
    5188:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
		LCD_voidWriteString ("(1)TV(2)FAN");
    518c:	8d ed       	ldi	r24, 0xDD	; 221
    518e:	91 e0       	ldi	r25, 0x01	; 1
    5190:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
		LCD_voidGoTo_XY (1,0);
    5194:	81 e0       	ldi	r24, 0x01	; 1
    5196:	60 e0       	ldi	r22, 0x00	; 0
    5198:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
		LCD_voidWriteString ("(3)Bed(4)Kit");
    519c:	89 ee       	ldi	r24, 0xE9	; 233
    519e:	91 e0       	ldi	r25, 0x01	; 1
    51a0:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
    51a4:	80 e0       	ldi	r24, 0x00	; 0
    51a6:	90 e0       	ldi	r25, 0x00	; 0
    51a8:	a8 ec       	ldi	r26, 0xC8	; 200
    51aa:	b3 e4       	ldi	r27, 0x43	; 67
    51ac:	89 8f       	std	Y+25, r24	; 0x19
    51ae:	9a 8f       	std	Y+26, r25	; 0x1a
    51b0:	ab 8f       	std	Y+27, r26	; 0x1b
    51b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51b4:	69 8d       	ldd	r22, Y+25	; 0x19
    51b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    51b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    51ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    51bc:	20 e0       	ldi	r18, 0x00	; 0
    51be:	30 e0       	ldi	r19, 0x00	; 0
    51c0:	4a ef       	ldi	r20, 0xFA	; 250
    51c2:	54 e4       	ldi	r21, 0x44	; 68
    51c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51c8:	dc 01       	movw	r26, r24
    51ca:	cb 01       	movw	r24, r22
    51cc:	8d 8b       	std	Y+21, r24	; 0x15
    51ce:	9e 8b       	std	Y+22, r25	; 0x16
    51d0:	af 8b       	std	Y+23, r26	; 0x17
    51d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    51d4:	6d 89       	ldd	r22, Y+21	; 0x15
    51d6:	7e 89       	ldd	r23, Y+22	; 0x16
    51d8:	8f 89       	ldd	r24, Y+23	; 0x17
    51da:	98 8d       	ldd	r25, Y+24	; 0x18
    51dc:	20 e0       	ldi	r18, 0x00	; 0
    51de:	30 e0       	ldi	r19, 0x00	; 0
    51e0:	40 e8       	ldi	r20, 0x80	; 128
    51e2:	5f e3       	ldi	r21, 0x3F	; 63
    51e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    51e8:	88 23       	and	r24, r24
    51ea:	2c f4       	brge	.+10     	; 0x51f6 <SmartHome_ManualMode+0xa6>
		__ticks = 1;
    51ec:	81 e0       	ldi	r24, 0x01	; 1
    51ee:	90 e0       	ldi	r25, 0x00	; 0
    51f0:	9c 8b       	std	Y+20, r25	; 0x14
    51f2:	8b 8b       	std	Y+19, r24	; 0x13
    51f4:	3f c0       	rjmp	.+126    	; 0x5274 <SmartHome_ManualMode+0x124>
	else if (__tmp > 65535)
    51f6:	6d 89       	ldd	r22, Y+21	; 0x15
    51f8:	7e 89       	ldd	r23, Y+22	; 0x16
    51fa:	8f 89       	ldd	r24, Y+23	; 0x17
    51fc:	98 8d       	ldd	r25, Y+24	; 0x18
    51fe:	20 e0       	ldi	r18, 0x00	; 0
    5200:	3f ef       	ldi	r19, 0xFF	; 255
    5202:	4f e7       	ldi	r20, 0x7F	; 127
    5204:	57 e4       	ldi	r21, 0x47	; 71
    5206:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    520a:	18 16       	cp	r1, r24
    520c:	4c f5       	brge	.+82     	; 0x5260 <SmartHome_ManualMode+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    520e:	69 8d       	ldd	r22, Y+25	; 0x19
    5210:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5212:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5214:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5216:	20 e0       	ldi	r18, 0x00	; 0
    5218:	30 e0       	ldi	r19, 0x00	; 0
    521a:	40 e2       	ldi	r20, 0x20	; 32
    521c:	51 e4       	ldi	r21, 0x41	; 65
    521e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5222:	dc 01       	movw	r26, r24
    5224:	cb 01       	movw	r24, r22
    5226:	bc 01       	movw	r22, r24
    5228:	cd 01       	movw	r24, r26
    522a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    522e:	dc 01       	movw	r26, r24
    5230:	cb 01       	movw	r24, r22
    5232:	9c 8b       	std	Y+20, r25	; 0x14
    5234:	8b 8b       	std	Y+19, r24	; 0x13
    5236:	0f c0       	rjmp	.+30     	; 0x5256 <SmartHome_ManualMode+0x106>
    5238:	88 ec       	ldi	r24, 0xC8	; 200
    523a:	90 e0       	ldi	r25, 0x00	; 0
    523c:	9a 8b       	std	Y+18, r25	; 0x12
    523e:	89 8b       	std	Y+17, r24	; 0x11
    5240:	89 89       	ldd	r24, Y+17	; 0x11
    5242:	9a 89       	ldd	r25, Y+18	; 0x12
    5244:	01 97       	sbiw	r24, 0x01	; 1
    5246:	f1 f7       	brne	.-4      	; 0x5244 <SmartHome_ManualMode+0xf4>
    5248:	9a 8b       	std	Y+18, r25	; 0x12
    524a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    524c:	8b 89       	ldd	r24, Y+19	; 0x13
    524e:	9c 89       	ldd	r25, Y+20	; 0x14
    5250:	01 97       	sbiw	r24, 0x01	; 1
    5252:	9c 8b       	std	Y+20, r25	; 0x14
    5254:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5256:	8b 89       	ldd	r24, Y+19	; 0x13
    5258:	9c 89       	ldd	r25, Y+20	; 0x14
    525a:	00 97       	sbiw	r24, 0x00	; 0
    525c:	69 f7       	brne	.-38     	; 0x5238 <SmartHome_ManualMode+0xe8>
    525e:	14 c0       	rjmp	.+40     	; 0x5288 <SmartHome_ManualMode+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5260:	6d 89       	ldd	r22, Y+21	; 0x15
    5262:	7e 89       	ldd	r23, Y+22	; 0x16
    5264:	8f 89       	ldd	r24, Y+23	; 0x17
    5266:	98 8d       	ldd	r25, Y+24	; 0x18
    5268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    526c:	dc 01       	movw	r26, r24
    526e:	cb 01       	movw	r24, r22
    5270:	9c 8b       	std	Y+20, r25	; 0x14
    5272:	8b 8b       	std	Y+19, r24	; 0x13
    5274:	8b 89       	ldd	r24, Y+19	; 0x13
    5276:	9c 89       	ldd	r25, Y+20	; 0x14
    5278:	98 8b       	std	Y+16, r25	; 0x10
    527a:	8f 87       	std	Y+15, r24	; 0x0f
    527c:	8f 85       	ldd	r24, Y+15	; 0x0f
    527e:	98 89       	ldd	r25, Y+16	; 0x10
    5280:	01 97       	sbiw	r24, 0x01	; 1
    5282:	f1 f7       	brne	.-4      	; 0x5280 <SmartHome_ManualMode+0x130>
    5284:	98 8b       	std	Y+16, r25	; 0x10
    5286:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(400);
	    LCD_voidClearLine(0);
    5288:	80 e0       	ldi	r24, 0x00	; 0
    528a:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	    LCD_voidClearLine(1);
    528e:	81 e0       	ldi	r24, 0x01	; 1
    5290:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	    LCD_voidGoTo_XY (0,0);
    5294:	80 e0       	ldi	r24, 0x00	; 0
    5296:	60 e0       	ldi	r22, 0x00	; 0
    5298:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	    LCD_voidWriteString ("(5)Bath(6)Living");
    529c:	86 ef       	ldi	r24, 0xF6	; 246
    529e:	91 e0       	ldi	r25, 0x01	; 1
    52a0:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
	    LCD_voidGoTo_XY (1,0);
    52a4:	81 e0       	ldi	r24, 0x01	; 1
    52a6:	60 e0       	ldi	r22, 0x00	; 0
    52a8:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	    LCD_voidWriteString ("Choose option(>>)");
    52ac:	87 e0       	ldi	r24, 0x07	; 7
    52ae:	92 e0       	ldi	r25, 0x02	; 2
    52b0:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
    52b4:	80 e0       	ldi	r24, 0x00	; 0
    52b6:	90 e0       	ldi	r25, 0x00	; 0
    52b8:	a8 ec       	ldi	r26, 0xC8	; 200
    52ba:	b3 e4       	ldi	r27, 0x43	; 67
    52bc:	8b 87       	std	Y+11, r24	; 0x0b
    52be:	9c 87       	std	Y+12, r25	; 0x0c
    52c0:	ad 87       	std	Y+13, r26	; 0x0d
    52c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    52c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    52c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    52ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    52cc:	20 e0       	ldi	r18, 0x00	; 0
    52ce:	30 e0       	ldi	r19, 0x00	; 0
    52d0:	4a ef       	ldi	r20, 0xFA	; 250
    52d2:	54 e4       	ldi	r21, 0x44	; 68
    52d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52d8:	dc 01       	movw	r26, r24
    52da:	cb 01       	movw	r24, r22
    52dc:	8f 83       	std	Y+7, r24	; 0x07
    52de:	98 87       	std	Y+8, r25	; 0x08
    52e0:	a9 87       	std	Y+9, r26	; 0x09
    52e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    52e4:	6f 81       	ldd	r22, Y+7	; 0x07
    52e6:	78 85       	ldd	r23, Y+8	; 0x08
    52e8:	89 85       	ldd	r24, Y+9	; 0x09
    52ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    52ec:	20 e0       	ldi	r18, 0x00	; 0
    52ee:	30 e0       	ldi	r19, 0x00	; 0
    52f0:	40 e8       	ldi	r20, 0x80	; 128
    52f2:	5f e3       	ldi	r21, 0x3F	; 63
    52f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    52f8:	88 23       	and	r24, r24
    52fa:	2c f4       	brge	.+10     	; 0x5306 <SmartHome_ManualMode+0x1b6>
		__ticks = 1;
    52fc:	81 e0       	ldi	r24, 0x01	; 1
    52fe:	90 e0       	ldi	r25, 0x00	; 0
    5300:	9e 83       	std	Y+6, r25	; 0x06
    5302:	8d 83       	std	Y+5, r24	; 0x05
    5304:	3f c0       	rjmp	.+126    	; 0x5384 <SmartHome_ManualMode+0x234>
	else if (__tmp > 65535)
    5306:	6f 81       	ldd	r22, Y+7	; 0x07
    5308:	78 85       	ldd	r23, Y+8	; 0x08
    530a:	89 85       	ldd	r24, Y+9	; 0x09
    530c:	9a 85       	ldd	r25, Y+10	; 0x0a
    530e:	20 e0       	ldi	r18, 0x00	; 0
    5310:	3f ef       	ldi	r19, 0xFF	; 255
    5312:	4f e7       	ldi	r20, 0x7F	; 127
    5314:	57 e4       	ldi	r21, 0x47	; 71
    5316:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    531a:	18 16       	cp	r1, r24
    531c:	4c f5       	brge	.+82     	; 0x5370 <SmartHome_ManualMode+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    531e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5320:	7c 85       	ldd	r23, Y+12	; 0x0c
    5322:	8d 85       	ldd	r24, Y+13	; 0x0d
    5324:	9e 85       	ldd	r25, Y+14	; 0x0e
    5326:	20 e0       	ldi	r18, 0x00	; 0
    5328:	30 e0       	ldi	r19, 0x00	; 0
    532a:	40 e2       	ldi	r20, 0x20	; 32
    532c:	51 e4       	ldi	r21, 0x41	; 65
    532e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5332:	dc 01       	movw	r26, r24
    5334:	cb 01       	movw	r24, r22
    5336:	bc 01       	movw	r22, r24
    5338:	cd 01       	movw	r24, r26
    533a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    533e:	dc 01       	movw	r26, r24
    5340:	cb 01       	movw	r24, r22
    5342:	9e 83       	std	Y+6, r25	; 0x06
    5344:	8d 83       	std	Y+5, r24	; 0x05
    5346:	0f c0       	rjmp	.+30     	; 0x5366 <SmartHome_ManualMode+0x216>
    5348:	88 ec       	ldi	r24, 0xC8	; 200
    534a:	90 e0       	ldi	r25, 0x00	; 0
    534c:	9c 83       	std	Y+4, r25	; 0x04
    534e:	8b 83       	std	Y+3, r24	; 0x03
    5350:	8b 81       	ldd	r24, Y+3	; 0x03
    5352:	9c 81       	ldd	r25, Y+4	; 0x04
    5354:	01 97       	sbiw	r24, 0x01	; 1
    5356:	f1 f7       	brne	.-4      	; 0x5354 <SmartHome_ManualMode+0x204>
    5358:	9c 83       	std	Y+4, r25	; 0x04
    535a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    535c:	8d 81       	ldd	r24, Y+5	; 0x05
    535e:	9e 81       	ldd	r25, Y+6	; 0x06
    5360:	01 97       	sbiw	r24, 0x01	; 1
    5362:	9e 83       	std	Y+6, r25	; 0x06
    5364:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5366:	8d 81       	ldd	r24, Y+5	; 0x05
    5368:	9e 81       	ldd	r25, Y+6	; 0x06
    536a:	00 97       	sbiw	r24, 0x00	; 0
    536c:	69 f7       	brne	.-38     	; 0x5348 <SmartHome_ManualMode+0x1f8>
    536e:	14 c0       	rjmp	.+40     	; 0x5398 <SmartHome_ManualMode+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5370:	6f 81       	ldd	r22, Y+7	; 0x07
    5372:	78 85       	ldd	r23, Y+8	; 0x08
    5374:	89 85       	ldd	r24, Y+9	; 0x09
    5376:	9a 85       	ldd	r25, Y+10	; 0x0a
    5378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    537c:	dc 01       	movw	r26, r24
    537e:	cb 01       	movw	r24, r22
    5380:	9e 83       	std	Y+6, r25	; 0x06
    5382:	8d 83       	std	Y+5, r24	; 0x05
    5384:	8d 81       	ldd	r24, Y+5	; 0x05
    5386:	9e 81       	ldd	r25, Y+6	; 0x06
    5388:	9a 83       	std	Y+2, r25	; 0x02
    538a:	89 83       	std	Y+1, r24	; 0x01
    538c:	89 81       	ldd	r24, Y+1	; 0x01
    538e:	9a 81       	ldd	r25, Y+2	; 0x02
    5390:	01 97       	sbiw	r24, 0x01	; 1
    5392:	f1 f7       	brne	.-4      	; 0x5390 <SmartHome_ManualMode+0x240>
    5394:	9a 83       	std	Y+2, r25	; 0x02
    5396:	89 83       	std	Y+1, r24	; 0x01
	    _delay_ms(400);
		ActuatorKey = KPAD_u8GetPressedKey ();
    5398:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <KPAD_u8GetPressedKey>
    539c:	8d 8f       	std	Y+29, r24	; 0x1d
		if ( ActuatorKey != 0xff  )
    539e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    53a0:	8f 3f       	cpi	r24, 0xFF	; 255
    53a2:	09 f4       	brne	.+2      	; 0x53a6 <SmartHome_ManualMode+0x256>
    53a4:	e9 ce       	rjmp	.-558    	; 0x5178 <SmartHome_ManualMode+0x28>
		{
			if ( ActuatorKey == '1' )
    53a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    53a8:	81 33       	cpi	r24, 0x31	; 49
    53aa:	19 f4       	brne	.+6      	; 0x53b2 <SmartHome_ManualMode+0x262>
			{ Control_TV(); }
    53ac:	0e 94 3c 2a 	call	0x5478	; 0x5478 <Control_TV>
    53b0:	e3 ce       	rjmp	.-570    	; 0x5178 <SmartHome_ManualMode+0x28>
			else if ( ActuatorKey == '2' )
    53b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    53b4:	82 33       	cpi	r24, 0x32	; 50
    53b6:	19 f4       	brne	.+6      	; 0x53be <SmartHome_ManualMode+0x26e>
			{ Control_Fan(); }
    53b8:	0e 94 86 2b 	call	0x570c	; 0x570c <Control_Fan>
    53bc:	dd ce       	rjmp	.-582    	; 0x5178 <SmartHome_ManualMode+0x28>
			else if ( ActuatorKey == '3' )
    53be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    53c0:	83 33       	cpi	r24, 0x33	; 51
    53c2:	19 f4       	brne	.+6      	; 0x53ca <SmartHome_ManualMode+0x27a>
			{ Control_Light1(); }
    53c4:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <Control_Light1>
    53c8:	d7 ce       	rjmp	.-594    	; 0x5178 <SmartHome_ManualMode+0x28>
			else if ( ActuatorKey == '4' )
    53ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    53cc:	84 33       	cpi	r24, 0x34	; 52
    53ce:	19 f4       	brne	.+6      	; 0x53d6 <SmartHome_ManualMode+0x286>
			{ Control_Light2(); }
    53d0:	0e 94 c0 2a 	call	0x5580	; 0x5580 <Control_Light2>
    53d4:	d1 ce       	rjmp	.-606    	; 0x5178 <SmartHome_ManualMode+0x28>
			else if ( ActuatorKey == '5' )
    53d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    53d8:	85 33       	cpi	r24, 0x35	; 53
    53da:	19 f4       	brne	.+6      	; 0x53e2 <SmartHome_ManualMode+0x292>
			{ Control_Light3(); }
    53dc:	0e 94 02 2b 	call	0x5604	; 0x5604 <Control_Light3>
    53e0:	cb ce       	rjmp	.-618    	; 0x5178 <SmartHome_ManualMode+0x28>
			else if ( ActuatorKey == '6' )
    53e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    53e4:	86 33       	cpi	r24, 0x36	; 54
    53e6:	19 f4       	brne	.+6      	; 0x53ee <SmartHome_ManualMode+0x29e>
			{ Control_Light4(); }
    53e8:	0e 94 44 2b 	call	0x5688	; 0x5688 <Control_Light4>
    53ec:	c5 ce       	rjmp	.-630    	; 0x5178 <SmartHome_ManualMode+0x28>
			else
			{	USART_voidSendData('#'); ModeKey = 0 ;	break;	}
    53ee:	83 e2       	ldi	r24, 0x23	; 35
    53f0:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
    53f4:	10 92 e4 02 	sts	0x02E4, r1
		}
	}
    53f8:	6d 96       	adiw	r28, 0x1d	; 29
    53fa:	0f b6       	in	r0, 0x3f	; 63
    53fc:	f8 94       	cli
    53fe:	de bf       	out	0x3e, r29	; 62
    5400:	0f be       	out	0x3f, r0	; 63
    5402:	cd bf       	out	0x3d, r28	; 61
    5404:	cf 91       	pop	r28
    5406:	df 91       	pop	r29
    5408:	08 95       	ret

0000540a <SmartHome_AutoMode>:
}
/*=============================================================================*/
void SmartHome_AutoMode (void)
{
    540a:	df 93       	push	r29
    540c:	cf 93       	push	r28
    540e:	0f 92       	push	r0
    5410:	cd b7       	in	r28, 0x3d	; 61
    5412:	de b7       	in	r29, 0x3e	; 62
	u8 ExitAutoKey = 0 ;
    5414:	19 82       	std	Y+1, r1	; 0x01
	USART_voidSendData('A');
    5416:	81 e4       	ldi	r24, 0x41	; 65
    5418:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
	LCD_voidClearLine(0);
    541c:	80 e0       	ldi	r24, 0x00	; 0
    541e:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	LCD_voidClearLine(1);
    5422:	81 e0       	ldi	r24, 0x01	; 1
    5424:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	LCD_voidGoTo_XY (0,0);
    5428:	80 e0       	ldi	r24, 0x00	; 0
    542a:	60 e0       	ldi	r22, 0x00	; 0
    542c:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	LCD_voidWriteString (" Your Home is");
    5430:	89 e1       	ldi	r24, 0x19	; 25
    5432:	92 e0       	ldi	r25, 0x02	; 2
    5434:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
	LCD_voidGoTo_XY (1,0);
    5438:	81 e0       	ldi	r24, 0x01	; 1
    543a:	60 e0       	ldi	r22, 0x00	; 0
    543c:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	LCD_voidWriteString ("Smart Automatic");
    5440:	87 e2       	ldi	r24, 0x27	; 39
    5442:	92 e0       	ldi	r25, 0x02	; 2
    5444:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
	while(1)
	{
		ExitAutoKey = KPAD_u8GetPressedKey ();
    5448:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <KPAD_u8GetPressedKey>
    544c:	89 83       	std	Y+1, r24	; 0x01
		if ( ExitAutoKey != 0xff  )
    544e:	89 81       	ldd	r24, Y+1	; 0x01
    5450:	8f 3f       	cpi	r24, 0xFF	; 255
    5452:	d1 f3       	breq	.-12     	; 0x5448 <SmartHome_AutoMode+0x3e>
		{
			if ( ExitAutoKey == '#' )
    5454:	89 81       	ldd	r24, Y+1	; 0x01
    5456:	83 32       	cpi	r24, 0x23	; 35
    5458:	b9 f7       	brne	.-18     	; 0x5448 <SmartHome_AutoMode+0x3e>
			{
				USART_voidSendData('#');
    545a:	83 e2       	ldi	r24, 0x23	; 35
    545c:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
				LCD_voidClearLine(0);
    5460:	80 e0       	ldi	r24, 0x00	; 0
    5462:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
				LCD_voidClearLine(1);
    5466:	81 e0       	ldi	r24, 0x01	; 1
    5468:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
				ModeKey = 0 ;
    546c:	10 92 e4 02 	sts	0x02E4, r1
				break;
			}
		}
	}
    5470:	0f 90       	pop	r0
    5472:	cf 91       	pop	r28
    5474:	df 91       	pop	r29
    5476:	08 95       	ret

00005478 <Control_TV>:
}
/*=============================================================================*/
void Control_TV (void)
{
    5478:	df 93       	push	r29
    547a:	cf 93       	push	r28
    547c:	0f 92       	push	r0
    547e:	cd b7       	in	r28, 0x3d	; 61
    5480:	de b7       	in	r29, 0x3e	; 62
	u8 TVKey = 0 ;
    5482:	19 82       	std	Y+1, r1	; 0x01
	USART_voidSendData('T');
    5484:	84 e5       	ldi	r24, 0x54	; 84
    5486:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
	LCD_voidClearLine(0);
    548a:	80 e0       	ldi	r24, 0x00	; 0
    548c:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	LCD_voidClearLine(1);
    5490:	81 e0       	ldi	r24, 0x01	; 1
    5492:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	LCD_voidGoTo_XY (0,0);
    5496:	80 e0       	ldi	r24, 0x00	; 0
    5498:	60 e0       	ldi	r22, 0x00	; 0
    549a:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	LCD_voidWriteString ("(1)TV: ON ");
    549e:	87 e3       	ldi	r24, 0x37	; 55
    54a0:	92 e0       	ldi	r25, 0x02	; 2
    54a2:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
	LCD_voidGoTo_XY (1,0);
    54a6:	81 e0       	ldi	r24, 0x01	; 1
    54a8:	60 e0       	ldi	r22, 0x00	; 0
    54aa:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	LCD_voidWriteString ("(0)TV: OFF");
    54ae:	82 e4       	ldi	r24, 0x42	; 66
    54b0:	92 e0       	ldi	r25, 0x02	; 2
    54b2:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
	while(1)
	{
		TVKey = KPAD_u8GetPressedKey ();
    54b6:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <KPAD_u8GetPressedKey>
    54ba:	89 83       	std	Y+1, r24	; 0x01
		if ( TVKey != 0xff  )
    54bc:	89 81       	ldd	r24, Y+1	; 0x01
    54be:	8f 3f       	cpi	r24, 0xFF	; 255
    54c0:	d1 f3       	breq	.-12     	; 0x54b6 <Control_TV+0x3e>
		{
			if ( TVKey == '1' )
    54c2:	89 81       	ldd	r24, Y+1	; 0x01
    54c4:	81 33       	cpi	r24, 0x31	; 49
    54c6:	51 f4       	brne	.+20     	; 0x54dc <Control_TV+0x64>
			{
				USART_voidSendData('1');
    54c8:	81 e3       	ldi	r24, 0x31	; 49
    54ca:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
				LCD_voidClearLine(0);
    54ce:	80 e0       	ldi	r24, 0x00	; 0
    54d0:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
				LCD_voidClearLine(1);
    54d4:	81 e0       	ldi	r24, 0x01	; 1
    54d6:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
    54da:	0c c0       	rjmp	.+24     	; 0x54f4 <Control_TV+0x7c>
				break;
			}
			else if ( TVKey == '0' )
    54dc:	89 81       	ldd	r24, Y+1	; 0x01
    54de:	80 33       	cpi	r24, 0x30	; 48
    54e0:	51 f7       	brne	.-44     	; 0x54b6 <Control_TV+0x3e>
			{
				USART_voidSendData('0');
    54e2:	80 e3       	ldi	r24, 0x30	; 48
    54e4:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
				LCD_voidClearLine(0);
    54e8:	80 e0       	ldi	r24, 0x00	; 0
    54ea:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
				LCD_voidClearLine(1);
    54ee:	81 e0       	ldi	r24, 0x01	; 1
    54f0:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
				break;
			}
		}
	}
}
    54f4:	0f 90       	pop	r0
    54f6:	cf 91       	pop	r28
    54f8:	df 91       	pop	r29
    54fa:	08 95       	ret

000054fc <Control_Light1>:
/*=============================================================================*/
void Control_Light1 (void)
{
    54fc:	df 93       	push	r29
    54fe:	cf 93       	push	r28
    5500:	0f 92       	push	r0
    5502:	cd b7       	in	r28, 0x3d	; 61
    5504:	de b7       	in	r29, 0x3e	; 62
	u8 LightKey1 = 0 ;
    5506:	19 82       	std	Y+1, r1	; 0x01
	USART_voidSendData('L');
    5508:	8c e4       	ldi	r24, 0x4C	; 76
    550a:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
	LCD_voidClearLine(0);
    550e:	80 e0       	ldi	r24, 0x00	; 0
    5510:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	LCD_voidClearLine(1);
    5514:	81 e0       	ldi	r24, 0x01	; 1
    5516:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	LCD_voidGoTo_XY (0,0);
    551a:	80 e0       	ldi	r24, 0x00	; 0
    551c:	60 e0       	ldi	r22, 0x00	; 0
    551e:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	LCD_voidWriteString ("(1)Light: ON ");
    5522:	8d e4       	ldi	r24, 0x4D	; 77
    5524:	92 e0       	ldi	r25, 0x02	; 2
    5526:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
	LCD_voidGoTo_XY (1,0);
    552a:	81 e0       	ldi	r24, 0x01	; 1
    552c:	60 e0       	ldi	r22, 0x00	; 0
    552e:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	LCD_voidWriteString ("(0)Light: OFF");
    5532:	8b e5       	ldi	r24, 0x5B	; 91
    5534:	92 e0       	ldi	r25, 0x02	; 2
    5536:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
	while(1)
	{
		LightKey1 = KPAD_u8GetPressedKey ();
    553a:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <KPAD_u8GetPressedKey>
    553e:	89 83       	std	Y+1, r24	; 0x01
		if ( LightKey1 != 0xff  )
    5540:	89 81       	ldd	r24, Y+1	; 0x01
    5542:	8f 3f       	cpi	r24, 0xFF	; 255
    5544:	d1 f3       	breq	.-12     	; 0x553a <Control_Light1+0x3e>
		{
			if ( LightKey1 == '1' )
    5546:	89 81       	ldd	r24, Y+1	; 0x01
    5548:	81 33       	cpi	r24, 0x31	; 49
    554a:	51 f4       	brne	.+20     	; 0x5560 <Control_Light1+0x64>
			{
				USART_voidSendData('1');
    554c:	81 e3       	ldi	r24, 0x31	; 49
    554e:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
				LCD_voidClearLine(0);
    5552:	80 e0       	ldi	r24, 0x00	; 0
    5554:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
				LCD_voidClearLine(1);
    5558:	81 e0       	ldi	r24, 0x01	; 1
    555a:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
    555e:	0c c0       	rjmp	.+24     	; 0x5578 <Control_Light1+0x7c>
				break;
			}
			else if ( LightKey1 == '0' )
    5560:	89 81       	ldd	r24, Y+1	; 0x01
    5562:	80 33       	cpi	r24, 0x30	; 48
    5564:	51 f7       	brne	.-44     	; 0x553a <Control_Light1+0x3e>
			{
				USART_voidSendData('0');
    5566:	80 e3       	ldi	r24, 0x30	; 48
    5568:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
				LCD_voidClearLine(0);
    556c:	80 e0       	ldi	r24, 0x00	; 0
    556e:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
				LCD_voidClearLine(1);
    5572:	81 e0       	ldi	r24, 0x01	; 1
    5574:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
				break;
			}
		}
	}
}
    5578:	0f 90       	pop	r0
    557a:	cf 91       	pop	r28
    557c:	df 91       	pop	r29
    557e:	08 95       	ret

00005580 <Control_Light2>:
/*=============================================================================*/
void Control_Light2 (void)
{
    5580:	df 93       	push	r29
    5582:	cf 93       	push	r28
    5584:	0f 92       	push	r0
    5586:	cd b7       	in	r28, 0x3d	; 61
    5588:	de b7       	in	r29, 0x3e	; 62
	u8 LightKey2 = 0 ;
    558a:	19 82       	std	Y+1, r1	; 0x01
	USART_voidSendData('C');
    558c:	83 e4       	ldi	r24, 0x43	; 67
    558e:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
	LCD_voidClearLine(0);
    5592:	80 e0       	ldi	r24, 0x00	; 0
    5594:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	LCD_voidClearLine(1);
    5598:	81 e0       	ldi	r24, 0x01	; 1
    559a:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	LCD_voidGoTo_XY (0,0);
    559e:	80 e0       	ldi	r24, 0x00	; 0
    55a0:	60 e0       	ldi	r22, 0x00	; 0
    55a2:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	LCD_voidWriteString ("(1)Light: ON ");
    55a6:	8d e4       	ldi	r24, 0x4D	; 77
    55a8:	92 e0       	ldi	r25, 0x02	; 2
    55aa:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
	LCD_voidGoTo_XY (1,0);
    55ae:	81 e0       	ldi	r24, 0x01	; 1
    55b0:	60 e0       	ldi	r22, 0x00	; 0
    55b2:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	LCD_voidWriteString ("(0)Light: OFF");
    55b6:	8b e5       	ldi	r24, 0x5B	; 91
    55b8:	92 e0       	ldi	r25, 0x02	; 2
    55ba:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
	while(1)
	{
		LightKey2 = KPAD_u8GetPressedKey ();
    55be:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <KPAD_u8GetPressedKey>
    55c2:	89 83       	std	Y+1, r24	; 0x01
		if ( LightKey2 != 0xff  )
    55c4:	89 81       	ldd	r24, Y+1	; 0x01
    55c6:	8f 3f       	cpi	r24, 0xFF	; 255
    55c8:	d1 f3       	breq	.-12     	; 0x55be <Control_Light2+0x3e>
		{
			if ( LightKey2 == '1' )
    55ca:	89 81       	ldd	r24, Y+1	; 0x01
    55cc:	81 33       	cpi	r24, 0x31	; 49
    55ce:	51 f4       	brne	.+20     	; 0x55e4 <Control_Light2+0x64>
			{
				USART_voidSendData('1');
    55d0:	81 e3       	ldi	r24, 0x31	; 49
    55d2:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
				LCD_voidClearLine(0);
    55d6:	80 e0       	ldi	r24, 0x00	; 0
    55d8:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
				LCD_voidClearLine(1);
    55dc:	81 e0       	ldi	r24, 0x01	; 1
    55de:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
    55e2:	0c c0       	rjmp	.+24     	; 0x55fc <Control_Light2+0x7c>
				break;
			}
			else if ( LightKey2 == '0' )
    55e4:	89 81       	ldd	r24, Y+1	; 0x01
    55e6:	80 33       	cpi	r24, 0x30	; 48
    55e8:	51 f7       	brne	.-44     	; 0x55be <Control_Light2+0x3e>
			{
				USART_voidSendData('0');
    55ea:	80 e3       	ldi	r24, 0x30	; 48
    55ec:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
				LCD_voidClearLine(0);
    55f0:	80 e0       	ldi	r24, 0x00	; 0
    55f2:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
				LCD_voidClearLine(1);
    55f6:	81 e0       	ldi	r24, 0x01	; 1
    55f8:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
				break;
			}
		}
	}
}
    55fc:	0f 90       	pop	r0
    55fe:	cf 91       	pop	r28
    5600:	df 91       	pop	r29
    5602:	08 95       	ret

00005604 <Control_Light3>:

/*=============================================================================*/
void Control_Light3 (void)
{
    5604:	df 93       	push	r29
    5606:	cf 93       	push	r28
    5608:	0f 92       	push	r0
    560a:	cd b7       	in	r28, 0x3d	; 61
    560c:	de b7       	in	r29, 0x3e	; 62
	u8 LightKey3 = 0 ;
    560e:	19 82       	std	Y+1, r1	; 0x01
	USART_voidSendData('B');
    5610:	82 e4       	ldi	r24, 0x42	; 66
    5612:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
	LCD_voidClearLine(0);
    5616:	80 e0       	ldi	r24, 0x00	; 0
    5618:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	LCD_voidClearLine(1);
    561c:	81 e0       	ldi	r24, 0x01	; 1
    561e:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	LCD_voidGoTo_XY (0,0);
    5622:	80 e0       	ldi	r24, 0x00	; 0
    5624:	60 e0       	ldi	r22, 0x00	; 0
    5626:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	LCD_voidWriteString ("(1)Light: ON ");
    562a:	8d e4       	ldi	r24, 0x4D	; 77
    562c:	92 e0       	ldi	r25, 0x02	; 2
    562e:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
	LCD_voidGoTo_XY (1,0);
    5632:	81 e0       	ldi	r24, 0x01	; 1
    5634:	60 e0       	ldi	r22, 0x00	; 0
    5636:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	LCD_voidWriteString ("(0)Light: OFF");
    563a:	8b e5       	ldi	r24, 0x5B	; 91
    563c:	92 e0       	ldi	r25, 0x02	; 2
    563e:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
	while(1)
	{
		LightKey3 = KPAD_u8GetPressedKey ();
    5642:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <KPAD_u8GetPressedKey>
    5646:	89 83       	std	Y+1, r24	; 0x01
		if ( LightKey3 != 0xff  )
    5648:	89 81       	ldd	r24, Y+1	; 0x01
    564a:	8f 3f       	cpi	r24, 0xFF	; 255
    564c:	d1 f3       	breq	.-12     	; 0x5642 <Control_Light3+0x3e>
		{
			if ( LightKey3 == '1' )
    564e:	89 81       	ldd	r24, Y+1	; 0x01
    5650:	81 33       	cpi	r24, 0x31	; 49
    5652:	51 f4       	brne	.+20     	; 0x5668 <Control_Light3+0x64>
			{
				USART_voidSendData('1');
    5654:	81 e3       	ldi	r24, 0x31	; 49
    5656:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
				LCD_voidClearLine(0);
    565a:	80 e0       	ldi	r24, 0x00	; 0
    565c:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
				LCD_voidClearLine(1);
    5660:	81 e0       	ldi	r24, 0x01	; 1
    5662:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
    5666:	0c c0       	rjmp	.+24     	; 0x5680 <Control_Light3+0x7c>
				break;
			}
			else if ( LightKey3 == '0' )
    5668:	89 81       	ldd	r24, Y+1	; 0x01
    566a:	80 33       	cpi	r24, 0x30	; 48
    566c:	51 f7       	brne	.-44     	; 0x5642 <Control_Light3+0x3e>
			{
				USART_voidSendData('0');
    566e:	80 e3       	ldi	r24, 0x30	; 48
    5670:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
				LCD_voidClearLine(0);
    5674:	80 e0       	ldi	r24, 0x00	; 0
    5676:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
				LCD_voidClearLine(1);
    567a:	81 e0       	ldi	r24, 0x01	; 1
    567c:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
				break;
			}
		}
	}
}
    5680:	0f 90       	pop	r0
    5682:	cf 91       	pop	r28
    5684:	df 91       	pop	r29
    5686:	08 95       	ret

00005688 <Control_Light4>:
/*=============================================================================*/
void Control_Light4 (void)
{
    5688:	df 93       	push	r29
    568a:	cf 93       	push	r28
    568c:	0f 92       	push	r0
    568e:	cd b7       	in	r28, 0x3d	; 61
    5690:	de b7       	in	r29, 0x3e	; 62
	u8 LightKey4 = 0 ;
    5692:	19 82       	std	Y+1, r1	; 0x01
	USART_voidSendData('K');
    5694:	8b e4       	ldi	r24, 0x4B	; 75
    5696:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
	LCD_voidClearLine(0);
    569a:	80 e0       	ldi	r24, 0x00	; 0
    569c:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	LCD_voidClearLine(1);
    56a0:	81 e0       	ldi	r24, 0x01	; 1
    56a2:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	LCD_voidGoTo_XY (0,0);
    56a6:	80 e0       	ldi	r24, 0x00	; 0
    56a8:	60 e0       	ldi	r22, 0x00	; 0
    56aa:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	LCD_voidWriteString ("(1)Light: ON ");
    56ae:	8d e4       	ldi	r24, 0x4D	; 77
    56b0:	92 e0       	ldi	r25, 0x02	; 2
    56b2:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
	LCD_voidGoTo_XY (1,0);
    56b6:	81 e0       	ldi	r24, 0x01	; 1
    56b8:	60 e0       	ldi	r22, 0x00	; 0
    56ba:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	LCD_voidWriteString ("(0)Light: OFF");
    56be:	8b e5       	ldi	r24, 0x5B	; 91
    56c0:	92 e0       	ldi	r25, 0x02	; 2
    56c2:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
	while(1)
	{
		LightKey4 = KPAD_u8GetPressedKey ();
    56c6:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <KPAD_u8GetPressedKey>
    56ca:	89 83       	std	Y+1, r24	; 0x01
		if ( LightKey4 != 0xff  )
    56cc:	89 81       	ldd	r24, Y+1	; 0x01
    56ce:	8f 3f       	cpi	r24, 0xFF	; 255
    56d0:	d1 f3       	breq	.-12     	; 0x56c6 <Control_Light4+0x3e>
		{
			if ( LightKey4 == '1' )
    56d2:	89 81       	ldd	r24, Y+1	; 0x01
    56d4:	81 33       	cpi	r24, 0x31	; 49
    56d6:	51 f4       	brne	.+20     	; 0x56ec <Control_Light4+0x64>
			{
				USART_voidSendData('1');
    56d8:	81 e3       	ldi	r24, 0x31	; 49
    56da:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
				LCD_voidClearLine(0);
    56de:	80 e0       	ldi	r24, 0x00	; 0
    56e0:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
				LCD_voidClearLine(1);
    56e4:	81 e0       	ldi	r24, 0x01	; 1
    56e6:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
    56ea:	0c c0       	rjmp	.+24     	; 0x5704 <Control_Light4+0x7c>
				break;
			}
			else if ( LightKey4 == '0' )
    56ec:	89 81       	ldd	r24, Y+1	; 0x01
    56ee:	80 33       	cpi	r24, 0x30	; 48
    56f0:	51 f7       	brne	.-44     	; 0x56c6 <Control_Light4+0x3e>
			{
				USART_voidSendData('0');
    56f2:	80 e3       	ldi	r24, 0x30	; 48
    56f4:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
				LCD_voidClearLine(0);
    56f8:	80 e0       	ldi	r24, 0x00	; 0
    56fa:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
				LCD_voidClearLine(1);
    56fe:	81 e0       	ldi	r24, 0x01	; 1
    5700:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
				break;
			}
		}
	}
}
    5704:	0f 90       	pop	r0
    5706:	cf 91       	pop	r28
    5708:	df 91       	pop	r29
    570a:	08 95       	ret

0000570c <Control_Fan>:
/*=============================================================================*/
void Control_Fan (void)
{
    570c:	df 93       	push	r29
    570e:	cf 93       	push	r28
    5710:	0f 92       	push	r0
    5712:	cd b7       	in	r28, 0x3d	; 61
    5714:	de b7       	in	r29, 0x3e	; 62
	u8 FanKey = 0 ;
    5716:	19 82       	std	Y+1, r1	; 0x01
	USART_voidSendData('F');
    5718:	86 e4       	ldi	r24, 0x46	; 70
    571a:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
	LCD_voidClearLine(0);
    571e:	80 e0       	ldi	r24, 0x00	; 0
    5720:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	LCD_voidClearLine(1);
    5724:	81 e0       	ldi	r24, 0x01	; 1
    5726:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
	LCD_voidGoTo_XY (0,0);
    572a:	80 e0       	ldi	r24, 0x00	; 0
    572c:	60 e0       	ldi	r22, 0x00	; 0
    572e:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	LCD_voidWriteString ("(1)Fan: ON ");
    5732:	89 e6       	ldi	r24, 0x69	; 105
    5734:	92 e0       	ldi	r25, 0x02	; 2
    5736:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
	LCD_voidGoTo_XY (1,0);
    573a:	81 e0       	ldi	r24, 0x01	; 1
    573c:	60 e0       	ldi	r22, 0x00	; 0
    573e:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <LCD_voidGoTo_XY>
	LCD_voidWriteString ("(0)Fan: OFF");
    5742:	85 e7       	ldi	r24, 0x75	; 117
    5744:	92 e0       	ldi	r25, 0x02	; 2
    5746:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <LCD_voidWriteString>
	while(1)
	{
		FanKey = KPAD_u8GetPressedKey ();
    574a:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <KPAD_u8GetPressedKey>
    574e:	89 83       	std	Y+1, r24	; 0x01
		if ( FanKey != 0xff  )
    5750:	89 81       	ldd	r24, Y+1	; 0x01
    5752:	8f 3f       	cpi	r24, 0xFF	; 255
    5754:	d1 f3       	breq	.-12     	; 0x574a <Control_Fan+0x3e>
		{
			if ( FanKey == '1' )
    5756:	89 81       	ldd	r24, Y+1	; 0x01
    5758:	81 33       	cpi	r24, 0x31	; 49
    575a:	51 f4       	brne	.+20     	; 0x5770 <Control_Fan+0x64>
			{
				USART_voidSendData('1');
    575c:	81 e3       	ldi	r24, 0x31	; 49
    575e:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
				LCD_voidClearLine(0);
    5762:	80 e0       	ldi	r24, 0x00	; 0
    5764:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
				LCD_voidClearLine(1);
    5768:	81 e0       	ldi	r24, 0x01	; 1
    576a:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
    576e:	0c c0       	rjmp	.+24     	; 0x5788 <Control_Fan+0x7c>
				break;
			}
			else if ( FanKey == '0' )
    5770:	89 81       	ldd	r24, Y+1	; 0x01
    5772:	80 33       	cpi	r24, 0x30	; 48
    5774:	51 f7       	brne	.-44     	; 0x574a <Control_Fan+0x3e>
			{
				USART_voidSendData('0');
    5776:	80 e3       	ldi	r24, 0x30	; 48
    5778:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_voidSendData>
				LCD_voidClearLine(0);
    577c:	80 e0       	ldi	r24, 0x00	; 0
    577e:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
				LCD_voidClearLine(1);
    5782:	81 e0       	ldi	r24, 0x01	; 1
    5784:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <LCD_voidClearLine>
				break;
			}
		}
	}
}
    5788:	0f 90       	pop	r0
    578a:	cf 91       	pop	r28
    578c:	df 91       	pop	r29
    578e:	08 95       	ret

00005790 <OpenDoor>:

/*=============================================================================*/
void OpenDoor (void)
{
    5790:	df 93       	push	r29
    5792:	cf 93       	push	r28
    5794:	cd b7       	in	r28, 0x3d	; 61
    5796:	de b7       	in	r29, 0x3e	; 62
		SERVO_voidRotateSpecificAngle_OC1A ( 180 );
    5798:	84 eb       	ldi	r24, 0xB4	; 180
    579a:	90 e0       	ldi	r25, 0x00	; 0
    579c:	0e 94 a9 19 	call	0x3352	; 0x3352 <SERVO_voidRotateSpecificAngle_OC1A>
}
    57a0:	cf 91       	pop	r28
    57a2:	df 91       	pop	r29
    57a4:	08 95       	ret

000057a6 <CloseDoor>:
/*=============================================================================*/
void CloseDoor (void)
{
    57a6:	df 93       	push	r29
    57a8:	cf 93       	push	r28
    57aa:	cd b7       	in	r28, 0x3d	; 61
    57ac:	de b7       	in	r29, 0x3e	; 62
		SERVO_voidRotateSpecificAngle_OC1A ( 0 );
    57ae:	80 e0       	ldi	r24, 0x00	; 0
    57b0:	90 e0       	ldi	r25, 0x00	; 0
    57b2:	0e 94 a9 19 	call	0x3352	; 0x3352 <SERVO_voidRotateSpecificAngle_OC1A>
}
    57b6:	cf 91       	pop	r28
    57b8:	df 91       	pop	r29
    57ba:	08 95       	ret

000057bc <__mulsi3>:
    57bc:	62 9f       	mul	r22, r18
    57be:	d0 01       	movw	r26, r0
    57c0:	73 9f       	mul	r23, r19
    57c2:	f0 01       	movw	r30, r0
    57c4:	82 9f       	mul	r24, r18
    57c6:	e0 0d       	add	r30, r0
    57c8:	f1 1d       	adc	r31, r1
    57ca:	64 9f       	mul	r22, r20
    57cc:	e0 0d       	add	r30, r0
    57ce:	f1 1d       	adc	r31, r1
    57d0:	92 9f       	mul	r25, r18
    57d2:	f0 0d       	add	r31, r0
    57d4:	83 9f       	mul	r24, r19
    57d6:	f0 0d       	add	r31, r0
    57d8:	74 9f       	mul	r23, r20
    57da:	f0 0d       	add	r31, r0
    57dc:	65 9f       	mul	r22, r21
    57de:	f0 0d       	add	r31, r0
    57e0:	99 27       	eor	r25, r25
    57e2:	72 9f       	mul	r23, r18
    57e4:	b0 0d       	add	r27, r0
    57e6:	e1 1d       	adc	r30, r1
    57e8:	f9 1f       	adc	r31, r25
    57ea:	63 9f       	mul	r22, r19
    57ec:	b0 0d       	add	r27, r0
    57ee:	e1 1d       	adc	r30, r1
    57f0:	f9 1f       	adc	r31, r25
    57f2:	bd 01       	movw	r22, r26
    57f4:	cf 01       	movw	r24, r30
    57f6:	11 24       	eor	r1, r1
    57f8:	08 95       	ret

000057fa <__udivmodsi4>:
    57fa:	a1 e2       	ldi	r26, 0x21	; 33
    57fc:	1a 2e       	mov	r1, r26
    57fe:	aa 1b       	sub	r26, r26
    5800:	bb 1b       	sub	r27, r27
    5802:	fd 01       	movw	r30, r26
    5804:	0d c0       	rjmp	.+26     	; 0x5820 <__udivmodsi4_ep>

00005806 <__udivmodsi4_loop>:
    5806:	aa 1f       	adc	r26, r26
    5808:	bb 1f       	adc	r27, r27
    580a:	ee 1f       	adc	r30, r30
    580c:	ff 1f       	adc	r31, r31
    580e:	a2 17       	cp	r26, r18
    5810:	b3 07       	cpc	r27, r19
    5812:	e4 07       	cpc	r30, r20
    5814:	f5 07       	cpc	r31, r21
    5816:	20 f0       	brcs	.+8      	; 0x5820 <__udivmodsi4_ep>
    5818:	a2 1b       	sub	r26, r18
    581a:	b3 0b       	sbc	r27, r19
    581c:	e4 0b       	sbc	r30, r20
    581e:	f5 0b       	sbc	r31, r21

00005820 <__udivmodsi4_ep>:
    5820:	66 1f       	adc	r22, r22
    5822:	77 1f       	adc	r23, r23
    5824:	88 1f       	adc	r24, r24
    5826:	99 1f       	adc	r25, r25
    5828:	1a 94       	dec	r1
    582a:	69 f7       	brne	.-38     	; 0x5806 <__udivmodsi4_loop>
    582c:	60 95       	com	r22
    582e:	70 95       	com	r23
    5830:	80 95       	com	r24
    5832:	90 95       	com	r25
    5834:	9b 01       	movw	r18, r22
    5836:	ac 01       	movw	r20, r24
    5838:	bd 01       	movw	r22, r26
    583a:	cf 01       	movw	r24, r30
    583c:	08 95       	ret

0000583e <__prologue_saves__>:
    583e:	2f 92       	push	r2
    5840:	3f 92       	push	r3
    5842:	4f 92       	push	r4
    5844:	5f 92       	push	r5
    5846:	6f 92       	push	r6
    5848:	7f 92       	push	r7
    584a:	8f 92       	push	r8
    584c:	9f 92       	push	r9
    584e:	af 92       	push	r10
    5850:	bf 92       	push	r11
    5852:	cf 92       	push	r12
    5854:	df 92       	push	r13
    5856:	ef 92       	push	r14
    5858:	ff 92       	push	r15
    585a:	0f 93       	push	r16
    585c:	1f 93       	push	r17
    585e:	cf 93       	push	r28
    5860:	df 93       	push	r29
    5862:	cd b7       	in	r28, 0x3d	; 61
    5864:	de b7       	in	r29, 0x3e	; 62
    5866:	ca 1b       	sub	r28, r26
    5868:	db 0b       	sbc	r29, r27
    586a:	0f b6       	in	r0, 0x3f	; 63
    586c:	f8 94       	cli
    586e:	de bf       	out	0x3e, r29	; 62
    5870:	0f be       	out	0x3f, r0	; 63
    5872:	cd bf       	out	0x3d, r28	; 61
    5874:	09 94       	ijmp

00005876 <__epilogue_restores__>:
    5876:	2a 88       	ldd	r2, Y+18	; 0x12
    5878:	39 88       	ldd	r3, Y+17	; 0x11
    587a:	48 88       	ldd	r4, Y+16	; 0x10
    587c:	5f 84       	ldd	r5, Y+15	; 0x0f
    587e:	6e 84       	ldd	r6, Y+14	; 0x0e
    5880:	7d 84       	ldd	r7, Y+13	; 0x0d
    5882:	8c 84       	ldd	r8, Y+12	; 0x0c
    5884:	9b 84       	ldd	r9, Y+11	; 0x0b
    5886:	aa 84       	ldd	r10, Y+10	; 0x0a
    5888:	b9 84       	ldd	r11, Y+9	; 0x09
    588a:	c8 84       	ldd	r12, Y+8	; 0x08
    588c:	df 80       	ldd	r13, Y+7	; 0x07
    588e:	ee 80       	ldd	r14, Y+6	; 0x06
    5890:	fd 80       	ldd	r15, Y+5	; 0x05
    5892:	0c 81       	ldd	r16, Y+4	; 0x04
    5894:	1b 81       	ldd	r17, Y+3	; 0x03
    5896:	aa 81       	ldd	r26, Y+2	; 0x02
    5898:	b9 81       	ldd	r27, Y+1	; 0x01
    589a:	ce 0f       	add	r28, r30
    589c:	d1 1d       	adc	r29, r1
    589e:	0f b6       	in	r0, 0x3f	; 63
    58a0:	f8 94       	cli
    58a2:	de bf       	out	0x3e, r29	; 62
    58a4:	0f be       	out	0x3f, r0	; 63
    58a6:	cd bf       	out	0x3d, r28	; 61
    58a8:	ed 01       	movw	r28, r26
    58aa:	08 95       	ret

000058ac <_exit>:
    58ac:	f8 94       	cli

000058ae <__stop_program>:
    58ae:	ff cf       	rjmp	.-2      	; 0x58ae <__stop_program>
